{
  "openapi": "3.1.0",
  "info": {
    "title": "plenigo API v3",
    "description": "This is the OpenAPI description for accessing the plenigo platform.\nAll API calls are by default synchronous. Asynchronous calls are marked.\n",
    "version": "API.241104-MINOR",
    "contact": {
      "url": "https://github.com/plenigo/plenigo-doc"
    }
  },
  "servers": [
    {
      "url": "https://api.plenigo.com/api/v3.0"
    }
  ],
  "security": [
    {
      "plenigoToken": []
    }
  ],
  "x-tagGroups": [
    {
      "name": "Customers",
      "tags": [
        "Access Rights",
        "Activities",
        "Addresses",
        "Corporate Accounts",
        "Customers",
        "Payment Methods",
        "Sessions"
      ]
    },
    {
      "name": "Finance",
      "tags": [
        "Accounting",
        "Disputes",
        "Invoices",
        "Refunds",
        "Transactions"
      ]
    },
    {
      "name": "Imports",
      "tags": [
        "Order Imports"
      ]
    },
    {
      "name": "Merchant Backend",
      "tags": [
        "Backend User Session"
      ]
    },
    {
      "name": "Processes",
      "tags": [
        "Checkout",
        "Login",
        "Password Forgotten",
        "Process Settings",
        "Registration",
        "Sso Provider Login"
      ]
    },
    {
      "name": "Products",
      "tags": [
        "Age Rules",
        "Bonuses",
        "Cross Sellings",
        "Delivery Lists",
        "IVW Rules",
        "Misuse Rules",
        "Offers",
        "Price Country Segments",
        "Price Issues",
        "Product Access Rights",
        "Product Contracts",
        "Product Tags",
        "Shopping Carts",
        "Vouchers"
      ]
    },
    {
      "name": "Purchases",
      "tags": [
        "App Stores",
        "Orders",
        "Subscriptions",
        "Wallets"
      ]
    },
    {
      "name": "Reports",
      "tags": [
        "Callback Logs",
        "Downloads",
        "Mail Logs",
        "Sftp Logs"
      ]
    },
    {
      "name": "Settings",
      "tags": [
        "Api Access Tokens",
        "Additional Data Selections",
        "Blocked ibans",
        "Customer Cancellation Reasons",
        "Customer OptIns",
        "Customer Terms",
        "Sort Tree Leafs",
        "Text Module Settings"
      ]
    }
  ],
  "paths": {
    "/accessRights": {
      "get": {
        "summary": "Search access rights",
        "operationId": "searchAccessRights",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Access Rights"
        ],
        "description": "Search all access rights that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessRightsData"
                },
                "examples": {
                  "accessRightsDataExample": {
                    "$ref": "#/components/examples/accessRightsDataExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultBadGatewayErrorExample"
                  }
                }
              }
            }
          },
          "504": {
            "description": "Processing of your request took to long. To prevent blocking we aborted the request. You can resend your request without any changes.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultGatewayTimeoutErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/appStores/appleAppStore": {
      "get": {
        "summary": "Search Apple purchases",
        "operationId": "searchAppleAppStorePurchases",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "App Stores"
        ],
        "description": "Search all Apple purchases that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          },
          {
            "$ref": "#/components/parameters/tokenQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppleAppStorePurchases"
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultBadGatewayErrorExample"
                  }
                }
              }
            }
          },
          "504": {
            "description": "Processing of your request took to long. To prevent blocking we aborted the request. You can resend your request without any changes.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultGatewayTimeoutErrorExample"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Add Apple purchase",
        "operationId": "addAppleAppStorePurchase",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "App Stores"
        ],
        "description": "Add an Apple app store purchase to the plenigo system and retrieve a token for further processing.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppleAppStorePurchaseAddition"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Purchase data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppStorePurchaseList"
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultBadGatewayErrorExample"
                  }
                }
              }
            }
          },
          "504": {
            "description": "Processing of your request took to long. To prevent blocking we aborted the request. You can resend your request without any changes.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultGatewayTimeoutErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/appStores/googlePlayStore": {
      "get": {
        "summary": "Search Google Playstore purchases",
        "operationId": "searchGooglePlayStorePurchases",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "App Stores"
        ],
        "description": "Search all Google Playstore purchases that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          },
          {
            "$ref": "#/components/parameters/tokenQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GooglePlayStorePurchases"
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultBadGatewayErrorExample"
                  }
                }
              }
            }
          },
          "504": {
            "description": "Processing of your request took to long. To prevent blocking we aborted the request. You can resend your request without any changes.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultGatewayTimeoutErrorExample"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Add Google purchase",
        "operationId": "addGooglePlaystorePurchase",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "App Stores"
        ],
        "description": "Add a Google Playstore purchase to the plenigo system and retrieve a token for further processing.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GooglePlayStorePurchaseAddition"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Purchase data.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/AppStorePurchase"
                    },
                    {
                      "$ref": "#/components/schemas/AppStorePurchaseList"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultBadGatewayErrorExample"
                  }
                }
              }
            }
          },
          "504": {
            "description": "Processing of your request took to long. To prevent blocking we aborted the request. You can resend your request without any changes.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultGatewayTimeoutErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/appStores/orders": {
      "get": {
        "summary": "Search app store order",
        "operationId": "searchAppStoreOrders",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "App Stores"
        ],
        "description": "Search all app store orders that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppStoreOrders"
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultBadGatewayErrorExample"
                  }
                }
              }
            }
          },
          "504": {
            "description": "Processing of your request took to long. To prevent blocking we aborted the request. You can resend your request without any changes.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultGatewayTimeoutErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customers": {
      "get": {
        "summary": "Search customers",
        "operationId": "searchCustomers",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Customers"
        ],
        "description": "Search all customers that correspond to the given search conditions. It is important to note that email, username, and\nexternalSystemid exclude each other so only one query parameter is used. The defined priority is email, username, externalSystemId.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          },
          {
            "$ref": "#/components/parameters/externalSystemIdQuery"
          },
          {
            "$ref": "#/components/parameters/emailQuery"
          },
          {
            "$ref": "#/components/parameters/usernameQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customers"
                },
                "examples": {
                  "customersExample": {
                    "$ref": "#/components/examples/customersExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultBadGatewayErrorExample"
                  }
                }
              }
            }
          },
          "504": {
            "description": "Processing of your request took to long. To prevent blocking we aborted the request. You can resend your request without any changes.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultGatewayTimeoutErrorExample"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create customer",
        "operationId": "createCustomer",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Customers"
        ],
        "description": "Create a new customer with the data provided.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerCreation"
              },
              "examples": {
                "customerCreationExample": {
                  "$ref": "#/components/examples/customerCreationExample"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Customer that was created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                },
                "examples": {
                  "customerCreationResultExample": {
                    "$ref": "#/components/examples/customerCreationResultExample"
                  }
                }
              }
            }
          },
          "208": {
            "description": "Returns existing customer if a customer with same email and id already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                },
                "examples": {
                  "customerCreationResultExample": {
                    "$ref": "#/components/examples/customerCreationResultExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultBadGatewayErrorExample"
                  }
                }
              }
            }
          },
          "504": {
            "description": "Processing of your request took to long. To prevent blocking we aborted the request. You can resend your request without any changes.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultGatewayTimeoutErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/invoices": {
      "get": {
        "summary": "Search invoices",
        "operationId": "searchInvoices",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Invoices"
        ],
        "description": "Search all invoices that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          },
          {
            "$ref": "#/components/parameters/orderIdQuery"
          },
          {
            "$ref": "#/components/parameters/subscriptionItemIdQuery"
          },
          {
            "$ref": "#/components/parameters/filterByInvoiceDateQuery"
          },
          {
            "$ref": "#/components/parameters/invoiceTypeQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoices"
                },
                "examples": {
                  "invoiceExample": {
                    "$ref": "#/components/examples/invoicesExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultBadGatewayErrorExample"
                  }
                }
              }
            }
          },
          "504": {
            "description": "Processing of your request took to long. To prevent blocking we aborted the request. You can resend your request without any changes.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultGatewayTimeoutErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/orders": {
      "get": {
        "summary": "Search orders",
        "operationId": "searchOrders",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Orders"
        ],
        "description": "Search all orders that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          },
          {
            "$ref": "#/components/parameters/externalSystemIdQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Orders"
                },
                "examples": {
                  "orderExample": {
                    "$ref": "#/components/examples/ordersExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultBadGatewayErrorExample"
                  }
                }
              }
            }
          },
          "504": {
            "description": "Processing of your request took to long. To prevent blocking we aborted the request. You can resend your request without any changes.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultGatewayTimeoutErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/orders/{orderId}/additionalData": {
      "parameters": [
        {
          "$ref": "#/components/parameters/orderIdPath"
        }
      ],
      "get": {
        "summary": "Get additional data",
        "operationId": "getOrderAdditionalData",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Orders"
        ],
        "description": "Returns additional data associated with the order associated with the provided order id.\n",
        "responses": {
          "200": {
            "description": "Returns additional data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdditionalOrderData"
                },
                "examples": {
                  "additionalDataExample": {
                    "$ref": "#/components/examples/additionalOrderDataExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultBadGatewayErrorExample"
                  }
                }
              }
            }
          },
          "504": {
            "description": "Processing of your request took to long. To prevent blocking we aborted the request. You can resend your request without any changes.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultGatewayTimeoutErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/paymentMethods/bankAccounts/{bankAccountId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/bankAccountIdPath"
        }
      ],
      "get": {
        "summary": "Get a bank account entity",
        "operationId": "getBankAccount",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Payment Methods"
        ],
        "description": "Get bank account that is identified by the passed bank account id.\n",
        "responses": {
          "200": {
            "description": "Returns bank account details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccount"
                },
                "examples": {
                  "paymentMethod": {
                    "$ref": "#/components/examples/bankAccountExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultBadGatewayErrorExample"
                  }
                }
              }
            }
          },
          "504": {
            "description": "Processing of your request took to long. To prevent blocking we aborted the request. You can resend your request without any changes.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultGatewayTimeoutErrorExample"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update bank account entity",
        "operationId": "updateBankAccount",
        "tags": [
          "Payment Methods"
        ],
        "description": "Update a bank account that is identified by the passed bank account id with the data provided.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BankAccountChange"
              },
              "examples": {
                "paymentMethod": {
                  "$ref": "#/components/examples/bankAccountExample"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Bank account was successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccount"
                },
                "examples": {
                  "paymentMethod": {
                    "$ref": "#/components/examples/bankAccountExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultBadGatewayErrorExample"
                  }
                }
              }
            }
          },
          "504": {
            "description": "Processing of your request took to long. To prevent blocking we aborted the request. You can resend your request without any changes.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultGatewayTimeoutErrorExample"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a bank account",
        "operationId": "deleteBankAccount",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Payment Methods"
        ],
        "description": "Delete a bank account. This is only possible if bank account is not associated with a subscription. Otherwise the subscription association must be\nremoved first.\n",
        "responses": {
          "202": {
            "description": "Bank account successfully deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessStatus"
                },
                "examples": {
                  "sessionExample": {
                    "$ref": "#/components/examples/successStatusExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bank account cannot be deleted because it is still used by subscriptions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultBadGatewayErrorExample"
                  }
                }
              }
            }
          },
          "504": {
            "description": "Processing of your request took to long. To prevent blocking we aborted the request. You can resend your request without any changes.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultGatewayTimeoutErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/products/offers": {
      "get": {
        "summary": "Search offers",
        "operationId": "searchProductOffers",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Offers"
        ],
        "description": "Search all offers that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          },
          {
            "$ref": "#/components/parameters/parameters-plenigoOfferIdQuery"
          },
          {
            "$ref": "#/components/parameters/sortTreeLeafIdQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Offers"
                },
                "examples": {
                  "offersExample": {
                    "$ref": "#/components/examples/offersExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultBadGatewayErrorExample"
                  }
                }
              }
            }
          },
          "504": {
            "description": "Processing of your request took to long. To prevent blocking we aborted the request. You can resend your request without any changes.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultGatewayTimeoutErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/products/priceIssues": {
      "get": {
        "summary": "Search price issues",
        "operationId": "searchProductPriceIssues",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Price Issues"
        ],
        "description": "Search all price issues that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PriceIssues"
                },
                "examples": {
                  "priceIssuesExample": {
                    "$ref": "#/components/examples/priceIssuesExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultBadGatewayErrorExample"
                  }
                }
              }
            }
          },
          "504": {
            "description": "Processing of your request took to long. To prevent blocking we aborted the request. You can resend your request without any changes.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultGatewayTimeoutErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/refunds": {
      "get": {
        "summary": "Search refunds",
        "operationId": "searchRefunds",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Refunds"
        ],
        "description": "Search all refunds that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/customerIdQuery"
          },
          {
            "$ref": "#/components/parameters/parameters-statusQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Refunds"
                },
                "examples": {
                  "refundsExample": {
                    "$ref": "#/components/examples/refundsExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo merchant user session provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultBadGatewayErrorExample"
                  }
                }
              }
            }
          },
          "504": {
            "description": "Processing of your request took to long. To prevent blocking we aborted the request. You can resend your request without any changes.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultGatewayTimeoutErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/settings/customerCancellationReasons": {
      "get": {
        "summary": "Search cancellation reasons",
        "operationId": "searchCustomerCancellationReasons",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Customer Cancellation Reasons"
        ],
        "description": "Search all cancellation reasons that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCancellationReasons"
                },
                "examples": {
                  "cancellationReasonsExample": {
                    "$ref": "#/components/examples/customerCancellationReasonsExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultBadGatewayErrorExample"
                  }
                }
              }
            }
          },
          "504": {
            "description": "Processing of your request took to long. To prevent blocking we aborted the request. You can resend your request without any changes.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultGatewayTimeoutErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions": {
      "get": {
        "summary": "Search subscriptions",
        "operationId": "searchSubscriptions",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Subscriptions"
        ],
        "description": "Search all subscriptions that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          },
          {
            "$ref": "#/components/parameters/subscriptionItemIdQuery"
          },
          {
            "$ref": "#/components/parameters/externalSystemIdQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscriptions"
                },
                "examples": {
                  "subscriptionsExample": {
                    "$ref": "#/components/examples/subscriptionsExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultBadGatewayErrorExample"
                  }
                }
              }
            }
          },
          "504": {
            "description": "Processing of your request took to long. To prevent blocking we aborted the request. You can resend your request without any changes.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultGatewayTimeoutErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/subscriptionIdPath"
        }
      ],
      "get": {
        "summary": "Get subscription",
        "operationId": "getSubscription",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Subscriptions"
        ],
        "description": "Get subscription that is identified by the passed subscription id.\n",
        "responses": {
          "200": {
            "description": "Returns subscription details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                },
                "examples": {
                  "subscriptionExample": {
                    "$ref": "#/components/examples/subscriptionExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultBadGatewayErrorExample"
                  }
                }
              }
            }
          },
          "504": {
            "description": "Processing of your request took to long. To prevent blocking we aborted the request. You can resend your request without any changes.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultGatewayTimeoutErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/chain/{chainId}/additionalData": {
      "parameters": [
        {
          "$ref": "#/components/parameters/chainIdPath"
        }
      ],
      "get": {
        "summary": "Get additional chain data",
        "operationId": "getSubscriptionChainAdditionalData",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Subscriptions"
        ],
        "description": "Returns additional data associated with the chain associated with the provided chain id.\n",
        "responses": {
          "200": {
            "description": "Returns additional data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdditionalChainData"
                },
                "examples": {
                  "additionalChainDataExample": {
                    "$ref": "#/components/examples/additionalChainDataExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultBadGatewayErrorExample"
                  }
                }
              }
            }
          },
          "504": {
            "description": "Processing of your request took to long. To prevent blocking we aborted the request. You can resend your request without any changes.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultGatewayTimeoutErrorExample"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Replace additional chain data",
        "tags": [
          "Subscriptions"
        ],
        "description": "Replace additional data of a subscription chain. All data will be replaced with the new data provided.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdditionalChainData"
              },
              "examples": {
                "additionalChainDataExample": {
                  "$ref": "#/components/examples/additionalChainDataExample"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns additional data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdditionalChainData"
                },
                "examples": {
                  "additionalChainDataExample": {
                    "$ref": "#/components/examples/additionalChainDataExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultBadGatewayErrorExample"
                  }
                }
              }
            }
          },
          "504": {
            "description": "Processing of your request took to long. To prevent blocking we aborted the request. You can resend your request without any changes.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultGatewayTimeoutErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/transactions": {
      "get": {
        "summary": "Search transactions",
        "operationId": "searchTransactions",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Transactions"
        ],
        "description": "Search all transactions that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          },
          {
            "$ref": "#/components/parameters/plenigoTransactionIdQuery"
          },
          {
            "$ref": "#/components/parameters/pspTransactionIdQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transactions"
                },
                "examples": {
                  "transactionsExample": {
                    "$ref": "#/components/examples/transactionsExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultBadGatewayErrorExample"
                  }
                }
              }
            }
          },
          "504": {
            "description": "Processing of your request took to long. To prevent blocking we aborted the request. You can resend your request without any changes.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultGatewayTimeoutErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/vouchers": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/voucherStatusQuery"
          }
        ],
        "summary": "Returns all vouchers",
        "operationId": "searchVouchers",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Vouchers"
        ],
        "description": "Returns all vouchers of the selected channel page, depending on query parameters",
        "responses": {
          "200": {
            "description": "Vouchers",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiVoucherPage"
                },
                "examples": {
                  "orderExample": {
                    "$ref": "#/components/examples/apiVoucherPageExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo merchant user session provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultBadGatewayErrorExample"
                  }
                }
              }
            }
          },
          "504": {
            "description": "Processing of your request took to long. To prevent blocking we aborted the request. You can resend your request without any changes.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultGatewayTimeoutErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/vouchers/campaigns": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/callbackQuery"
          }
        ],
        "summary": "Create voucher campaign",
        "operationId": "createVoucherCampaign",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Vouchers"
        ],
        "description": "*ASYNC* Creates a new voucher campaign with the data provided. ATTENTION - this process is async.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CampaignCreation"
              },
              "examples": {
                "campaignCreationExample": {
                  "$ref": "#/components/examples/campaignCreationExample"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Campaign that will be created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiCampaignCreationResult"
                },
                "examples": {
                  "campaignCreationResultExample": {
                    "$ref": "#/components/examples/campaignCreationResultExample"
                  }
                }
              }
            }
          },
          "202": {
            "description": "Success result with promise id.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessStatus"
                },
                "examples": {
                  "successStatusExample": {
                    "$ref": "#/components/examples/successStatusWithPromiseIdExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultBadGatewayErrorExample"
                  }
                }
              }
            }
          },
          "504": {
            "description": "Processing of your request took to long. To prevent blocking we aborted the request. You can resend your request without any changes.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultGatewayTimeoutErrorExample"
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Search campaigns",
        "operationId": "searchVoucherCampaigns",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Vouchers"
        ],
        "description": "Search all campaigns that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/voucherCodeQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiCampaignPage"
                },
                "examples": {
                  "campaignPageExample": {
                    "$ref": "#/components/examples/campaignPageExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "402": {
            "description": "This API call is part of a paid feature. The according module must be purchased in the plenigo backend before the API call can be used.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultBadGatewayErrorExample"
                  }
                }
              }
            }
          },
          "504": {
            "description": "Processing of your request took to long. To prevent blocking we aborted the request. You can resend your request without any changes.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultGatewayTimeoutErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/vouchers/channels/{channelId}/vouchers": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/channelIdPath"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/voucherStatusQuery"
          }
        ],
        "summary": "Returns channel vouchers",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Vouchers"
        ],
        "description": "Returns all vouchers of the selected channel page, depending on query parameters",
        "responses": {
          "200": {
            "description": "Vouchers",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiVoucherPage"
                },
                "examples": {
                  "orderExample": {
                    "$ref": "#/components/examples/apiVoucherPageExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo merchant user session provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultBadGatewayErrorExample"
                  }
                }
              }
            }
          },
          "504": {
            "description": "Processing of your request took to long. To prevent blocking we aborted the request. You can resend your request without any changes.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultGatewayTimeoutErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "plenigoToken": {
        "type": "apiKey",
        "name": "X-plenigo-token",
        "in": "header",
        "description": "To access functions from the public API a valid plenigo token must be provided as header.\n\n```\ncurl -i -H \"X-plenigo-token: PLENIGO_TOKEN\" -H \"Content-Type: application/json\" https://hostname/resource\n```\n"
      }
    },
    "parameters": {
      "sizeQuery": {
        "name": "size",
        "in": "query",
        "description": "amount of elements to return - if no size is provided or the size is not within range it will be automatically set to 5",
        "required": false,
        "schema": {
          "type": "integer",
          "minimum": 5,
          "maximum": 100,
          "format": "int32"
        }
      },
      "startTimeQuery": {
        "name": "startTime",
        "in": "query",
        "description": "time the entity was changed after or equal with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      },
      "endTimeQuery": {
        "name": "endTime",
        "in": "query",
        "description": "time the entity was changed before or equal with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      },
      "startingAfterQuery": {
        "name": "startingAfter",
        "in": "query",
        "description": "A cursor for use in pagination. startingAfter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include startingAfter=obj_foo in order to fetch the next result set.",
        "schema": {
          "type": "string",
          "maxLength": 100
        }
      },
      "endingBeforeQuery": {
        "name": "endingBefore",
        "in": "query",
        "description": "A cursor for use in pagination. endingBefore is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include endingBefore=obj_bar in order to fetch the previous page of the list.",
        "schema": {
          "type": "string",
          "maxLength": 100
        }
      },
      "sortQuery": {
        "name": "sort",
        "in": "query",
        "description": "The sort of the search, if its desc it will revert to search for a lower startingAfter",
        "schema": {
          "type": "string",
          "maxLength": 4,
          "enum": [
            "ASC",
            "DESC"
          ]
        }
      },
      "tokenQuery": {
        "name": "token",
        "in": "query",
        "description": "app store token",
        "schema": {
          "type": "string"
        }
      },
      "externalSystemIdQuery": {
        "name": "externalSystemId",
        "in": "query",
        "description": "external system id defined by third party systems",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "emailQuery": {
        "name": "email",
        "in": "query",
        "description": "email to search for",
        "required": false,
        "schema": {
          "type": "string",
          "format": "email"
        }
      },
      "usernameQuery": {
        "name": "username",
        "in": "query",
        "description": "username to search for",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "orderIdQuery": {
        "name": "orderId",
        "in": "query",
        "description": "unique id of the order",
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "subscriptionItemIdQuery": {
        "name": "subscriptionItemId",
        "in": "query",
        "description": "unique id of the subscription item to search for",
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "filterByInvoiceDateQuery": {
        "name": "filterByInvoiceDate",
        "in": "query",
        "description": "flag indicating if returned list of invoiced should be filtered by invoice date",
        "schema": {
          "type": "boolean"
        }
      },
      "invoiceTypeQuery": {
        "name": "invoiceType",
        "in": "query",
        "description": "allows filtering by specific invoice type",
        "schema": {
          "type": "string",
          "enum": [
            "INVOICE",
            "CANCELLATION",
            "CANCELLATION_CORRECTION",
            "CORRECTION"
          ]
        }
      },
      "orderIdPath": {
        "name": "orderId",
        "in": "path",
        "description": "unique id of the order",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "bankAccountIdPath": {
        "name": "bankAccountId",
        "in": "path",
        "description": "unique id of the bank account",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "parameters-plenigoOfferIdQuery": {
        "name": "plenigoOfferId",
        "in": "query",
        "description": "plenigo offer id of the offer",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "sortTreeLeafIdQuery": {
        "name": "leafId",
        "in": "query",
        "description": "unique id of the sort tree leaf",
        "required": false,
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "customerIdQuery": {
        "name": "customerId",
        "in": "query",
        "description": "unique id of the customer",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "parameters-statusQuery": {
        "name": "status",
        "in": "query",
        "description": "status of the refund",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "CLOSED",
            "IGNORED",
            "OPEN",
            "PROCESSING",
            "REJECTED"
          ]
        }
      },
      "subscriptionIdPath": {
        "name": "subscriptionId",
        "in": "path",
        "description": "unique id of the subscription",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "chainIdPath": {
        "name": "chainId",
        "in": "path",
        "description": "unique id of the subscription chain",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "plenigoTransactionIdQuery": {
        "name": "plenigoTransactionId",
        "in": "query",
        "description": "plenigo transaction id",
        "schema": {
          "type": "string"
        }
      },
      "pspTransactionIdQuery": {
        "name": "pspTransactionId",
        "in": "query",
        "description": "PSP transaction id",
        "schema": {
          "type": "string"
        }
      },
      "voucherStatusQuery": {
        "name": "voucherStatus",
        "in": "query",
        "description": "status of the voucher",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "ACTIVE",
            "CANCELLED",
            "INACTIVE",
            "DELETED"
          ]
        }
      },
      "voucherCodeQuery": {
        "name": "voucherCode",
        "in": "query",
        "description": "voucher code to get",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "callbackQuery": {
        "name": "callback",
        "in": "query",
        "description": "if set to true the call to this endpoint will return a promise ID and creates a new voucher request callback that contains the data provided. The callback also returns the promise ID returned by this call to be identified.",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "channelIdPath": {
        "name": "channelId",
        "in": "path",
        "description": "unique id of the channel",
        "required": true,
        "schema": {
          "type": "string"
        }
      }
    },
    "schemas": {
      "ApiSearchResultBase": {
        "type": "object",
        "properties": {
          "endingBeforeId": {
            "description": "A cursor for use in pagination. endingBefore is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include endingBefore=obj_bar in order to fetch the previous page of the list.",
            "type": "string",
            "maxLength": 100
          },
          "startingAfterId": {
            "description": "A cursor for use in pagination. startingAfter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include startingAfter=obj_foo in order to fetch the next result set.",
            "type": "string",
            "maxLength": 100
          }
        }
      },
      "ApiBaseDate": {
        "type": "object",
        "properties": {
          "createdDate": {
            "description": "time the object was created with time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 17:32:28",
            "type": [
              "string",
              "null"
            ],
            "format": "date-time"
          },
          "changedDate": {
            "description": "time the object was changed with time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 17:32:28",
            "type": [
              "string",
              "null"
            ],
            "format": "date-time"
          }
        }
      },
      "UserType": {
        "type": "string",
        "description": "type of user who performs the action",
        "enum": [
          "API",
          "CUSTOMER",
          "MERCHANT",
          "IMPORTER",
          "SYSTEM"
        ]
      },
      "ApiBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBaseDate"
          },
          {
            "type": "object",
            "properties": {
              "createdBy": {
                "description": "id who created the object",
                "type": "string",
                "maxLength": 100
              },
              "createdByType": {
                "$ref": "#/components/schemas/UserType"
              },
              "changedBy": {
                "description": "id who changed the object",
                "type": "string",
                "maxLength": 100
              },
              "changedByType": {
                "$ref": "#/components/schemas/UserType"
              }
            }
          }
        ]
      },
      "AccessRightItemData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBase"
          },
          {
            "type": "object",
            "properties": {
              "lifeTimeStart": {
                "description": "date the access right will start with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
                "type": [
                  "string",
                  "null"
                ],
                "format": "date-time"
              },
              "lifeTimeEnd": {
                "description": "date the access right will end with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
                "type": [
                  "string",
                  "null"
                ],
                "format": "date-time"
              },
              "accessTimeStart": {
                "description": "time the access right will start with time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 17:32:28",
                "type": [
                  "string",
                  "null"
                ],
                "format": "date-time"
              },
              "accessTimeEnd": {
                "description": "time the access right will end with time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 17:32:28",
                "type": [
                  "string",
                  "null"
                ],
                "format": "date-time"
              },
              "maxCacheDate": {
                "description": "max cache date with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
                "type": [
                  "string",
                  "null"
                ],
                "format": "date-time"
              },
              "data": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "blocked": {
                "description": "flag indicating if access is blocked",
                "type": "boolean"
              },
              "productId": {
                "description": "id of the product bought",
                "type": "string",
                "maxLength": 100
              },
              "plenigoOfferId": {
                "description": "if the product is based on a plenigo offer the plenigo offer id is provided here",
                "type": "string",
                "minLength": 20,
                "maxLength": 20
              },
              "plenigoProductId": {
                "description": "if the product is based on a plenigo offer the plenigo product id is provided here - can be identically to the productId",
                "type": "string",
                "minLength": 20,
                "maxLength": 20
              },
              "plenigoStepId": {
                "description": "if the product is based on a plenigo offer the plenigo step id is provided here",
                "type": "string",
                "minLength": 20,
                "maxLength": 20
              },
              "accessRightUniqueId": {
                "description": "unique id of the access right this access right grants access to",
                "type": "string",
                "pattern": "^[0-9\\-a-zA-Z]{2,30}$"
              },
              "itemType": {
                "description": "type of this access right item",
                "type": "string"
              },
              "itemId": {
                "description": "the id this access right belongs to",
                "type": "string",
                "maxLength": 30
              },
              "accessRightData": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string",
                    "maxLength": 30
                  },
                  "value": {
                    "type": "string",
                    "maxLength": 200
                  }
                }
              }
            }
          }
        ]
      },
      "AccessRightData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBase"
          },
          {
            "type": "object",
            "properties": {
              "customerId": {
                "description": "unique id of the customer the access right belongs to",
                "type": "string",
                "pattern": "^[0-9]{1,18}$"
              },
              "customerBlocked": {
                "description": "flag indicating if customer is blocked completely",
                "type": "boolean"
              },
              "items": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AccessRightItemData"
                }
              }
            }
          }
        ]
      },
      "AccessRightsData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiSearchResultBase"
          },
          {
            "type": "object",
            "properties": {
              "items": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AccessRightData"
                }
              }
            }
          }
        ]
      },
      "ErrorResultBase": {
        "type": "object",
        "properties": {
          "errorCode": {
            "description": "plenigo error code",
            "type": "integer",
            "format": "int32"
          },
          "errorMessage": {
            "description": "plenigo error description",
            "type": "string"
          }
        },
        "required": [
          "errorCode",
          "errorMessage"
        ]
      },
      "ValidationError": {
        "type": "object",
        "properties": {
          "field": {
            "description": "field name with the error",
            "type": "string"
          },
          "error": {
            "description": "error description",
            "type": "string"
          },
          "value": {
            "description": "value of the field",
            "type": "string"
          }
        },
        "required": [
          "field",
          "error",
          "value"
        ]
      },
      "ErrorResult": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorResultBase"
          },
          {
            "type": "object",
            "properties": {
              "validationErrors": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            },
            "required": [
              "errorCode",
              "errorMessage"
            ]
          }
        ]
      },
      "SuccessStatus": {
        "type": "object",
        "properties": {
          "success": {
            "description": "success status",
            "type": "boolean"
          },
          "promiseId": {
            "description": "in case of long running calls it contains the id that identifies the corresponding callback that contains the result",
            "type": "string"
          }
        }
      },
      "AddressBase": {
        "type": "object",
        "properties": {
          "businessAddress": {
            "description": "flag indicating if address represents a private or a business address",
            "type": "boolean"
          },
          "salutation": {
            "description": "salutation to identify the correct designation of a customer",
            "type": "string",
            "enum": [
              "DIVERSE",
              "MR",
              "MRS",
              "NONE"
            ]
          },
          "title": {
            "description": "title of the customer",
            "type": "string",
            "maxLength": 100
          },
          "firstName": {
            "description": "first name of the customer - first name and last name or company name are required",
            "type": "string",
            "maxLength": 100
          },
          "lastName": {
            "description": "last name of the customer - first name and last name or company name are required",
            "type": "string",
            "maxLength": 100
          },
          "companyName": {
            "description": "company name - first name and last name or company name are required",
            "type": "string",
            "maxLength": 100
          },
          "additionalCompanyInfo": {
            "description": "additional information belonging to the company",
            "type": "string",
            "maxLength": 100
          },
          "street": {
            "description": "street name",
            "type": "string",
            "maxLength": 100
          },
          "streetNumber": {
            "description": "street number",
            "type": "string",
            "maxLength": 100
          },
          "additionalStreetInfo": {
            "description": "additional information describing address",
            "type": "string",
            "maxLength": 100
          },
          "postbox": {
            "description": "postbox id",
            "type": "string",
            "maxLength": 100
          },
          "postcode": {
            "description": "postcode",
            "type": "string",
            "maxLength": 100
          },
          "city": {
            "description": "city",
            "type": "string",
            "maxLength": 100
          },
          "state": {
            "description": "state",
            "type": "string",
            "maxLength": 2
          },
          "country": {
            "description": "country code formatted as <a href=\"https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\" target=\"_blank\">ISO 3166-1 alpha-2</a>",
            "type": "string",
            "minLength": 2,
            "maxLength": 2
          },
          "vatNumber": {
            "description": "VAT number of a member country of the European Union",
            "type": "string",
            "maxLength": 20
          },
          "phoneNumber": {
            "description": "phone number of the customer formatted as <a href=\"https://en.wikipedia.org/wiki/E.164\" target=\"_blank\">E.164</a>",
            "type": "string",
            "pattern": "^\\+?[1-9]\\d{1,14}$",
            "maxLength": 100
          },
          "deliveryInformation": {
            "description": "delivery information",
            "type": "string",
            "maxLength": 100
          },
          "academicTitle": {
            "description": "academic title",
            "type": "string",
            "maxLength": 100
          },
          "jobPosition": {
            "description": "job position",
            "type": "string",
            "maxLength": 100
          },
          "validationStatus": {
            "description": "validation status of the address",
            "type": "string",
            "enum": [
              "NONE",
              "VALID",
              "INVALID",
              "SUSPECT",
              "OVERRIDDEN"
            ]
          },
          "validationHash": {
            "description": "validation hash of a valid address",
            "type": "string"
          }
        }
      },
      "AddressChange": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AddressBase"
          },
          {
            "type": "object",
            "properties": {
              "preferred": {
                "description": "flag indicating if address is default selection for address type",
                "type": "boolean"
              }
            }
          }
        ]
      },
      "AppleAppStoreReceiptItem": {
        "type": "object",
        "properties": {
          "quantity": {
            "description": "number of items purchased",
            "type": "string"
          },
          "productId": {
            "description": "product identifier of the item that was purchased",
            "type": "string"
          },
          "transactionId": {
            "description": "transaction identifier of the item that was purchased",
            "type": "string"
          },
          "originalTransactionId": {
            "description": "for a transaction that restores a previous transaction, the transaction identifier of the original transaction - otherwise, identical to the transaction identifier",
            "type": "string"
          },
          "webOrderLineItemId": {
            "description": "primary key for identifying subscription purchases",
            "type": "string"
          },
          "promotionalOfferId": {
            "description": "id of the promotional offer",
            "type": "string"
          },
          "subscriptionGroupIdentifier": {
            "description": "identifier for the subscription group",
            "type": "string"
          },
          "isTrialPeriod": {
            "description": "value for this key is \"true\" if the customer\u2019s subscription is currently in the free trial period, or \"false\" if not",
            "type": "string"
          },
          "isInIntroOfferPeriod": {
            "description": "value for this key is \"true\" if the customer\u2019s subscription is currently in an introductory price period, or \"false\" if not.",
            "type": "string"
          },
          "isUpgraded": {
            "description": "flag indicating if item is an upgrade of another item",
            "type": "string"
          },
          "expiresDate": {
            "description": "expiration date for the subscription with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "string",
              "null"
            ],
            "format": "date-time"
          },
          "purchaseDate": {
            "description": "date and time that the item was purchased with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "string",
              "null"
            ],
            "format": "date-time"
          },
          "originalPurchaseDate": {
            "description": "for a transaction that restores a previous transaction, the date of the original transaction with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "string",
              "null"
            ],
            "format": "date-time"
          },
          "cancellationDate": {
            "description": "for a transaction that was canceled by Apple customer support, the time and date of the cancellation - for an auto-renewable subscription plan that was upgraded, the time and date of the upgrade transaction with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "string",
              "null"
            ],
            "format": "date-time"
          },
          "cancellationReason": {
            "description": "for a transaction that was canceled, the reason for cancellation",
            "type": "string"
          }
        }
      },
      "AppleAppStoreReceipt": {
        "type": "object",
        "properties": {
          "receiptType": {
            "description": "type of receipt generated (e.g. Production, ProductionVPP, ProductionSandbox, ProductionVPPSandbox)",
            "type": "string"
          },
          "adamID": {
            "description": "generated by App Store Connect and used by the App Store to uniquely identify the app purchased",
            "type": "integer",
            "format": "int64"
          },
          "appItemID": {
            "description": "generated by App Store Connect and used by the App Store to uniquely identify the app purchased",
            "type": "string"
          },
          "bundleID": {
            "description": "bundle identifier for the app to which the receipt belongs",
            "type": "string"
          },
          "applicationVersion": {
            "description": "app\u2019s version number",
            "type": "string"
          },
          "downloadID": {
            "description": "unique identifier for the app download transaction",
            "type": "integer",
            "format": "int64"
          },
          "versionExternalIdentifier": {
            "description": "arbitrary number that identifies a revision of your app",
            "type": "string"
          },
          "originalApplicationVersion": {
            "description": "version of the app that the user originally purchased",
            "type": "string"
          },
          "receiptCreationDate": {
            "description": "time the App Store generated the receipt, in the Pacific Time zone",
            "type": [
              "string",
              "null"
            ],
            "format": "date-time"
          },
          "requestDate": {
            "description": "time the request to the verifyReceipt endpoint was processed and the response was generated",
            "type": [
              "string",
              "null"
            ],
            "format": "date-time"
          },
          "originalPurchaseDate": {
            "description": "time of the original app purchase, in the Pacific Time zone",
            "type": [
              "string",
              "null"
            ],
            "format": "date-time"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AppleAppStoreReceiptItem"
            }
          }
        }
      },
      "AppleAppStoreTransaction": {
        "type": "object",
        "properties": {
          "transactionID": {
            "type": "string"
          },
          "originalTransactionId": {
            "type": "string"
          },
          "webOrderLineItemId": {
            "type": "string"
          },
          "bundleID": {
            "type": "string"
          },
          "productID": {
            "type": "string"
          },
          "subscriptionGroupIdentifier": {
            "type": "string"
          },
          "purchaseDate": {
            "type": "integer",
            "format": "int64"
          },
          "originalPurchaseDate": {
            "type": "integer",
            "format": "int64"
          },
          "expiresDate": {
            "type": "integer",
            "format": "int64"
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string"
          },
          "appAccountToken": {
            "type": "string"
          },
          "inAppOwnershipType": {
            "type": "string"
          },
          "signedDate": {
            "type": "integer",
            "format": "int64"
          },
          "offerType": {
            "type": "integer",
            "format": "int32"
          },
          "offerIdentifier": {
            "type": "string"
          },
          "revocationDate": {
            "type": "integer",
            "format": "int64"
          },
          "revocationReason": {
            "type": "integer",
            "format": "int32"
          },
          "isUpgraded": {
            "type": "boolean"
          },
          "storefront": {
            "type": "string"
          },
          "storefrontId": {
            "type": "string"
          },
          "transactionReason": {
            "type": "string"
          },
          "environment": {
            "type": "string"
          },
          "price": {
            "type": "integer",
            "format": "int64"
          },
          "currency": {
            "type": "string"
          },
          "offerDiscountType": {
            "type": "string"
          }
        }
      },
      "AppleAppStorePurchaseData": {
        "type": "object",
        "properties": {
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AppleAppStoreTransaction"
            }
          }
        }
      },
      "AppleAppStorePurchase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBase"
          },
          {
            "type": "object",
            "properties": {
              "appleAppStorePurchaseId": {
                "description": "unique id of the purchase",
                "type": "integer",
                "format": "int64"
              },
              "purchaseDate": {
                "description": "date of the purchase",
                "type": [
                  "string",
                  "null"
                ],
                "format": "date-time"
              },
              "token": {
                "description": "token for the purchase",
                "type": "string"
              },
              "valid": {
                "description": "flag indicating if purchase is valid",
                "type": "boolean"
              },
              "appStoreOrderId": {
                "description": "id of the app store order if mapped",
                "type": "integer",
                "format": "int64"
              },
              "receipt": {
                "$ref": "#/components/schemas/AppleAppStoreReceipt"
              },
              "purchaseData": {
                "$ref": "#/components/schemas/AppleAppStorePurchaseData"
              }
            }
          }
        ]
      },
      "AppleAppStorePurchases": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AppleAppStorePurchase"
            }
          }
        }
      },
      "AppleAppStorePurchaseAddition": {
        "type": "object",
        "properties": {
          "appIdentifier": {
            "description": "identifier of the application as defined in the plenigo backend to retrieve the according secret",
            "type": "string",
            "maxLength": 100
          },
          "receiptData": {
            "type": "array",
            "minItems": 1,
            "maxItems": 100,
            "items": {
              "description": "receipt data identifying the purchase",
              "type": "string",
              "maxLength": 10000
            }
          }
        }
      },
      "AppStoreAccessRight": {
        "type": "object",
        "properties": {
          "uniqueId": {
            "description": "access right unique id that will be associated with this app store purchase after association",
            "type": "string",
            "maxLength": 100
          },
          "additionalData": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "maxLength": 30
                },
                "value": {
                  "type": "string",
                  "maxLength": 200
                }
              }
            }
          }
        }
      },
      "AppStoreAccessRights": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AppStoreAccessRight"
            }
          }
        }
      },
      "AppStorePurchaseDetail": {
        "type": "object",
        "properties": {
          "purchaseDate": {
            "description": "date the product was purchased with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "string",
              "null"
            ],
            "format": "date-time"
          },
          "valid": {
            "description": "flag indicating purchase is still valid",
            "type": "boolean"
          },
          "accessRightUniqueId": {
            "description": "access right unique id that will be associated with this app store purchase after association",
            "type": "string",
            "maxLength": 100
          },
          "appStoreProductId": {
            "description": "id of the product as set in the app store",
            "type": "string",
            "maxLength": 100
          },
          "accessRights": {
            "$ref": "#/components/schemas/AppStoreAccessRights"
          }
        }
      },
      "AppStorePurchase": {
        "type": "object",
        "properties": {
          "customerId": {
            "description": "id of the customer purchase is associated with - only set if purchase is already associated",
            "type": "string",
            "pattern": "^[0-9]{1,18}$"
          },
          "token": {
            "description": "token that uniquely identifies this purchase and is used for further API requests",
            "type": "string",
            "maxLength": 100
          },
          "hasOrders": {
            "description": "flag indicating if purchase has orders",
            "type": "boolean"
          },
          "orders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AppStorePurchaseDetail"
            }
          }
        }
      },
      "AppStorePurchaseList": {
        "type": "object",
        "properties": {
          "purchases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AppStorePurchase"
            }
          }
        }
      },
      "GooglePlaySubscriptionPurchase": {
        "type": "object",
        "properties": {
          "autoRenewing": {
            "description": "whether the subscription will automatically be renewed when it reaches its current expiry time",
            "type": "boolean"
          },
          "autoResumeTimeMillis": {
            "description": "time at which the subscription will be automatically resumed, in milliseconds since the Epoch - only present if the user has requested to pause the subscription",
            "type": "string"
          },
          "cancelReason": {
            "description": "the reason why a subscription was canceled or is not auto-renewing",
            "type": "integer",
            "format": "int64"
          },
          "cancelSurveyReason": {
            "description": "information provided by the user when they complete the subscription cancellation flow (cancellation reason survey)",
            "type": "integer",
            "format": "int64"
          },
          "userInputCancelReason": {
            "description": "customized input cancel reason from the user. Only present when cancelReason is 0",
            "type": "string"
          },
          "subscriptionEndDate": {
            "description": "date time the purchase was done with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "string",
              "null"
            ],
            "format": "date-time"
          },
          "countryCode": {
            "description": "ISO 3166-1 alpha-2 billing country/region code of the user at the time the subscription was granted",
            "type": "string"
          },
          "developerPayload": {
            "description": "developer-specified string that contains supplemental information about an order",
            "type": "string"
          },
          "expiryTimeMillis": {
            "description": "time at which the subscription will expire, in milliseconds since the Epoch",
            "type": "string"
          },
          "kind": {
            "description": "kind represents a subscriptionPurchase object in the androidpublisher service",
            "type": "string"
          },
          "linkedPurchaseToken": {
            "description": "purchase token of the originating purchase if this subscription is one of the following - 0. Re-signup of a canceled but non-lapsed subscription 1. Upgrade/downgrade from a previous subscription",
            "type": "string"
          },
          "orderId": {
            "description": "order id of the latest recurring order associated with the purchase of the subscription",
            "type": "string"
          },
          "paymentState": {
            "description": "payment state of the subscription",
            "type": "integer",
            "format": "int64"
          },
          "priceAmountMicros": {
            "description": "price of the subscription, not including tax",
            "type": "string"
          },
          "priceCurrencyCode": {
            "description": "ISO 4217 currency code for the subscription price",
            "type": "string"
          },
          "profileId": {
            "description": "Google profile id of the user when the subscription was purchased",
            "type": "string"
          },
          "profileName": {
            "description": "profile name of the user when the subscription was purchased",
            "type": "string"
          },
          "purchaseType": {
            "description": "type of purchase of the subscription - this field is only set if this purchase was not made using the standard in-app billing flow",
            "type": "integer",
            "format": "int64"
          },
          "startTimeMillis": {
            "description": "time at which the subscription was granted, in milliseconds since the Epoch",
            "type": "string"
          },
          "userCancellationTimeMillis": {
            "description": "time at which the subscription was canceled by the user, in milliseconds since the epoch",
            "type": "string"
          }
        }
      },
      "GooglePlayProductPurchase": {
        "type": "object",
        "properties": {
          "acknowledgementState": {
            "description": "acknowledgement state of the inapp product",
            "type": "string"
          },
          "consumptionState": {
            "description": "consumption state of the inapp product",
            "type": "string"
          },
          "developerPayload": {
            "description": "developer-specified string that contains supplemental information about an order",
            "type": "string"
          },
          "kind": {
            "description": "kind represents a subscriptionPurchase object in the androidpublisher service",
            "type": "string"
          },
          "orderId": {
            "description": "order id associated with the purchase of the inapp product",
            "type": "string"
          },
          "purchaseState": {
            "description": "purchase state of the order",
            "type": "string"
          },
          "purchaseTimeMillis": {
            "description": "time the product was purchased, in milliseconds since the epoch (Jan 1, 1970)",
            "type": "string"
          },
          "purchaseType": {
            "description": "type of purchase of the inapp product",
            "type": "string"
          }
        }
      },
      "GooglePlayStorePurchase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBase"
          },
          {
            "type": "object",
            "properties": {
              "googlePlayStorePurchaseId": {
                "description": "unique id of the purchase",
                "type": "integer",
                "format": "int64"
              },
              "purchaseDate": {
                "description": "date time the purchase was done with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
                "type": [
                  "string",
                  "null"
                ],
                "format": "date-time"
              },
              "token": {
                "description": "token for the purchase",
                "type": "string"
              },
              "packageName": {
                "description": "package name of the application the inapp product was sold in",
                "type": "string"
              },
              "productId": {
                "description": "inapp product SKU (for example, 'com.some.thing.inapp1')",
                "type": "string"
              },
              "valid": {
                "description": "flag indicating if purchase is valid",
                "type": "boolean"
              },
              "subscription": {
                "description": "flag indicating if purchase represents a subscription",
                "type": "boolean"
              },
              "purchaseToken": {
                "description": "token provided to the user's device when the inapp product was purchased",
                "type": "string"
              },
              "appStoreOrderId": {
                "description": "id of the app store order if mapped",
                "type": "integer",
                "format": "int64"
              },
              "subscriptionPurchase": {
                "$ref": "#/components/schemas/GooglePlaySubscriptionPurchase"
              },
              "productPurchase": {
                "$ref": "#/components/schemas/GooglePlayProductPurchase"
              }
            }
          }
        ]
      },
      "GooglePlayStorePurchases": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GooglePlayStorePurchase"
            }
          }
        }
      },
      "GooglePlayStorePurchaseAdditionElement": {
        "type": "object",
        "properties": {
          "productId": {
            "description": "the purchased ID (for example, 'monthly001').",
            "type": "string",
            "maxLength": 500
          },
          "subscription": {
            "description": "flag indicating if purchase is a subscription or a single product purchase",
            "type": "boolean"
          },
          "purchaseToken": {
            "description": "token provided to the customer's device when the purchase was done",
            "type": "string",
            "maxLength": 10000
          }
        }
      },
      "GooglePlayStorePurchaseAddition": {
        "type": "object",
        "properties": {
          "packageName": {
            "description": "package name of the application this purchase was done for (for example, 'com.some.thing').",
            "type": "string",
            "maxLength": 1000
          },
          "receiptData": {
            "type": "array",
            "minItems": 1,
            "maxItems": 100,
            "items": {
              "$ref": "#/components/schemas/GooglePlayStorePurchaseAdditionElement"
            }
          }
        }
      },
      "AppStoreOrderItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBaseDate"
          },
          {
            "type": "object",
            "properties": {
              "position": {
                "description": "position of the app store order item inside the app store order - creates a unique app store order item id in combination with the appStoreOrderId",
                "type": "integer",
                "format": "int32"
              },
              "deliveryCustomerId": {
                "description": "id of the customer the delivery belongs to (also includes digital products)",
                "type": "string"
              },
              "productId": {
                "description": "product id",
                "type": "string"
              },
              "appStoreSubscriptionId": {
                "description": "unique identifier for the app store subscription that is associated with this item",
                "type": "integer",
                "format": "int64"
              },
              "accessRightUniqueId": {
                "description": "unique id of the access right this order item grants access to",
                "type": "string",
                "pattern": "^[0-9\\-a-zA-Z]{2,30}$"
              },
              "additionalStoreItemData": {
                "description": "contains the app receipt data",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/AppleAppStoreReceiptItem"
                  },
                  {
                    "$ref": "#/components/schemas/GooglePlaySubscriptionPurchase"
                  },
                  {
                    "$ref": "#/components/schemas/GooglePlayProductPurchase"
                  }
                ]
              }
            }
          }
        ]
      },
      "AppStoreOrder": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBase"
          },
          {
            "type": "object",
            "properties": {
              "appStoreOrderId": {
                "description": "unique identifier for the app store order",
                "type": "integer",
                "format": "int64"
              },
              "orderDate": {
                "description": "date time the order was created with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
                "type": [
                  "string",
                  "null"
                ],
                "format": "date-time"
              },
              "customerId": {
                "description": "id of the customer the order belongs to",
                "type": "string"
              },
              "storeType": {
                "description": "type of store",
                "type": "string",
                "enum": [
                  "APPSTORE",
                  "PLAYSTORE"
                ]
              },
              "additionalStoreData": {
                "description": "additional data of the app store",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/AppleAppStoreReceipt"
                  },
                  {
                    "$ref": "#/components/schemas/GooglePlaySubscriptionPurchase"
                  },
                  {
                    "$ref": "#/components/schemas/GooglePlayProductPurchase"
                  }
                ]
              },
              "items": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AppStoreOrderItem"
                }
              }
            }
          }
        ]
      },
      "AppStoreOrders": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AppStoreOrder"
            }
          }
        }
      },
      "Utm": {
        "type": "object",
        "properties": {
          "source": {
            "description": "identify the source of the traffic",
            "type": "string",
            "maxLength": 100
          },
          "medium": {
            "description": "identify the medium the link was used on",
            "type": "string",
            "maxLength": 100
          },
          "campaign": {
            "description": "identify a strategic campaign (e.g. product launch, new feature, partnership, etc.) or specific promotion (e.g. a sale, a giveaway, etc.)",
            "type": "string",
            "maxLength": 100
          },
          "term": {
            "description": "suggested for paid search to identify keywords for your ad",
            "type": "string",
            "maxLength": 100
          },
          "content": {
            "description": "suggested for additional details for A/B testing and content-targeted ads",
            "type": "string",
            "maxLength": 100
          }
        }
      },
      "AdditionalOrderData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBaseDate"
          },
          {
            "type": "object",
            "properties": {
              "affiliateId": {
                "description": "affiliate id associated",
                "type": "string",
                "maxLength": 100
              },
              "partnerId": {
                "description": "id of the partner",
                "type": "string",
                "maxLength": 100
              },
              "sourceId": {
                "description": "id (e.g. URI) to identify source",
                "type": "string",
                "maxLength": 500
              },
              "utm": {
                "$ref": "#/components/schemas/Utm"
              },
              "data": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "key": {
                      "type": "string",
                      "maxLength": 30
                    },
                    "value": {
                      "type": "string",
                      "maxLength": 200
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "CustomerMiscellaneousData": {
        "type": "object",
        "properties": {
          "leitwegId": {
            "description": "leitweg id used for xml invoices",
            "type": "string",
            "maxLength": 50
          }
        }
      },
      "CustomerBase": {
        "type": "object",
        "properties": {
          "username": {
            "description": "selected username of the customer that is unique for all users",
            "type": "string",
            "maxLength": 100
          },
          "email": {
            "description": "email address of the customer that is unique for all users",
            "type": "string",
            "format": "email",
            "maxLength": 100
          },
          "externalSystemId": {
            "description": "external system id - can only be set if not set yet",
            "type": "string",
            "maxLength": 100
          },
          "salutation": {
            "description": "salutation to identify the correct designation of a customer",
            "type": "string",
            "enum": [
              "DIVERSE",
              "MR",
              "MRS",
              "NONE"
            ]
          },
          "firstName": {
            "description": "first name of the customer - first name and last name or company name are required",
            "type": "string",
            "maxLength": 100
          },
          "lastName": {
            "description": "last name of the customer - first name and last name or company name are required",
            "type": "string",
            "maxLength": 100
          },
          "invoiceEmail": {
            "description": "email address of the customer where invoices should be sent to",
            "type": "string",
            "format": "email",
            "maxLength": 100
          },
          "language": {
            "description": "language of the customer - two letter language code according to <a href=\"https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes\" target=\"_blank\">ISO 639-1</a>",
            "type": "string",
            "minLength": 2,
            "maxLength": 2
          },
          "mobileNumber": {
            "description": "mobile number of the customer formatted as <a href=\"https://en.wikipedia.org/wiki/E.164\" target=\"_blank\">E.164</a>",
            "type": "string",
            "pattern": "(^\\+?[1-9]\\d{1,14}$|^$)",
            "maxLength": 100
          },
          "birthday": {
            "description": "birthday of the customer with full-date notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-01",
            "type": [
              "string",
              "null"
            ],
            "format": "date"
          },
          "miscellaneousData": {
            "$ref": "#/components/schemas/CustomerMiscellaneousData"
          }
        }
      },
      "CustomerAcceptedTerm": {
        "type": "object",
        "properties": {
          "termId": {
            "description": "technical id of the term for relation to the merchant backend term id",
            "type": "integer",
            "format": "int64"
          },
          "uniqueId": {
            "description": "unique id of the last active term",
            "type": "string",
            "maxLength": 100
          },
          "acceptanceDate": {
            "description": "date time the term was accepted with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "string",
              "null"
            ],
            "format": "date-time"
          }
        }
      },
      "Customer": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CustomerBase"
          },
          {
            "$ref": "#/components/schemas/ApiBase"
          },
          {
            "type": "object",
            "properties": {
              "customerId": {
                "description": "unique id of the customer",
                "type": "string",
                "pattern": "^[0-9]{1,18}$"
              },
              "registrationSource": {
                "description": "source the user registration was started from",
                "type": "string",
                "maxLength": 100
              },
              "registrationDate": {
                "description": "date the customer was registered with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
                "type": [
                  "string",
                  "null"
                ],
                "format": "date-time"
              },
              "ageVerificationPinEnabled": {
                "description": "flag indicating that age verification pin is set",
                "type": "boolean"
              },
              "status": {
                "description": "status of the customer\n\n| Status      | Description                                                                                                                                               |\n| ----------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------|\n| ACTIVATED   | customer is active and can log in and use full functionality                                                                                              |\n| BLOCKED     | customer is blocked and needs to reset his password to be able to log in again                                                                            |\n| DEACTIVATED | customer is deactivated and cannot log in - the customer cannot change this state by himself and a log in attempt is handled like a false password log in |\n| DISABLED    | customer is disabled by plenigo and cannot be used anymore - please contact plenigo for further information (this status is currently not actively used)  |\n",
                "type": "string",
                "enum": [
                  "ACTIVATED",
                  "BLOCKED",
                  "DEACTIVATED",
                  "DISABLED"
                ]
              },
              "acceptedTerms": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "key": {
                      "type": "string",
                      "minLength": 20,
                      "maxLength": 20,
                      "description": "id of the company opt in was accepted for"
                    },
                    "value": {
                      "$ref": "#/components/schemas/CustomerAcceptedTerm"
                    }
                  }
                }
              },
              "ssoLoginProviders": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "GOOGLE"
                  ]
                }
              },
              "customerMarks": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "WBZ"
                  ]
                }
              }
            },
            "required": [
              "customerId"
            ]
          }
        ]
      },
      "Customers": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Customer"
            }
          }
        }
      },
      "CustomerChange": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CustomerBase"
          },
          {
            "type": "object",
            "properties": {
              "pseudoEmail": {
                "description": "flag indicating that email should be a pseudo email",
                "type": "boolean"
              },
              "password": {
                "description": "new password of the user - if left empty the old password will be kept",
                "type": "string",
                "maxLength": 100
              },
              "processingBlocked": {
                "description": "Flag to indicate to third party systems that the customer is blocked for further processing and should not be used for advertisement, etc. Can be used in combination with the pseudoEmail flag to handle data protection requests without deletion of a customer.",
                "type": "boolean"
              }
            }
          }
        ]
      },
      "CustomerAddressCreation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AddressChange"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "description": "address type",
                "type": "string",
                "enum": [
                  "INVOICE",
                  "DELIVERY"
                ]
              }
            },
            "required": [
              "type"
            ]
          }
        ]
      },
      "AdditionalCustomerData": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "maxLength": 30
                },
                "value": {
                  "type": "string",
                  "maxLength": 200
                }
              }
            }
          }
        }
      },
      "CustomerCreation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CustomerChange"
          },
          {
            "type": "object",
            "properties": {
              "customerId": {
                "description": "unique id of the customer",
                "type": "string",
                "pattern": "^[0-9]{1,18}$"
              },
              "registrationSource": {
                "description": "domain, website, app or other source of the customer registration",
                "type": "string",
                "maxLength": 100
              },
              "password": {
                "description": "password the new customer should get",
                "type": "string",
                "maxLength": 100
              },
              "sendWelcomeMail": {
                "description": "flag indicating if welcome mail for customer should be sent",
                "type": "boolean"
              },
              "addresses": {
                "description": "addresses that should be directly associated with the customer",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CustomerAddressCreation"
                }
              },
              "data": {
                "$ref": "#/components/schemas/AdditionalCustomerData"
              }
            },
            "required": [
              "email",
              "language"
            ]
          }
        ]
      },
      "InvoiceAddress": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBaseDate"
          },
          {
            "type": "object",
            "properties": {
              "businessAddress": {
                "description": "flag indicating if address represents a private or a business address",
                "type": "boolean"
              },
              "salutation": {
                "description": "salutation to identify the correct designation of a customer",
                "type": "string",
                "enum": [
                  "DIVERSE",
                  "MR",
                  "MRS",
                  "NONE"
                ]
              },
              "title": {
                "description": "title of the customer",
                "type": "string",
                "maxLength": 100
              },
              "firstName": {
                "description": "first name of the customer - first name and last name or company name are required",
                "type": "string",
                "maxLength": 100
              },
              "lastName": {
                "description": "last name of the customer - first name and last name or company name are required",
                "type": "string",
                "maxLength": 100
              },
              "companyName": {
                "description": "company name - first name and last name or company name are required",
                "type": "string",
                "maxLength": 100
              },
              "additionalCompanyInfo": {
                "description": "additional information belonging to the company",
                "type": "string",
                "maxLength": 100
              },
              "street": {
                "description": "street name",
                "type": "string",
                "maxLength": 100
              },
              "streetNumber": {
                "description": "street number",
                "type": "string",
                "maxLength": 100
              },
              "additionalStreetInfo": {
                "description": "additional information describing address",
                "type": "string",
                "maxLength": 100
              },
              "postbox": {
                "description": "postbox id",
                "type": "string",
                "maxLength": 100
              },
              "postcode": {
                "description": "post code",
                "type": "string",
                "maxLength": 100
              },
              "city": {
                "description": "city",
                "type": "string",
                "maxLength": 100
              },
              "state": {
                "description": "state",
                "type": "string",
                "maxLength": 2
              },
              "country": {
                "description": "country code formatted as <a href=\"https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\" target=\"_blank\">ISO 3166-1 alpha-2</a>",
                "type": "string",
                "minLength": 2,
                "maxLength": 2
              },
              "vatNumber": {
                "description": "VAT number of a member country of the European Union",
                "type": "string",
                "maxLength": 20
              },
              "phoneNumber": {
                "description": "phone number of the customer formatted as <a href=\"https://en.wikipedia.org/wiki/E.164\" target=\"_blank\">E.164</a>",
                "type": "string",
                "pattern": "^\\+?[1-9]\\d{1,14}$",
                "maxLength": 100
              }
            }
          }
        ]
      },
      "InvoiceItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBaseDate"
          },
          {
            "type": "object",
            "properties": {
              "position": {
                "description": "position of the invoice item inside the invoice - creates a unique invoice item id in combination with the invoiceId",
                "type": "integer",
                "format": "int32"
              },
              "title": {
                "description": "title of the item",
                "type": "string",
                "maxLength": 200
              },
              "productId": {
                "description": "product id - will be identical with the plenigo product id if not overwritten during checkout",
                "type": "string",
                "maxLength": 100
              },
              "plenigoOfferId": {
                "description": "if the product is based on a plenigo offer the plenigo offer id is provided here",
                "type": "string",
                "minLength": 20,
                "maxLength": 20
              },
              "plenigoProductId": {
                "description": "if the product is based on a plenigo offer the plenigo product id is provided here",
                "type": "string",
                "maxLength": 100
              },
              "plenigoStepId": {
                "description": "if the product is based on a plenigo offer the plenigo step id is provided here",
                "type": "string",
                "minLength": 20,
                "maxLength": 20
              },
              "price": {
                "description": "price of the invoice item",
                "type": "number",
                "format": "double",
                "minimum": 0,
                "maximum": 100000
              },
              "tax": {
                "description": "tax percentage operated on this invoice item",
                "type": "number",
                "format": "double",
                "minimum": 0,
                "maximum": 100
              },
              "taxCountry": {
                "description": "country tax is based on formatted as <a href=\"https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\" target=\"_blank\">ISO 3166-1 alpha-2</a>",
                "type": "string",
                "minLength": 2,
                "maxLength": 2
              },
              "quantity": {
                "description": "purchase amount",
                "type": "integer",
                "format": "int32",
                "minimum": 1,
                "maximum": 10000
              },
              "costCenter": {
                "description": "cost center associated with this product at the time of invoice creation",
                "type": "string",
                "maxLength": 20
              },
              "purchaseNumber": {
                "description": "purchase number associated with this subscription item",
                "type": "string",
                "maxLength": 20
              },
              "deliveryCustomerId": {
                "description": "id of the customer the delivery belongs to (also includes digital products)",
                "type": "string",
                "maxLength": 100
              },
              "deliveryAddress": {
                "$ref": "#/components/schemas/InvoiceAddress"
              },
              "subscriptionItemId": {
                "description": "if invoice item represents a subscription the id of the subscription item is provided here",
                "type": "integer",
                "format": "int64"
              },
              "periodStartDate": {
                "description": "if invoice item represents a subscription the period start date is the start date of the invoice period",
                "type": [
                  "string",
                  "null"
                ],
                "format": "date-time"
              },
              "periodEndDate": {
                "description": "if invoice item represents a subscription the period end date is the end date of the invoice period",
                "type": [
                  "string",
                  "null"
                ],
                "format": "date-time"
              },
              "orderItemId": {
                "description": "if invoice item represents an order the id of the order item is provided here",
                "type": "integer",
                "format": "int64"
              },
              "discountPercentage": {
                "description": "discount offered to the invoice item",
                "type": "integer",
                "format": "int32",
                "minimum": 0,
                "maximum": 100
              }
            },
            "required": [
              "position",
              "title",
              "price",
              "tax",
              "taxCountry",
              "quantity",
              "deliveryCustomerId"
            ]
          }
        ]
      },
      "Invoice": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBase"
          },
          {
            "type": "object",
            "properties": {
              "invoiceId": {
                "description": "unique id of the invoice in the context of a company",
                "type": "integer",
                "format": "int64"
              },
              "invoiceDate": {
                "description": "invoice date time of the invoice with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
                "type": [
                  "string",
                  "null"
                ],
                "format": "date-time"
              },
              "customerEmail": {
                "description": "email used for sending invoice",
                "type": "string",
                "maxLength": 100
              },
              "accumulatedPrice": {
                "description": "accumulated price of the invoice",
                "type": "number",
                "format": "double"
              },
              "currency": {
                "description": "currency of the invoice formatted as <a href=\"https://en.wikipedia.org/wiki/ISO_4217\" target=\"_blank\">ISO 4217, alphabetic code</a>",
                "type": "string",
                "minLength": 3,
                "maxLength": 3
              },
              "paymentMethod": {
                "description": "payment method used to pay for the invoice",
                "type": "string",
                "enum": [
                  "AMAZON_PAY",
                  "APPLE_PAY",
                  "BANK_ACCOUNT",
                  "BILLING",
                  "CREDIT_CARD",
                  "GOOGLE_PAY",
                  "IDEAL",
                  "PAYPAL",
                  "POSTFINANCE",
                  "SOFORT",
                  "TWINT",
                  "ZERO"
                ]
              },
              "paymentMethodId": {
                "description": "id of the payment method that is associated with this invoice",
                "type": "integer",
                "format": "int64"
              },
              "purchaseOrderIndicator": {
                "description": "purchase invoice indicator if provided by the customer",
                "type": "string",
                "maxLength": 50
              },
              "invoiceCustomerId": {
                "description": "id of the customer the invoice belongs to",
                "type": "string",
                "maxLength": 100
              },
              "invoiceAddress": {
                "$ref": "#/components/schemas/InvoiceAddress"
              },
              "transactionId": {
                "description": "id of the related transaction if payment was not done via invoice",
                "type": "string"
              },
              "type": {
                "description": "type of the invoice",
                "type": "string",
                "enum": [
                  "CANCELLATION",
                  "CANCELLATION_CORRECTION",
                  "CORRECTION",
                  "INVOICE"
                ]
              },
              "status": {
                "description": "payment status of the invoice",
                "type": "string",
                "enum": [
                  "PAID",
                  "NOT_PAID"
                ]
              },
              "paymentChangedToBilling": {
                "description": "flag indicating if invoice was created because of a failed payment process",
                "type": "boolean"
              },
              "precursorId": {
                "description": "invoice id which was corrected or cancelled",
                "type": "integer",
                "format": "int64"
              },
              "successorId": {
                "description": "invoice id of the corrected invoice",
                "type": "integer",
                "format": "int64"
              },
              "invoiceCancellationId": {
                "description": "invoice id of the cancellation invoice",
                "type": "integer",
                "format": "int64"
              },
              "items": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/InvoiceItem"
                }
              }
            },
            "required": [
              "invoiceId",
              "invoiceDate",
              "accumulatedPrice",
              "currency",
              "paymentMethod",
              "invoiceCustomerId",
              "items"
            ]
          }
        ]
      },
      "Invoices": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Invoice"
            }
          }
        }
      },
      "PaymentMethodDetails": {
        "type": "object",
        "properties": {
          "brand": {
            "description": "optional brand of the payment method",
            "type": "string",
            "maxLength": 50
          },
          "issuer": {
            "description": "optional issuer of the payment method",
            "type": "string",
            "maxLength": 50
          }
        }
      },
      "GiftInfo": {
        "type": "object",
        "properties": {
          "notifyGiftee": {
            "description": "flag indicating if giftee should be notified about the gift",
            "type": "boolean"
          },
          "donorText": {
            "description": "personal text of the donor to the giftee",
            "type": "string",
            "maxLength": 350
          },
          "gifteeEmail": {
            "description": "email address of the giftee",
            "type": "string",
            "format": "email",
            "maxLength": 100
          }
        }
      },
      "OrderAddress": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBaseDate"
          },
          {
            "type": "object",
            "properties": {
              "businessAddress": {
                "description": "flag indicating if address represents a private or a business address",
                "type": "boolean"
              },
              "salutation": {
                "description": "salutation to identify the correct designation of a customer",
                "type": "string",
                "enum": [
                  "DIVERSE",
                  "MR",
                  "MRS",
                  "NONE"
                ]
              },
              "title": {
                "description": "title of the order",
                "type": "string",
                "maxLength": 100
              },
              "firstName": {
                "description": "first name of the customer - first name and last name or company name are required",
                "type": "string",
                "maxLength": 100
              },
              "lastName": {
                "description": "last name of the customer - first name and last name or company name are required",
                "type": "string",
                "maxLength": 100
              },
              "companyName": {
                "description": "company name - first name and last name or company name are required",
                "type": "string",
                "maxLength": 100
              },
              "additionalCompanyInfo": {
                "description": "additional information belonging to the company",
                "type": "string",
                "maxLength": 100
              },
              "street": {
                "description": "street name",
                "type": "string",
                "maxLength": 100
              },
              "streetNumber": {
                "description": "street number",
                "type": "string",
                "maxLength": 100
              },
              "additionalStreetInfo": {
                "description": "additional information describing address",
                "type": "string",
                "maxLength": 100
              },
              "postbox": {
                "description": "postbox id",
                "type": "string",
                "maxLength": 100
              },
              "postcode": {
                "description": "post code",
                "type": "string",
                "maxLength": 100
              },
              "city": {
                "description": "city",
                "type": "string",
                "maxLength": 100
              },
              "state": {
                "description": "state",
                "type": "string",
                "maxLength": 2
              },
              "country": {
                "description": "country code formatted as <a href=\"https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\" target=\"_blank\">ISO 3166-1 alpha-2</a>",
                "type": "string",
                "minLength": 2,
                "maxLength": 2
              },
              "vatNumber": {
                "description": "VAT number of a member country of the European Union",
                "type": "string",
                "maxLength": 20
              },
              "phoneNumber": {
                "description": "phone number of the customer formatted as <a href=\"https://en.wikipedia.org/wiki/E.164\" target=\"_blank\">E.164</a>",
                "type": "string",
                "pattern": "^\\+?[1-9]\\d{1,14}$",
                "maxLength": 100
              }
            }
          }
        ]
      },
      "VoucherPurchaseData": {
        "type": "object",
        "properties": {
          "voucherTemplateId": {
            "description": "id fo the voucher template associated with this voucher item purchase",
            "type": "integer",
            "format": "int64"
          },
          "voucherCode": {
            "description": "voucher code created with this voucher item purchase",
            "type": "string",
            "maxLength": 14
          },
          "voucherEndDate": {
            "description": "validity time of voucher with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "string",
              "null"
            ],
            "format": "date-time"
          }
        },
        "required": [
          "voucherTemplateId",
          "voucherEndDate"
        ]
      },
      "VoucherUsageData": {
        "type": "object",
        "properties": {
          "purchaseOrderId": {
            "description": "id of the order voucher was purchased with",
            "type": "integer",
            "format": "int64"
          },
          "purchaseOrderItemPosition": {
            "description": "position of the order item inside the order voucher was purchased with",
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "OrderItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBaseDate"
          },
          {
            "type": "object",
            "properties": {
              "position": {
                "description": "position of the order item inside the order - creates a unique order item id in combination with the orderId",
                "type": "integer",
                "format": "int32"
              },
              "productId": {
                "description": "id of the product bought",
                "type": "string",
                "maxLength": 100
              },
              "plenigoOfferId": {
                "description": "if the product is based on a plenigo offer the plenigo offer id is provided here",
                "type": "string",
                "minLength": 20,
                "maxLength": 20
              },
              "plenigoProductId": {
                "description": "if the product is based on a plenigo offer the plenigo product id is provided here - can be identically to the productId",
                "type": "string",
                "minLength": 20,
                "maxLength": 20
              },
              "plenigoStepId": {
                "description": "if the product is based on a plenigo offer the plenigo step id is provided here",
                "type": "string",
                "minLength": 20,
                "maxLength": 20
              },
              "accessRightUniqueId": {
                "description": "unique id of the access right this order item grants access to",
                "type": "string",
                "pattern": "^[0-9\\-a-zA-Z]{2,30}$"
              },
              "title": {
                "description": "product title presented to the customer",
                "type": "string",
                "maxLength": 100
              },
              "internalTitle": {
                "description": "if the product is based on a plenigo offer the product title for internal usage is provided here",
                "type": "string",
                "maxLength": 100
              },
              "taxType": {
                "description": "unique identification of the tax type the product represents - important for tax handling purposes",
                "type": "string",
                "enum": [
                  "ADVERTISEMENT",
                  "BOOK",
                  "DIGITALNEWSPAPER",
                  "DIGITALOFFER",
                  "DIGITALPRODUCT",
                  "DONATION",
                  "DOWNLOAD",
                  "EBOOK",
                  "EVENT",
                  "FEE",
                  "MAGAZINE",
                  "MEMBERSHIP",
                  "MUSIC",
                  "NEWSPAPER",
                  "PHYSICALPRODUCT",
                  "VIDEO",
                  "VOUCHER"
                ]
              },
              "price": {
                "description": "price of the order item",
                "type": "number",
                "format": "double",
                "minimum": 0,
                "maximum": 100000
              },
              "tax": {
                "description": "tax percentage operated on this order item",
                "type": "number",
                "format": "double",
                "minimum": 0,
                "maximum": 100
              },
              "taxCountry": {
                "description": "country tax is based on formatted as <a href=\"https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\" target=\"_blank\">ISO 3166-1 alpha-2</a>",
                "type": "string",
                "minLength": 2,
                "maxLength": 2
              },
              "quantity": {
                "description": "purchase quantity",
                "type": "integer",
                "format": "int32",
                "minimum": 1,
                "maximum": 10000
              },
              "discountPercentage": {
                "description": "discount offered to the order item",
                "type": "integer",
                "format": "int32",
                "minimum": 0,
                "maximum": 100
              },
              "costCenter": {
                "description": "cost center associated with this product at the time of order creation",
                "type": "string",
                "maxLength": 20
              },
              "purchaseNumber": {
                "description": "purchase number associated with this subscription item",
                "type": "string",
                "maxLength": 20
              },
              "voucherCode": {
                "description": "voucher code to purchase this order item",
                "type": "string",
                "maxLength": 100
              },
              "deliveryCustomerId": {
                "description": "id of the customer the delivery belongs to (also includes digital products)",
                "type": "string",
                "maxLength": 100
              },
              "deliveryAddress": {
                "$ref": "#/components/schemas/OrderAddress"
              },
              "subscriptionItemId": {
                "description": "if order item represents a subscription the id of the subscription item is provided here",
                "type": "integer",
                "format": "int64"
              },
              "externalBilling": {
                "description": "indicates if payments are handled by plenigo or an external system",
                "type": "boolean"
              },
              "taxState": {
                "description": "country state used for taxes - only needed in USA and Brasil",
                "type": "string",
                "maxLength": 2
              },
              "purchasedAddonId": {
                "description": "unique id of the purchased addon",
                "type": "integer",
                "format": "int64"
              },
              "validityEndDate": {
                "description": "validity end date with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
                "type": [
                  "string",
                  "null"
                ],
                "format": "date-time"
              },
              "voucherPurchase": {
                "$ref": "#/components/schemas/VoucherPurchaseData"
              },
              "voucherUsage": {
                "$ref": "#/components/schemas/VoucherUsageData"
              }
            },
            "required": [
              "position",
              "productId",
              "title",
              "taxType",
              "price",
              "tax",
              "taxCountry",
              "quantity",
              "discountPercentage",
              "deliveryCustomerId"
            ]
          }
        ]
      },
      "Order": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBase"
          },
          {
            "type": "object",
            "properties": {
              "orderId": {
                "description": "unique id of the order in the context of a company",
                "type": "integer",
                "format": "int64"
              },
              "externalSystemId": {
                "description": "if order was imported from another system this field contains the unique id of the other system",
                "type": "string",
                "maxLength": 100
              },
              "status": {
                "description": "current status of the order",
                "type": "string",
                "enum": [
                  "ACTIVE",
                  "DONE",
                  "CANCELLED"
                ]
              },
              "type": {
                "description": "current type of the order",
                "type": "string",
                "enum": [
                  "ORDER",
                  "CROSS_SELLING"
                ]
              },
              "orderDate": {
                "description": "order date time of the order with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
                "type": [
                  "string",
                  "null"
                ],
                "format": "date-time"
              },
              "accumulatedPrice": {
                "description": "accumulated price of the order",
                "type": "number",
                "format": "double"
              },
              "currency": {
                "description": "currency of the order formatted as <a href=\"https://en.wikipedia.org/wiki/ISO_4217\" target=\"_blank\">ISO 4217, alphabetic code</a>",
                "type": "string",
                "minLength": 3,
                "maxLength": 3
              },
              "paymentMethod": {
                "description": "payment method used to pay for the order (ZERO indicates a free subscription)",
                "type": "string",
                "enum": [
                  "AMAZON_PAY",
                  "APPLE_PAY",
                  "BANK_ACCOUNT",
                  "BILLING",
                  "CREDIT_CARD",
                  "GOOGLE_PAY",
                  "IDEAL",
                  "PAYPAL",
                  "POSTFINANCE",
                  "SOFORT",
                  "TWINT",
                  "ZERO"
                ]
              },
              "paymentMethodId": {
                "description": "id of the payment method that is associated with this order",
                "type": "integer",
                "format": "int64"
              },
              "paymentMethodDetails": {
                "description": "optional payment method details",
                "$ref": "#/components/schemas/PaymentMethodDetails"
              },
              "purchaseOrderIndicator": {
                "description": "purchase order indicator if provided by the customer",
                "type": "string",
                "maxLength": 50
              },
              "invoiceCustomerId": {
                "description": "id of the customer the invoice belongs to",
                "type": "string",
                "maxLength": 100
              },
              "analogInvoice": {
                "description": "flag indicating if order should produce analog invoices",
                "type": "boolean"
              },
              "suppressInvoiceSending": {
                "description": "flag indicating if the subscription invoice sending is suppressed",
                "type": "boolean"
              },
              "giftInfo": {
                "$ref": "#/components/schemas/GiftInfo"
              },
              "invoiceAddress": {
                "$ref": "#/components/schemas/OrderAddress"
              },
              "items": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OrderItem"
                }
              }
            },
            "required": [
              "orderId",
              "orderDate",
              "accumulatedPrice",
              "currency",
              "paymentMethod",
              "invoiceCustomerId",
              "items"
            ]
          }
        ]
      },
      "Orders": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Order"
            }
          }
        }
      },
      "BankAccountChange": {
        "type": "object",
        "properties": {
          "owner": {
            "description": "name on bank account",
            "type": "string",
            "maxLength": 30
          },
          "iban": {
            "description": "<a href=\"https://en.wikipedia.org/wiki/International_Bank_Account_Number\" target=\"_blank\">IBAN</a>",
            "type": "string",
            "minLength": 18,
            "maxLength": 32
          },
          "bic": {
            "description": "<a href=\"https://en.wikipedia.org/wiki/ISO_9362\" target=\"_blank\">BIC</a> - only necessary for countries outside the EU",
            "type": "string",
            "minLength": 8,
            "maxLength": 11
          },
          "preferred": {
            "description": "flag indicating if bank account is the preferred bank account - only one bank account can be preferred.",
            "type": "boolean"
          },
          "invalid": {
            "description": "flag indicating if payment method should be handled as invalid",
            "type": "boolean"
          }
        },
        "required": [
          "owner",
          "iban"
        ]
      },
      "BankAccountCreation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BankAccountChange"
          },
          {
            "type": "object",
            "properties": {
              "customerId": {
                "description": "unique id of the payment mandate - if not sent plenigo will generate a new one together with a mandate date",
                "type": "string",
                "pattern": "^[0-9]{1,18}$"
              },
              "mandateId": {
                "description": "unique id of the payment mandate",
                "type": "string"
              },
              "mandateDate": {
                "description": "date the payment mandate was created with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
                "type": [
                  "string",
                  "null"
                ],
                "format": "date"
              },
              "pspMandateId": {
                "description": "psp mandate id",
                "type": "string",
                "maxLength": 100
              }
            },
            "required": [
              "customerId"
            ]
          }
        ]
      },
      "BankAccount": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BankAccountCreation"
          },
          {
            "$ref": "#/components/schemas/ApiBase"
          },
          {
            "type": "object",
            "properties": {
              "bankAccountId": {
                "description": "unique id of the bank account",
                "type": "integer",
                "format": "int64"
              },
              "active": {
                "description": "flag indicating if bank account is active - a bank account can become inactive by getting closed, etc.",
                "type": "boolean"
              }
            },
            "required": [
              "bankAccountId",
              "mandateId",
              "mandateDate"
            ]
          }
        ]
      },
      "SubscriptionConnectedOfferInfo": {
        "type": "object",
        "properties": {
          "contractCompanyId": {
            "description": "id of the contract company the subscription is connected to",
            "type": "string",
            "maxLength": 100
          },
          "companyId": {
            "description": "id of the company the subscription is connected to",
            "type": "string",
            "maxLength": 100
          },
          "customerId": {
            "description": "id of the customer the subscription is connected to",
            "type": "string",
            "maxLength": 100
          },
          "plenigoOfferId": {
            "description": "the connected plenigo offer id the subscription is connected to",
            "type": "string",
            "minLength": 20,
            "maxLength": 20
          }
        },
        "required": [
          "contractCompanyId",
          "companyId",
          "plenigoOfferId"
        ]
      },
      "SubscriptionPauseAt": {
        "type": "object",
        "properties": {
          "startPauseDate": {
            "description": "date subscription pause should be start with full-date notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21",
            "type": [
              "string",
              "null"
            ],
            "format": "date"
          },
          "endPauseDate": {
            "description": "date subscription pause should be end with full-date notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21",
            "type": [
              "string",
              "null"
            ],
            "format": "date"
          },
          "pauseType": {
            "description": "type of the pause",
            "type": "string",
            "enum": [
              "PAYMENT_ONLY",
              "STANDARD"
            ]
          }
        },
        "required": [
          "startPauseDate",
          "endPauseDate"
        ]
      },
      "SubscriptionItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBase"
          },
          {
            "type": "object",
            "properties": {
              "subscriptionItemId": {
                "description": "unique id of the subscription item in the context of a company",
                "type": "integer",
                "format": "int64"
              },
              "productId": {
                "description": "id of the product bought",
                "type": "string",
                "maxLength": 100
              },
              "plenigoProductId": {
                "description": "if the product is based on a plenigo offer the plenigo product id is provided here - can be identically to the productId",
                "type": "string",
                "minLength": 20,
                "maxLength": 20
              },
              "plenigoStepId": {
                "description": "if the product is based on a plenigo offer the plenigo step id is provided here",
                "type": "string",
                "minLength": 20,
                "maxLength": 20
              },
              "accessRightUniqueId": {
                "description": "unique id of the access right this subscription item grants access to",
                "type": "string",
                "pattern": "^[0-9\\-a-zA-Z]{2,30}$"
              },
              "title": {
                "description": "product title presented to the customer",
                "type": "string",
                "maxLength": 100
              },
              "internalTitle": {
                "description": "if the product is based on a plenigo offer the product title for internal usage is provided here",
                "type": "string",
                "maxLength": 100
              },
              "taxType": {
                "description": "unique identification of tax type the product represents - important for tax handling purposes",
                "type": "string",
                "enum": [
                  "ADVERTISEMENT",
                  "BOOK",
                  "DIGITALNEWSPAPER",
                  "DIGITALOFFER",
                  "DIGITALPRODUCT",
                  "DONATION",
                  "DOWNLOAD",
                  "EBOOK",
                  "EVENT",
                  "FEE",
                  "MAGAZINE",
                  "MEMBERSHIP",
                  "MUSIC",
                  "NEWSPAPER",
                  "PHYSICALPRODUCT",
                  "VIDEO",
                  "VOUCHER"
                ]
              },
              "packageTitle": {
                "description": "if subscription item is correlated to another subscription item in a way that both items are presented as one (bundle) this field contains the correlation title",
                "type": "string",
                "maxLength": 100
              },
              "packageId": {
                "description": "if subscription item is correlated to another subscription item in a way that both items are presented as one (bundle) this field contains the correlation id - the id is only unique within a subscription",
                "type": "string",
                "maxLength": 100
              },
              "packageCancellationLocked": {
                "description": "flag indicating if package elements can only be cancelled together",
                "type": "boolean"
              },
              "price": {
                "description": "price of the subscription",
                "type": "number",
                "format": "double",
                "minimum": 0,
                "maximum": 100000
              },
              "priceIssueId": {
                "description": "id of the price issue the subscription item's price is based on",
                "type": "integer",
                "format": "int64"
              },
              "discountPercentage": {
                "description": "discount offered to the subscription",
                "type": "integer",
                "format": "int32",
                "minimum": 0,
                "maximum": 100
              },
              "quantity": {
                "description": "quantity of purchased entities",
                "type": "integer",
                "format": "int32",
                "minimum": 1,
                "maximum": 10000
              },
              "creditCount": {
                "description": "available credit count to use",
                "type": "integer",
                "format": "int64",
                "minimum": 0,
                "maximum": 100000000
              },
              "creditWalletUniqueId": {
                "description": "the credit wallet unique id",
                "type": "string",
                "maxLength": 50
              },
              "status": {
                "description": "current status of the subscription item",
                "type": "string",
                "enum": [
                  "ACTIVE",
                  "INACTIVE",
                  "CANCELLED"
                ]
              },
              "costCenter": {
                "description": "cost center associated with this subscription item",
                "type": "string",
                "maxLength": 20
              },
              "purchaseNumber": {
                "description": "purchase number associated with this subscription item",
                "type": "string",
                "maxLength": 20
              }
            },
            "required": [
              "subscriptionItemId",
              "productId",
              "title",
              "price",
              "discountPercentage",
              "quantity"
            ]
          }
        ]
      },
      "Subscription": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBase"
          },
          {
            "type": "object",
            "properties": {
              "subscriptionId": {
                "description": "unique id of the subscription in the context of a company",
                "type": "integer",
                "format": "int64"
              },
              "analogInvoice": {
                "description": "flag indicating if the subscription is an analog invoice",
                "type": "boolean"
              },
              "externalSystemId": {
                "description": "if subscription was imported from another system this field contains the unique id of the other system",
                "type": "string",
                "maxLength": 100
              },
              "chainId": {
                "description": "all subscriptions that are in one chain because of some rules or cross selling share a unique chain id in the context of a company that is identically with the first subscription within the chain",
                "type": "integer",
                "format": "int64"
              },
              "plenigoOfferId": {
                "description": "if the product is based on a plenigo offer the plenigo offer id is provided here",
                "type": "string",
                "minLength": 20,
                "maxLength": 20
              },
              "invoiceCustomerId": {
                "description": "id of the customer the invoice belongs to",
                "type": "string",
                "maxLength": 100
              },
              "invoiceAddressId": {
                "description": "id of the invoice address that is associated with this subscription",
                "type": "integer",
                "format": "int64"
              },
              "deliveryCustomerId": {
                "description": "id of the customer the delivery belongs to (also includes digital products)",
                "type": "string",
                "maxLength": 100
              },
              "deliveryAddressId": {
                "description": "id of the delivery address that is associated with this subscription",
                "type": "integer",
                "format": "int64"
              },
              "term": {
                "description": "term of the subscription",
                "type": "integer",
                "format": "int32",
                "minimum": 0,
                "maximum": 100
              },
              "termTimeSpan": {
                "description": "represents the time span that is represented by the term",
                "type": "string",
                "enum": [
                  "DAY",
                  "MONTH",
                  "NONE",
                  "WEEK",
                  "YEAR"
                ]
              },
              "accountingPeriod": {
                "description": "accounting period of the subscription",
                "type": "integer",
                "format": "int32",
                "minimum": 0,
                "maximum": 100
              },
              "accountingPeriodTimeSpan": {
                "description": "represents the time span that is represented by the accounting period",
                "type": "string",
                "enum": [
                  "DAY",
                  "MONTH",
                  "NONE",
                  "WEEK",
                  "YEAR"
                ]
              },
              "cancellationPeriod": {
                "description": "cancellation period of the subscription",
                "type": "integer",
                "format": "int32",
                "minimum": 0,
                "maximum": 100
              },
              "cancellationPeriodTimeSpan": {
                "description": "represents the time span that is represented by the cancellation period",
                "type": "string",
                "enum": [
                  "DAY",
                  "MONTH",
                  "NONE",
                  "WEEK",
                  "YEAR"
                ]
              },
              "cancellationType": {
                "description": "represents the cancellation type of the subscription",
                "type": "string",
                "enum": [
                  "CREDIT_BASED",
                  "ISSUE_BASED",
                  "ISSUE_BASED_REGULAR",
                  "TIME_BASED"
                ]
              },
              "startDate": {
                "description": "start date time of the subscription with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
                "type": [
                  "string",
                  "null"
                ],
                "format": "date-time"
              },
              "referenceStartDate": {
                "description": "reference start date time of the subscription with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
                "type": [
                  "null",
                  "string"
                ],
                "format": "date-time"
              },
              "endDate": {
                "description": "end date time of the subscription with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
                "type": [
                  "string",
                  "null"
                ],
                "format": "date-time"
              },
              "cancellationDate": {
                "description": "cancellation date time of the subscription with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
                "type": [
                  "string",
                  "null"
                ],
                "format": "date-time"
              },
              "status": {
                "description": "current status of the subscription",
                "type": "string",
                "enum": [
                  "ACTIVE",
                  "INACTIVE",
                  "IGNORED"
                ]
              },
              "currency": {
                "description": "currency of the subscription formatted as <a href=\"https://en.wikipedia.org/wiki/ISO_4217\" target=\"_blank\">ISO 4217, alphabetic code</a>",
                "type": "string",
                "minLength": 3,
                "maxLength": 3
              },
              "paymentMethod": {
                "description": "payment method used to pay for the subscription (ZERO indicates a free subscription)",
                "type": "string",
                "enum": [
                  "AMAZON_PAY",
                  "APPLE_PAY",
                  "BANK_ACCOUNT",
                  "BILLING",
                  "CREDIT_CARD",
                  "GOOGLE_PAY",
                  "IDEAL",
                  "PAYPAL",
                  "POSTFINANCE",
                  "SOFORT",
                  "TWINT",
                  "ZERO"
                ]
              },
              "paymentMethodId": {
                "description": "id of the payment method that is associated with this subscription",
                "type": "integer",
                "format": "int64"
              },
              "paymentMethodDetails": {
                "description": "optional payment method details",
                "$ref": "#/components/schemas/PaymentMethodDetails"
              },
              "accessBlocked": {
                "description": "flag indicating if subscription is blocked and delivery customer cannot access products related to subscription, for example because of payment failed",
                "type": "boolean"
              },
              "firstBookingDate": {
                "description": "date the first booking was executed for this subscription with full-date notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21",
                "type": [
                  "string",
                  "null"
                ],
                "format": "date"
              },
              "lastBookingDate": {
                "description": "date the last booking was executed for this subscription with full-date notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21",
                "type": [
                  "string",
                  "null"
                ],
                "format": "date"
              },
              "nextBookingDate": {
                "description": "date the next booking is going to be executed for this subscription with full-date notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21",
                "type": [
                  "string",
                  "null"
                ],
                "format": "date"
              },
              "precursorId": {
                "description": "if there is another subscription preceding this subscription the id of the preceding subscription is provided here",
                "type": "integer",
                "format": "int64"
              },
              "precursorReason": {
                "description": "reason for changing the subscription from the precursor",
                "type": "string",
                "enum": [
                  "ACTION",
                  "AGE",
                  "CANCELLATION",
                  "CROSS_SELLING",
                  "PRICE_PERIOD",
                  "PRODUCT_EOL",
                  "RELATION_RULE"
                ]
              },
              "precursorReasonDetail": {
                "description": "reason detail for changing the subscription from the precursor",
                "type": "string"
              },
              "successorId": {
                "description": "if there is another subscription following up this subscription the id of the next subscription is provided here",
                "type": "integer",
                "format": "int64"
              },
              "successorReason": {
                "description": "reason for changing the subscription to the successor",
                "type": "string",
                "enum": [
                  "ACTION",
                  "AGE",
                  "CANCELLATION",
                  "CROSS_SELLING",
                  "PRICE_PERIOD",
                  "PRODUCT_EOL",
                  "RELATION_RULE"
                ]
              },
              "successorReasonDetail": {
                "description": "reason detail for changing the subscription to the successor",
                "type": "string"
              },
              "externalBilling": {
                "description": "indicates if payments are handled by plenigo or an external system",
                "type": "boolean"
              },
              "customerCancellationBlocked": {
                "description": "indicates if a subscription cannot be cancelled by a customer",
                "type": "boolean"
              },
              "cancellationReasonUniqueId": {
                "description": "if a subscription was cancelled and a cancellation reason was added the unique id of the cancellation reason is set here",
                "type": "string"
              },
              "customerCancellationReasonId": {
                "description": "id of the customer cancellation reason that is associated with this subscription",
                "type": "integer",
                "format": "int64"
              },
              "durationPeriod": {
                "description": "duration period of the subscription till it ends in the successor subscription",
                "type": "integer",
                "format": "int32",
                "minimum": 0,
                "maximum": 100
              },
              "durationPeriodTimeSpan": {
                "description": "represents the time span that is represented by the duration period",
                "type": "string",
                "enum": [
                  "DAY",
                  "MONTH",
                  "NONE",
                  "WEEK",
                  "YEAR"
                ]
              },
              "managedBy": {
                "description": "managed by of the given subscription.",
                "type": "string",
                "enum": [
                  "PLENIGO",
                  "EXTERNAL",
                  "WBZ"
                ]
              },
              "paymentTriesDone": {
                "description": "amount of payment tries done in the current accounting period",
                "type": "integer",
                "format": "int32",
                "minimum": 0,
                "maximum": 100
              },
              "subscriptionType": {
                "description": "represents the type of the subscription",
                "type": "string",
                "enum": [
                  "CREDIT_BASED",
                  "CREDIT_TIME_BASED",
                  "CREDIT_TRIGGER_BASED",
                  "CROSS_COMPANY_TIME_BASED",
                  "ISSUE_BASED",
                  "TIME_BASED",
                  "TIME_CREDIT_BASED",
                  "VOUCHER_CREDIT_BASED",
                  "VOUCHER_CREDIT_TIME_BASED",
                  "VOUCHER_CREDIT_TRIGGER_BASED",
                  "VOUCHER_ISSUE_BASED",
                  "VOUCHER_TIME_BASED",
                  "VOUCHER_TIME_CREDIT_BASED"
                ]
              },
              "suppressInvoiceSending": {
                "description": "flag indicating if the subscription invoice sending is suppressed",
                "type": "boolean"
              },
              "purchaseOrderIndicator": {
                "description": "purchase order indicator to set",
                "type": "string",
                "maxLength": 50
              },
              "connectedOffer": {
                "description": "flag indicates if a subscription is a connected offer",
                "type": "boolean"
              },
              "connectedOfferInfo": {
                "description": "optional payment method details",
                "$ref": "#/components/schemas/SubscriptionConnectedOfferInfo"
              },
              "finishedDeliveries": {
                "description": "the current amount of finished deliveries",
                "type": "integer",
                "format": "int32",
                "minimum": 0
              },
              "openDeliveries": {
                "description": "the current amount of open deliveries",
                "type": "integer",
                "format": "int32",
                "minimum": 0
              },
              "deliveries": {
                "description": "the amount of deliveries",
                "type": "integer",
                "format": "int32",
                "minimum": 0
              },
              "chargeableDeliveries": {
                "description": "the amount of chargeable deliveries",
                "type": "integer",
                "format": "int32",
                "minimum": 0
              },
              "recurringDeliveries": {
                "description": "the amount of recurring deliveries",
                "type": "integer",
                "format": "int32",
                "minimum": 0
              },
              "activePartners": {
                "description": "the active partners",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "deliveryPaused": {
                "description": "the subscription delivery paused data",
                "$ref": "#/components/schemas/SubscriptionPauseAt"
              },
              "paused": {
                "description": "the subscription paused data",
                "$ref": "#/components/schemas/SubscriptionPauseAt"
              },
              "paymentPaused": {
                "description": "the subscription payment paused data",
                "$ref": "#/components/schemas/SubscriptionPauseAt"
              },
              "items": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SubscriptionItem"
                }
              }
            },
            "required": [
              "subscriptionId",
              "invoiceCustomerId",
              "deliveryCustomerId",
              "startDate",
              "term",
              "termTimeSpan",
              "accountingPeriod",
              "accountingPeriodTimeSpan",
              "cancellationPeriod",
              "cancellationPeriodTimeSpan",
              "currency",
              "paymentMethod"
            ]
          }
        ]
      },
      "Subscriptions": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Subscription"
            }
          }
        }
      },
      "Transaction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBaseDate"
          },
          {
            "type": "object",
            "properties": {
              "transactionId": {
                "description": "unique id of the transaction also used for pagination",
                "type": "integer",
                "format": "int64"
              },
              "plenigoTransactionId": {
                "description": "unique plenigo transaction id used to communicate with payment provider",
                "type": "string",
                "maxLength": 32
              },
              "transactionDate": {
                "description": "date the transaction was done with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
                "type": [
                  "string",
                  "null"
                ],
                "format": "date-time"
              },
              "fulfillmentDate": {
                "description": "date the transaction was fulfilled with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
                "type": [
                  "string",
                  "null"
                ],
                "format": "date-time"
              },
              "amount": {
                "description": "amount of the transaction",
                "type": "number",
                "format": "double"
              },
              "currency": {
                "description": "currency of the transaction formatted as <a href=\"https://en.wikipedia.org/wiki/ISO_4217\" target=\"_blank\">ISO 4217, alphabetic code</a>",
                "type": "string",
                "minLength": 3,
                "maxLength": 3
              },
              "paymentProvider": {
                "description": "payment provider used for transaction execution",
                "type": "string",
                "enum": [
                  "AMAZON",
                  "APPLE",
                  "DATATRANS",
                  "GOOGLE",
                  "PAYONE",
                  "PAYPAL",
                  "STRIPE",
                  "WIRECARD_LEGACY"
                ]
              },
              "paymentMethod": {
                "description": "payment method used",
                "type": "string",
                "enum": [
                  "AMAZON_PAY",
                  "APPLE_PAY",
                  "BANK_ACCOUNT",
                  "BILLING",
                  "CREDIT_CARD",
                  "GOOGLE_PAY",
                  "IDEAL",
                  "PAYPAL",
                  "POSTFINANCE",
                  "SOFORT",
                  "TWINT",
                  "ZERO"
                ]
              },
              "paymentAction": {
                "description": "payment action executed",
                "type": "string",
                "enum": [
                  "AMAZON_EXECUTE_PAYMENT",
                  "AMAZON_EXECUTE_REFUND",
                  "AMAZON_FINISH_CHECKOUT_SESSION",
                  "AMAZON_PAY_INITIALIZATION",
                  "BANK_FEES",
                  "CREDIT_CARD_INITIALIZATION",
                  "CREDIT_CARD_VERIFICATION",
                  "CREDIT_CARD_AUTHORIZATION",
                  "CREDIT_CARD_PRE_AUTHORIZATION",
                  "CREDIT_CARD_REFUND",
                  "CREDIT_CARD_PAYMENT",
                  "CREDIT_CARD_CHARGEBACK",
                  "IDEAL_INITIALIZATION",
                  "IDEAL_DATA",
                  "PAYPAL_PAYMENT",
                  "PAYPAL_PAYOUT",
                  "PAYPAL_PAYMENT_FAILED",
                  "PAYPAL_REFERENCE_TRANSACTION",
                  "PAYPAL_REFUND",
                  "SEPA_CREATION",
                  "SEPA_DEBIT",
                  "SEPA_DEBIT_RETURN",
                  "SEPA_MANDATE_CREATION",
                  "SEPA_VOID",
                  "SOFORT_PAYMENT",
                  "SOFORT_REFUND"
                ]
              },
              "paymentStatus": {
                "description": "status of the transaction",
                "type": "string",
                "enum": [
                  "FAILURE",
                  "PENDING",
                  "SUCCESS"
                ]
              },
              "customerId": {
                "description": "unique id of the customer the transaction is related to",
                "type": "string",
                "pattern": "^[0-9]{1,18}$"
              },
              "pspTransactionId": {
                "description": "id of the payment service provider if one was provided",
                "type": "string",
                "maxLength": 80
              },
              "description": {
                "description": "description describing the transaction reason",
                "type": "string",
                "maxLength": 500
              },
              "errorCode": {
                "description": "error code for transaction failure",
                "type": "string",
                "maxLength": 100
              },
              "errorMessage": {
                "description": "description of the error",
                "type": "string",
                "maxLength": 500
              }
            },
            "required": [
              "transactionId",
              "plenigoTransactionId",
              "amount",
              "currency",
              "paymentProvider",
              "paymentMethod",
              "paymentAction",
              "paymentStatus",
              "customerId"
            ]
          }
        ]
      },
      "Transactions": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Transaction"
            }
          }
        }
      },
      "ProductTagCreation": {
        "type": "object",
        "properties": {
          "name": {
            "description": "a name that is unique in combination with a category",
            "type": "string",
            "maximum": 20
          },
          "description": {
            "description": "internal description of the product tag",
            "type": "string",
            "maximum": 500
          },
          "category": {
            "description": "category that reflects the usage of the tag",
            "type": "string",
            "enum": [
              "ANALYTICS",
              "FLOW",
              "CUSTOM",
              "RULE"
            ]
          }
        },
        "required": [
          "title",
          "category"
        ]
      },
      "ProductTag": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ProductTagCreation"
          },
          {
            "$ref": "#/components/schemas/ApiBase"
          },
          {
            "type": "object",
            "properties": {
              "productTagId": {
                "description": "unique id of the product tag within a contract company",
                "type": "integer",
                "format": "int64"
              }
            },
            "required": [
              "productTagId"
            ]
          }
        ]
      },
      "ArchiveSettings": {
        "type": "object",
        "properties": {
          "archiveType": {
            "description": "archive type",
            "type": "string",
            "enum": [
              "BLOCK",
              "DEFAULT",
              "SUCCESSOR"
            ]
          },
          "customerTextTmId": {
            "description": "id of the customer text module to use",
            "type": "integer",
            "format": "int64"
          },
          "successorPlenigoOfferId": {
            "description": "plenigo offer id of the successor",
            "type": "string",
            "minLength": 20,
            "maxLength": 20
          }
        },
        "required": [
          "archiveType"
        ]
      },
      "OfferConnectionInfo": {
        "type": "object",
        "properties": {
          "companyId": {
            "description": "companyId of connected company",
            "type": "string"
          }
        },
        "required": [
          "companyId"
        ]
      },
      "OfferConnectedCompanySettings": {
        "type": "object",
        "properties": {
          "connectionInfo": {
            "description": "connected company settings",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferConnectionInfo"
            }
          }
        }
      },
      "OfferTranslationImage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBaseDate"
          },
          {
            "type": "object",
            "properties": {
              "imageType": {
                "description": "type of the image - there can only be one image of each type per translation",
                "type": "string",
                "enum": [
                  "PRODUCT_CHECKOUT",
                  "PRODUCT_PRESENTATION"
                ]
              },
              "name": {
                "description": "name of the image",
                "type": "string",
                "maxLength": 100
              },
              "url": {
                "description": "url to get image from",
                "type": "string",
                "maxLength": 500
              },
              "altText": {
                "description": "image alt text",
                "type": "string",
                "maxLength": 200
              }
            },
            "required": [
              "imageType",
              "name",
              "url"
            ]
          }
        ]
      },
      "OfferTranslation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBaseDate"
          },
          {
            "type": "object",
            "properties": {
              "language": {
                "description": "two letter language code according to <a href=\"https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes\" target=\"_blank\">ISO 639-1</a> - every language code can only be used once per translation",
                "type": "string",
                "minLength": 2,
                "maxLength": 2
              },
              "title": {
                "description": "translated title",
                "type": "string",
                "maxLength": 100
              },
              "titleAdditions": {
                "description": "translated additional title information",
                "type": "string",
                "maxLength": 5000
              },
              "description": {
                "description": "translated description",
                "type": "string",
                "maxLength": 5000
              },
              "legalText": {
                "description": "translated legal text",
                "type": "string",
                "maxLength": 5000
              },
              "summaryText": {
                "description": "translated summary text",
                "type": "string",
                "maxLength": 5000
              },
              "withdrawalInstruction": {
                "description": "translated withdrawal instruction",
                "type": "string",
                "maxLength": 5000
              },
              "preferred": {
                "description": "flag indicating if language is default fallback language if no suitable language is found",
                "type": "boolean"
              },
              "images": {
                "description": "images associated with translation",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OfferTranslationImage"
                }
              }
            },
            "required": [
              "language",
              "title"
            ]
          }
        ]
      },
      "OfferDooSettings": {
        "type": "object",
        "properties": {
          "enabled": {
            "description": "flag indicating if doo settings are enabled",
            "type": "boolean"
          }
        }
      },
      "OfferPartnerSettings": {
        "type": "object",
        "properties": {
          "dooSettings": {
            "$ref": "#/components/schemas/OfferDooSettings"
          }
        }
      },
      "OfferBase": {
        "type": "object",
        "properties": {
          "internalTitle": {
            "description": "internal title of the product group",
            "type": "string",
            "maxLength": 100
          },
          "pauseAble": {
            "description": "flag indicating if subscription is pause able",
            "type": "boolean"
          },
          "invoiceAddressMandatory": {
            "description": "flag indicating if invoice address must be provided by the customer",
            "type": "boolean"
          },
          "deliveryAddressMandatory": {
            "description": "flag indicating if delivery address must be provided by the customer",
            "type": "boolean"
          },
          "multiplePurchases": {
            "description": "flag indicating if offer can be bought multiple times from the same customer",
            "type": "boolean"
          },
          "misuseRuleId": {
            "description": "id of the misuse rule to apply",
            "type": "integer",
            "format": "int64"
          },
          "fixedStartDate": {
            "description": "fixed date the offer starts with",
            "type": [
              "string",
              "null"
            ],
            "format": "date"
          },
          "issuesInPast": {
            "description": "amount of issues that the user can select in the past - cannot be selected with fixed start date",
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 30
          },
          "issuesInFuture": {
            "description": "amount of issues that the user can select in the future - cannot be selected with fixed start date",
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 30
          },
          "archived": {
            "description": "flag indicating if offer is archived",
            "type": "boolean"
          },
          "archiveSettings": {
            "$ref": "#/components/schemas/ArchiveSettings"
          },
          "allowedPaymentMethods": {
            "description": "additional constraints to the payment methods if some of the selected payment methods cannot be used for this offer - there can be no more payment methods than selected in the global payment settings section",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "AMAZON_PAY",
                "APPLE_PAY",
                "BANK_ACCOUNT",
                "BILLING",
                "CREDIT_CARD",
                "GOOGLE_PAY",
                "IDEAL",
                "PAYPAL",
                "POSTFINANCE",
                "SOFORT",
                "TWINT",
                "ZERO"
              ]
            }
          },
          "connectedCompanySettings": {
            "$ref": "#/components/schemas/OfferConnectedCompanySettings"
          },
          "leafId": {
            "description": "id of the tree leaf this offer should be associated with",
            "type": "integer",
            "format": "int64"
          },
          "externalBilling": {
            "description": "indicates if payments are handled by plenigo or an external system",
            "type": "boolean"
          },
          "customerCancellationBlocked": {
            "description": "indicates if a subscription cannot be cancelled by a customer",
            "type": "boolean"
          },
          "corporateAccountUsers": {
            "description": "count of allowed corporate account users",
            "type": "integer",
            "format": "int64"
          },
          "corporateAccountInvitationUrl": {
            "description": "corporate account invitation url",
            "type": "string"
          },
          "bonusId": {
            "description": "id of the bonus associated with this offer",
            "type": "integer",
            "format": "int64"
          },
          "selfServiceHintTmId": {
            "description": "id of the text module used as self service hint",
            "type": "integer",
            "format": "int64"
          },
          "managedBy": {
            "description": "managed by of the given offer.",
            "type": "string",
            "enum": [
              "PLENIGO",
              "EXTERNAL",
              "WBZ"
            ]
          },
          "translations": {
            "description": "translations associated with this product",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferTranslation"
            }
          },
          "pdfTemplateUsage": {
            "description": "contains the pdf template to use with this offer",
            "type": "string",
            "enum": [
              "B2B",
              "B2C",
              "EVENT_B2B",
              "EVENT_B2C"
            ]
          },
          "partnerSettings": {
            "$ref": "#/components/schemas/OfferPartnerSettings"
          }
        },
        "required": [
          "internalTitle",
          "translations"
        ]
      },
      "OfferProductBase": {
        "type": "object",
        "properties": {
          "internalTitle": {
            "description": "internal title of the product",
            "type": "string",
            "maxLength": 100
          },
          "position": {
            "description": "order position within the offer - must start with one and be in order",
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 50
          },
          "taxType": {
            "description": "tax type product is associated with",
            "type": "string",
            "enum": [
              "ADVERTISEMENT",
              "BOOK",
              "DIGITALNEWSPAPER",
              "DIGITALOFFER",
              "DIGITALPRODUCT",
              "DONATION",
              "DOWNLOAD",
              "EBOOK",
              "EVENT",
              "FEE",
              "MAGAZINE",
              "MEMBERSHIP",
              "MUSIC",
              "NEWSPAPER",
              "PHYSICALPRODUCT",
              "VIDEO",
              "VOUCHER"
            ]
          },
          "productType": {
            "description": "defines the type of product",
            "type": "string",
            "enum": [
              "CROSS_CLIENT_SUBSCRIPTION_TIME_BASED",
              "SINGLE_PRODUCT",
              "SINGLE_PRODUCT_CREDIT_BASED",
              "SUBSCRIPTION_CREDIT_BASED",
              "SUBSCRIPTION_CREDIT_TIME_BASED",
              "SUBSCRIPTION_CREDIT_TRIGGER_BASED",
              "SUBSCRIPTION_ISSUE_BASED",
              "SUBSCRIPTION_TIME_BASED",
              "SUBSCRIPTION_TIME_CREDIT_BASED",
              "VOUCHER_SALE"
            ]
          },
          "subscription": {
            "description": "flag indicating if product represents a subscription",
            "type": "boolean"
          },
          "amount": {
            "description": "amount of goods represented by this product",
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 100000
          },
          "deliveryListId": {
            "description": "id of the delivery list to use",
            "type": "integer",
            "format": "int64"
          },
          "validityTime": {
            "description": "validity time of this product in days",
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 365
          },
          "validityEndTime": {
            "description": "date the this product validity will be end",
            "type": [
              "string",
              "null"
            ],
            "format": "date-time"
          },
          "accessRightId": {
            "description": "id of the access right associated with this product",
            "type": "integer",
            "format": "int64"
          },
          "costCenterId": {
            "description": "id of the cost center associated with this product",
            "type": "integer",
            "format": "int64"
          },
          "ledgerId": {
            "description": "id of the ledger associated with this product",
            "type": "integer",
            "format": "int64"
          },
          "ivwRuleId": {
            "description": "id of the ivw rule associated with this product",
            "type": "integer",
            "format": "int64"
          },
          "voucherTargetPlenigoOfferId": {
            "description": "plenigo offer id of the target offer - required with product type VOUCHER_SALE",
            "type": "string"
          },
          "voucherTemplateId": {
            "description": "id of the voucher template to use - required with product type VOUCHER_SALE",
            "type": "integer",
            "format": "int64"
          },
          "voucherValidityTime": {
            "description": "validity time of the voucher based on timespan",
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 100
          },
          "voucherValidityTimespan": {
            "description": "date the this product validity will be end",
            "type": "string",
            "enum": [
              "DAY",
              "MONTH",
              "NONE",
              "WEEK",
              "YEAR"
            ]
          },
          "additionalData": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "maxLength": 200
            }
          },
          "data": {
            "description": "additional data field",
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "maxLength": 200
            }
          },
          "priceIssueId": {
            "description": "id of the price issue associated with this product",
            "type": "integer",
            "format": "int64"
          },
          "shippingCostPriceIssueId": {
            "description": "id of the shipping cost price issue associated with this product",
            "type": "integer",
            "format": "int64"
          },
          "creditCountWalledId": {
            "description": "id of the credit card wallet associated with this credit count wallet",
            "type": "integer",
            "format": "int64"
          },
          "creditCount": {
            "description": "credit count added with this product",
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "maximum": 1000000000
          },
          "option": {
            "description": "flag indicating if product is an option in a basket",
            "type": "boolean"
          },
          "translations": {
            "description": "translations associated with this product",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferTranslation"
            }
          }
        },
        "required": [
          "position",
          "taxType",
          "amount",
          "accessRightId",
          "productType"
        ]
      },
      "OfferProductStepBase": {
        "type": "object",
        "properties": {
          "position": {
            "description": "position inside the product",
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 50
          },
          "productContractId": {
            "description": "id of the product contract associated with this step",
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "position"
        ]
      },
      "OfferProductStepCreation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/OfferProductStepBase"
          },
          {
            "type": "object",
            "properties": {
              "translations": {
                "description": "translations associated with this product",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OfferTranslation"
                }
              },
              "productTagIds": {
                "description": "tags associated with this product",
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              },
              "additionalProductContractIds": {
                "description": "additioanl product contract ids with this product",
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          }
        ]
      },
      "TimeBasedProductContractCondition": {
        "type": "object",
        "properties": {
          "termPeriod": {
            "description": "term time period",
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 100
          },
          "termTimespan": {
            "description": "term timespan",
            "type": "string",
            "enum": [
              "DAY",
              "MONTH",
              "NONE",
              "WEEK",
              "YEAR"
            ]
          },
          "durationPeriod": {
            "description": "duration period of the product step - can be 0 for no end time",
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 100
          },
          "durationTimespan": {
            "description": "duration timespan",
            "type": "string",
            "enum": [
              "DAY",
              "MONTH",
              "NONE",
              "WEEK",
              "YEAR"
            ]
          },
          "accountingPeriod": {
            "description": "accounting period of the product step",
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 100
          },
          "accountingTimespan": {
            "description": "accounting timespan",
            "type": "string",
            "enum": [
              "DAY",
              "MONTH",
              "NONE",
              "WEEK",
              "YEAR"
            ]
          },
          "cancellationPeriod": {
            "description": "cancellation period of the product step",
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 100
          },
          "cancellationTimespan": {
            "description": "cancellation timespan",
            "type": "string",
            "enum": [
              "DAY",
              "MONTH",
              "NONE",
              "WEEK",
              "YEAR"
            ]
          }
        }
      },
      "IssueBasedProductContractCondition": {
        "type": "object",
        "properties": {
          "deliveries": {
            "description": "amount of issues included in payment period",
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 100
          },
          "chargeableDeliveries": {
            "description": "amount of paid issues included in payment period",
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 100
          },
          "cancellationType": {
            "description": "cancellation type",
            "type": "string",
            "enum": [
              "ISSUE_BASED",
              "ISSUE_BASED_REGULAR"
            ]
          },
          "cancellationPeriod": {
            "description": "issue based cancellation period of the contract",
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 100
          },
          "cancellationPeriodTimespan": {
            "description": "issue based cancellation timespan of the contract",
            "type": "string",
            "enum": [
              "DAY",
              "MONTH",
              "NONE",
              "WEEK",
              "YEAR"
            ]
          },
          "autoRenewalDelivery": {
            "description": "flag indicating if last step of an offer should be auto renewal",
            "type": "boolean"
          }
        },
        "required": [
          "deliveries",
          "chargeableDeliveries",
          "cancellationType",
          "cancellationPeriod",
          "cancellationPeriodTimespan"
        ]
      },
      "CreditBasedProductContractCondition": {
        "type": "object",
        "properties": {
          "termPeriod": {
            "description": "term time period",
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 100
          },
          "termTimespan": {
            "description": "term timespan",
            "type": "string",
            "enum": [
              "DAY",
              "MONTH",
              "NONE",
              "WEEK",
              "YEAR"
            ]
          },
          "durationPeriod": {
            "description": "duration period of the product step - can be 0 for no end time",
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 100
          },
          "durationTimespan": {
            "description": "duration timespan",
            "type": "string",
            "enum": [
              "DAY",
              "MONTH",
              "NONE",
              "WEEK",
              "YEAR"
            ]
          },
          "accountingPeriod": {
            "description": "accounting period of the product step",
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 100
          },
          "accountingTimespan": {
            "description": "accounting timespan",
            "type": "string",
            "enum": [
              "DAY",
              "MONTH",
              "NONE",
              "WEEK",
              "YEAR"
            ]
          },
          "cancellationPeriod": {
            "description": "cancellation period of the product step",
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 100
          },
          "cancellationTimespan": {
            "description": "cancellation timespan",
            "type": "string",
            "enum": [
              "DAY",
              "MONTH",
              "NONE",
              "WEEK",
              "YEAR"
            ]
          },
          "creditCount": {
            "description": "credit count to add",
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ProductContractBase": {
        "type": "object",
        "properties": {
          "title": {
            "description": "title of the product contract",
            "type": "string",
            "maximum": 100
          },
          "leafId": {
            "description": "id of the leaf the contract is related to",
            "type": "integer",
            "format": "int64"
          },
          "description": {
            "description": "description of the product contract",
            "type": "string",
            "maximum": 2000
          },
          "contractType": {
            "description": "contract type",
            "type": "string",
            "enum": [
              "CREDIT_BASED",
              "ISSUE_BASED",
              "TIME_BASED"
            ]
          },
          "productTagIds": {
            "description": "tags associated with this product",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "ivwRuleId": {
            "description": "unique id of this ivw rule",
            "type": "integer",
            "format": "int6"
          },
          "timeBasedCondition": {
            "$ref": "#/components/schemas/TimeBasedProductContractCondition"
          },
          "issueBasedCondition": {
            "$ref": "#/components/schemas/IssueBasedProductContractCondition"
          },
          "creditBasedCondition": {
            "$ref": "#/components/schemas/CreditBasedProductContractCondition"
          }
        },
        "required": [
          "title",
          "contractType"
        ]
      },
      "ProductContractCreation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ProductContractBase"
          },
          {
            "type": "object",
            "properties": {
              "priceIssueId": {
                "description": "price issue to use",
                "type": "integer",
                "format": "int64"
              }
            },
            "required": [
              "priceIssueId"
            ]
          }
        ]
      },
      "ProductContract": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBase"
          },
          {
            "$ref": "#/components/schemas/ProductContractCreation"
          },
          {
            "type": "object",
            "properties": {
              "productContractId": {
                "description": "unique id of the product contract within a contract company",
                "type": "integer",
                "format": "int64"
              },
              "archived": {
                "description": "flag indicating if price country segment is archived",
                "type": "boolean"
              }
            },
            "required": [
              "productContractId",
              "archived"
            ]
          }
        ]
      },
      "OfferProductStep": {
        "allOf": [
          {
            "$ref": "#/components/schemas/OfferProductStepCreation"
          },
          {
            "$ref": "#/components/schemas/ApiBaseDate"
          },
          {
            "type": "object",
            "properties": {
              "plenigoStepId": {
                "description": "unique id of the step within the product",
                "type": "string",
                "minLength": 20,
                "maxLength": 20
              },
              "amount": {
                "description": "amount of issues",
                "type": "integer",
                "format": "int32",
                "minimum": 0,
                "maximum": 100
              },
              "chargeableAmount": {
                "description": "amount of paid issues",
                "type": "integer",
                "format": "int32",
                "minimum": 0,
                "maximum": 100
              },
              "issueBasedCancellationPeriod": {
                "description": "issue based cancellation period",
                "type": "integer",
                "format": "int32",
                "minimum": 1,
                "maximum": 100
              },
              "issueBasedCancellationTimespan": {
                "description": "issue based cancellation timespan",
                "type": "string",
                "enum": [
                  "DAY",
                  "MONTH",
                  "NONE",
                  "WEEK",
                  "YEAR"
                ]
              },
              "regularBasedCancellationPeriod": {
                "description": "regular based cancellation period",
                "type": "integer",
                "format": "int32",
                "minimum": 1,
                "maximum": 100
              },
              "regularBasedCancellationTimespan": {
                "description": "regular based cancellation timespan",
                "type": "string",
                "enum": [
                  "DAY",
                  "MONTH",
                  "NONE",
                  "WEEK",
                  "YEAR"
                ]
              },
              "termPeriod": {
                "description": "term time period",
                "type": "integer",
                "format": "int32",
                "minimum": 1,
                "maximum": 100
              },
              "termTimespan": {
                "description": "term timespan",
                "type": "string",
                "enum": [
                  "DAY",
                  "MONTH",
                  "NONE",
                  "WEEK",
                  "YEAR"
                ]
              },
              "durationPeriod": {
                "description": "duration period of the product step - can be 0 for no end time",
                "type": "integer",
                "format": "int32",
                "minimum": 0,
                "maximum": 100
              },
              "durationTimespan": {
                "description": "duration timespan",
                "type": "string",
                "enum": [
                  "DAY",
                  "MONTH",
                  "NONE",
                  "WEEK",
                  "YEAR"
                ]
              },
              "accountingPeriod": {
                "description": "accounting period of the product step",
                "type": "integer",
                "format": "int32",
                "minimum": 1,
                "maximum": 100
              },
              "accountingTimespan": {
                "description": "accounting timespan",
                "type": "string",
                "enum": [
                  "DAY",
                  "MONTH",
                  "NONE",
                  "WEEK",
                  "YEAR"
                ]
              },
              "cancellationPeriod": {
                "description": "cancellation period of the product step",
                "type": "integer",
                "format": "int32",
                "minimum": 1,
                "maximum": 100
              },
              "cancellationTimespan": {
                "description": "cancellation timespan",
                "type": "string",
                "enum": [
                  "DAY",
                  "MONTH",
                  "NONE",
                  "WEEK",
                  "YEAR"
                ]
              },
              "productContractId": {
                "description": "id of the product contract associated with this step",
                "type": "integer",
                "format": "int64"
              },
              "priceIssueId": {
                "description": "id of the price issue associated with this step",
                "type": "integer",
                "format": "int64"
              },
              "ivwRuleId": {
                "description": "id of the ivw rule associated with this product step",
                "type": "integer",
                "format": "int64"
              },
              "creditCount": {
                "description": "credit count added with this step",
                "type": "integer",
                "format": "int64",
                "minimum": 0,
                "maximum": 1000000000
              },
              "productTags": {
                "description": "tags associated with this product",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProductTag"
                }
              },
              "additionalProductContracts": {
                "description": "additioanl product contract ids with this product",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProductContract"
                }
              }
            }
          }
        ]
      },
      "OfferProduct": {
        "allOf": [
          {
            "$ref": "#/components/schemas/OfferProductBase"
          },
          {
            "$ref": "#/components/schemas/ApiBaseDate"
          },
          {
            "type": "object",
            "properties": {
              "plenigoProductId": {
                "description": "unique id of the product within the offer",
                "type": "string",
                "minLength": 20,
                "maxLength": 20
              },
              "steps": {
                "description": "steps associated with this product - mandatory field for subscriptions",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OfferProductStep"
                }
              },
              "productTags": {
                "description": "tags associated with this product",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProductTag"
                }
              }
            },
            "required": [
              "plenigoProductId"
            ]
          }
        ]
      },
      "OfferProductGroupBase": {
        "type": "object",
        "properties": {
          "internalTitle": {
            "description": "internal title of the product group",
            "type": "string",
            "maxLength": 100
          },
          "translations": {
            "description": "translations associated with this product",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferTranslation"
            }
          }
        },
        "required": [
          "internalTitle",
          "translations"
        ]
      },
      "OfferProductGroup": {
        "allOf": [
          {
            "$ref": "#/components/schemas/OfferProductGroupBase"
          },
          {
            "$ref": "#/components/schemas/ApiBaseDate"
          },
          {
            "type": "object",
            "properties": {
              "plenigoProductGroupId": {
                "description": "unique id of the product group within the offer",
                "type": "string",
                "minLength": 20,
                "maxLength": 20
              },
              "products": {
                "description": "products associated with this product group",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OfferProduct"
                }
              }
            },
            "required": [
              "plenigoProductGroupId",
              "products"
            ]
          }
        ]
      },
      "Offer": {
        "allOf": [
          {
            "$ref": "#/components/schemas/OfferBase"
          },
          {
            "$ref": "#/components/schemas/ApiBase"
          },
          {
            "type": "object",
            "properties": {
              "plenigoOfferId": {
                "description": "unique id of the offer within a company",
                "type": "string",
                "minLength": 20,
                "maxLength": 20
              },
              "managedExternal": {
                "description": "flag indicating if offer is managed externally",
                "type": "boolean"
              },
              "products": {
                "description": "products associated with this offer",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OfferProduct"
                }
              },
              "productGroups": {
                "description": "product groups associated with this offer",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OfferProductGroup"
                }
              },
              "productTags": {
                "description": "tags associated with this product",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProductTag"
                }
              }
            },
            "required": [
              "plenigoOfferId"
            ]
          }
        ]
      },
      "Offers": {
        "type": "object",
        "properties": {
          "items": {
            "description": "offers",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Offer"
            }
          }
        }
      },
      "PriceIssueBase": {
        "type": "object",
        "properties": {
          "title": {
            "description": "title of the price issue",
            "type": "string",
            "maximum": 100
          },
          "leafId": {
            "description": "id of the tree leaf this price issue should be associated with",
            "type": "integer",
            "format": "int64"
          },
          "description": {
            "description": "Internal description of the price issue",
            "type": "string",
            "maximum": 2000
          }
        },
        "required": [
          "title"
        ]
      },
      "PriceSegmentBase": {
        "type": "object",
        "properties": {
          "price": {
            "description": "price of the product",
            "type": "number",
            "format": "double",
            "minimum": 0,
            "maximum": 100000
          },
          "currency": {
            "description": "currency of the order formatted as <a href='https://en.wikipedia.org/wiki/ISO_4217' target='_blank'>ISO 4217, alphabetic code</a>",
            "type": "string",
            "minLength": 3,
            "maxLength": 3
          },
          "validFrom": {
            "description": "date price segment is valid from in full-date notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21",
            "type": [
              "string",
              "null"
            ],
            "format": "date"
          },
          "validFromExistingSubscription": {
            "description": "date price segment is valid for exisiting subscriptions from in full-date notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21",
            "type": [
              "string",
              "null"
            ],
            "format": "date"
          },
          "worldSegment": {
            "description": "flag indicating if price is valid for the complete world if no other price segments are provided - must be set if price country segment id is not provided",
            "type": "boolean"
          }
        },
        "required": [
          "price",
          "currency",
          "validFrom"
        ]
      },
      "PriceCountrySegmentCreation": {
        "type": "object",
        "properties": {
          "title": {
            "description": "title of the price country segment",
            "type": "string",
            "maximum": 100
          },
          "priority": {
            "description": "priority of the price country segment - the lower the priority the higher the rank of the price segment",
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 1000
          },
          "description": {
            "description": "internal description of the price country segment",
            "type": "string",
            "maximum": 2000
          },
          "countries": {
            "description": "array of country codes formatted as <a href=\"https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\" target=\"_blank\">ISO 3166-1 alpha-2</a>",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "title",
          "countries"
        ]
      },
      "PriceCountrySegment": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PriceCountrySegmentCreation"
          },
          {
            "$ref": "#/components/schemas/ApiBase"
          },
          {
            "type": "object",
            "properties": {
              "priceCountrySegmentId": {
                "description": "unique id of the price country segment within a contract company",
                "type": "integer",
                "format": "int64"
              }
            },
            "required": [
              "priceCountrySegmentId"
            ]
          }
        ]
      },
      "PriceSegment": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PriceSegmentBase"
          },
          {
            "$ref": "#/components/schemas/ApiBaseDate"
          },
          {
            "type": "object",
            "properties": {
              "priceSegmentId": {
                "description": "unique id of the price segment within a contract company",
                "type": "integer",
                "format": "int64"
              },
              "countrySegments": {
                "$ref": "#/components/schemas/PriceCountrySegment"
              }
            }
          }
        ]
      },
      "PriceIssueCreation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PriceIssueBase"
          },
          {
            "type": "object",
            "properties": {
              "priceSegments": {
                "description": "price segments",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PriceSegment"
                }
              }
            },
            "required": [
              "priceSegments"
            ]
          }
        ]
      },
      "PriceIssue": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PriceIssueCreation"
          },
          {
            "$ref": "#/components/schemas/ApiBase"
          },
          {
            "type": "object",
            "properties": {
              "priceIssueId": {
                "description": "unique id of the price issue within a contract company",
                "type": "integer",
                "format": "int64"
              },
              "archived": {
                "description": "flag indicating if price country segment is archived",
                "type": "boolean"
              },
              "priceSegments": {
                "description": "price segments",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PriceSegment"
                }
              }
            },
            "required": [
              "priceIssueId",
              "archived"
            ]
          }
        ]
      },
      "PriceIssues": {
        "type": "object",
        "properties": {
          "items": {
            "description": "price issues",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PriceIssue"
            }
          }
        }
      },
      "RefundStatusChange": {
        "type": "object",
        "properties": {
          "status": {
            "description": "status of the refund",
            "type": "string",
            "enum": [
              "CLOSED",
              "IGNORED",
              "OPEN",
              "PROCESSING",
              "REJECTED"
            ]
          },
          "reason": {
            "description": "reason for status change",
            "type": "string",
            "maxLength": 500
          }
        },
        "required": [
          "status"
        ]
      },
      "schemas-StatusHistory": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RefundStatusChange"
          },
          {
            "type": "object",
            "properties": {
              "changeDate": {
                "description": "date the refund was changed with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
                "type": [
                  "string",
                  "null"
                ],
                "format": "date-time"
              }
            }
          }
        ]
      },
      "Refund": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBaseDate"
          },
          {
            "type": "object",
            "properties": {
              "refundId": {
                "description": "unique id of the refund also used for pagination",
                "type": "integer",
                "format": "int64"
              },
              "customerId": {
                "description": "unique id of the customer the refund is related to",
                "type": "string",
                "pattern": "^[0-9]{1,18}$"
              },
              "amount": {
                "description": "amount of the refund",
                "type": "number",
                "format": "double"
              },
              "currency": {
                "description": "currency of the refund formatted as <a href=\"https://en.wikipedia.org/wiki/ISO_4217\" target=\"_blank\">ISO 4217, alphabetic code</a>",
                "type": "string",
                "minLength": 3,
                "maxLength": 3
              },
              "paymentProvider": {
                "description": "payment provider used for refund execution",
                "type": "string",
                "enum": [
                  "AMAZON",
                  "APPLE",
                  "DATATRANS",
                  "GOOGLE",
                  "PAYONE",
                  "PAYPAL",
                  "STRIPE",
                  "WIRECARD_LEGACY"
                ]
              },
              "paymentMethod": {
                "description": "payment method used",
                "type": "string",
                "enum": [
                  "AMAZON_PAY",
                  "APPLE_PAY",
                  "BANK_ACCOUNT",
                  "BILLING",
                  "CREDIT_CARD",
                  "GOOGLE_PAY",
                  "IDEAL",
                  "PAYPAL",
                  "POSTFINANCE",
                  "SOFORT",
                  "TWINT",
                  "ZERO"
                ]
              },
              "cancellationInvoiceId": {
                "description": "unique id of the cancellation also used for pagination",
                "type": "integer",
                "format": "int64"
              },
              "transactionId": {
                "description": "unique id of the transaction also used for pagination",
                "type": "string",
                "maxLength": 80
              },
              "pspTransactionId": {
                "description": "id of the payment service provider if one was provided",
                "type": "string",
                "maxLength": 80
              },
              "status": {
                "description": "status of the refund",
                "type": "string",
                "enum": [
                  "CLOSED",
                  "IGNORED",
                  "OPEN",
                  "PROCESSING",
                  "REJECTED"
                ]
              },
              "statusHistory": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/schemas-StatusHistory"
                }
              }
            },
            "required": [
              "refundId",
              "changedDate",
              "customerId",
              "amount",
              "currency",
              "paymentMethod",
              "status",
              "paymentStatus"
            ]
          }
        ]
      },
      "Refunds": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Refund"
            }
          }
        }
      },
      "CustomerCancellationReasonTranslation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBaseDate"
          },
          {
            "type": "object",
            "properties": {
              "language": {
                "description": "two letter language code according to <a href=\"https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes\" target=\"_blank\">ISO 639-1</a> - every language code can only be used once per translation",
                "type": "string",
                "minLength": 2,
                "maxLength": 2
              },
              "text": {
                "description": "text to show to the customer",
                "type": "string",
                "maxLength": 1000
              },
              "preferred": {
                "description": "flag indicating if language is preferred",
                "type": "boolean"
              }
            },
            "required": [
              "language",
              "text"
            ]
          }
        ]
      },
      "CustomerCancellationReasonUpdate": {
        "type": "object",
        "properties": {
          "internalTitle": {
            "description": "internal title of the cancellation reason",
            "type": "string",
            "maxLength": 100
          },
          "active": {
            "description": "flag indicating if cancellation reason is currently active",
            "type": "boolean"
          },
          "priority": {
            "description": "priority of the cancellation reason",
            "type": "integer",
            "format": "int32"
          },
          "translations": {
            "description": "translations associated with this cancellation reason",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerCancellationReasonTranslation"
            }
          }
        },
        "required": [
          "internalTitle",
          "translations"
        ]
      },
      "CustomerCancellationReasonCreation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CustomerCancellationReasonUpdate"
          },
          {
            "type": "object",
            "properties": {
              "uniqueId": {
                "description": "unique id to associate with the user after user has accepted cancellation reason",
                "type": "string",
                "maxLength": 50
              }
            },
            "required": [
              "internalTitle",
              "uniqueId",
              "translations"
            ]
          }
        ]
      },
      "CustomerCancellationReason": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CustomerCancellationReasonCreation"
          },
          {
            "$ref": "#/components/schemas/ApiBase"
          },
          {
            "type": "object",
            "properties": {
              "customerCancellationReasonId": {
                "description": "unique id of the customer cancellation reason",
                "type": "integer",
                "format": "int64"
              },
              "archived": {
                "description": "flag indicating if customer cancellation reason is archived",
                "type": "boolean"
              }
            },
            "required": [
              "customerCancellationReasonId"
            ]
          }
        ]
      },
      "CustomerCancellationReasons": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerCancellationReason"
            }
          }
        }
      },
      "AdditionalChainData": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "maxLength": 30
                },
                "value": {
                  "type": "string",
                  "maxLength": 200
                }
              }
            }
          }
        }
      },
      "ApiVoucher": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBase"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "description": "unique id of the voucher in the context of a company",
                "type": "integer",
                "format": "int64"
              },
              "voucherCode": {
                "description": "voucher code",
                "type": "string"
              },
              "customData": {
                "description": "free text field",
                "type": "string",
                "maxLength": 200
              },
              "status": {
                "description": "status of the voucher",
                "type": "string",
                "enum": [
                  "ACTIVE",
                  "INACTIVE",
                  "DELETED"
                ]
              },
              "orderId": {
                "description": "order id this voucher was used",
                "type": "integer"
              }
            },
            "required": [
              "id",
              "createdDate",
              "changedDate",
              "changedBy",
              "changedByType",
              "voucherCode",
              "status",
              "voucherAmount"
            ]
          }
        ]
      },
      "ApiVoucherPage": {
        "type": "object",
        "properties": {
          "startingAfter": {
            "description": "starting after element id",
            "type": "integer"
          },
          "size": {
            "description": "size of elements of the page",
            "type": "integer"
          },
          "totalSize": {
            "description": "total of elements",
            "type": "integer"
          },
          "campaigns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiVoucher"
            }
          }
        }
      },
      "ApiCampaignBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBase"
          },
          {
            "type": "object",
            "properties": {
              "campaignId": {
                "description": "unique id of the campaign in the context of a company",
                "type": "string",
                "maxLength": 100
              },
              "campaignName": {
                "description": "name of the campaign",
                "type": "string",
                "maxLength": 200
              },
              "voucherType": {
                "description": "represents the type of the vouchers of this campaign",
                "type": "string",
                "enum": [
                  "MULTI",
                  "SINGLE"
                ]
              },
              "plenigoOfferId": {
                "description": "offer id the vouchers are for",
                "type": "string",
                "maxLength": 100
              },
              "status": {
                "description": "status of the campaign",
                "type": "string",
                "enum": [
                  "ACTIVE",
                  "CREATING",
                  "INACTIVE",
                  "DELETED",
                  "UPDATING"
                ]
              },
              "startDate": {
                "description": "start date of the campaign with full-date notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21",
                "type": [
                  "null",
                  "string"
                ],
                "format": "date"
              },
              "endDate": {
                "description": "end date of the campaign with full-date notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21",
                "type": [
                  "null",
                  "string"
                ],
                "format": "date"
              }
            },
            "required": [
              "campaignId",
              "campaignName",
              "voucherType",
              "offerId",
              "status",
              "startDate",
              "changedDate",
              "changedBy",
              "changedByType"
            ]
          }
        ]
      },
      "ApiChannelBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBase"
          },
          {
            "type": "object",
            "properties": {
              "channelId": {
                "description": "unique id of the channel in the context of a company",
                "type": "integer",
                "format": "int64"
              },
              "channelName": {
                "description": "name of the channel",
                "type": "string",
                "maxLength": 200
              },
              "customData": {
                "description": "free text field",
                "type": "string",
                "maxLength": 200
              },
              "voucherAmount": {
                "description": "represents the amount of vouchers for this channel",
                "type": "integer",
                "minimum": 1,
                "maximum": 10000000
              },
              "status": {
                "description": "status of the campaign",
                "type": "string",
                "enum": [
                  "ACTIVE",
                  "CREATING",
                  "INACTIVE",
                  "DELETED",
                  "UPDATING"
                ]
              }
            },
            "required": [
              "channelId",
              "changedDate",
              "changedBy",
              "changedByType",
              "channelName",
              "status",
              "voucherAmount"
            ]
          }
        ]
      },
      "ApiCampaignView": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiCampaignBase"
          },
          {
            "type": "object",
            "properties": {
              "channels": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ApiChannelBase"
                }
              }
            },
            "required": [
              "channels"
            ]
          }
        ]
      },
      "ApiCampaignPage": {
        "type": "object",
        "properties": {
          "startingAfter": {
            "description": "starting after element id",
            "type": "integer"
          },
          "size": {
            "description": "size of elements of the page",
            "type": "integer"
          },
          "totalSize": {
            "description": "total of elements",
            "type": "integer"
          },
          "campaigns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiCampaignView"
            }
          }
        }
      },
      "ChannelCreation": {
        "type": "object",
        "properties": {
          "channelName": {
            "description": "name of the channel",
            "type": "string",
            "maxLength": 200
          },
          "customData": {
            "description": "free text field",
            "type": "string",
            "maxLength": 200
          },
          "voucherAmount": {
            "description": "represents the amount of vouchers to create for this channel",
            "type": "integer",
            "minimum": 1,
            "maximum": 10000000
          }
        }
      },
      "CampaignCreation": {
        "type": "object",
        "properties": {
          "campaignName": {
            "description": "name of the campaign",
            "type": "string",
            "maxLength": 200
          },
          "voucherType": {
            "description": "represents the type of the vouchers of this campaign",
            "type": "string",
            "enum": [
              "MULTI",
              "SINGLE"
            ]
          },
          "plenigoOfferId": {
            "description": "plenigo offer id the vouchers are for",
            "type": "string",
            "maxLength": 20
          },
          "startDate": {
            "description": "start date of the campaign with full-date notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21",
            "type": [
              "null",
              "string"
            ],
            "format": "date"
          },
          "endDate": {
            "description": "end date of the campaign with full-date notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21",
            "type": [
              "null",
              "string"
            ],
            "format": "date"
          },
          "channels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelCreation"
            }
          }
        },
        "required": [
          "campaignName",
          "voucherType",
          "plenigoOfferId",
          "startDate",
          "channels"
        ]
      },
      "ApiCampaignCreationResult": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiCampaignBase"
          },
          {
            "type": "object",
            "properties": {
              "channels": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ApiChannelBase"
                }
              }
            },
            "required": [
              "channels"
            ]
          }
        ]
      }
    },
    "examples": {
      "accessRightsDataExample": {
        "value": {
          "startingAfterId": "100002",
          "items": [
            {
              "customerId": "100003",
              "createdDate": "2019-01-01T07:53:23.450961Z",
              "createdBy": "PLENIGO",
              "createdByType": "SYSTEM",
              "changedDate": "2019-01-01T07:53:23.450961Z",
              "changedBy": "PLENIGO",
              "changedByType": "SYSTEM",
              "items": [
                {
                  "createdDate": "2019-01-01T07:53:23.450961Z",
                  "createdBy": "PLENIGO",
                  "createdByType": "SYSTEM",
                  "changedDate": "2019-01-01T07:53:23.450961Z",
                  "changedBy": "PLENIGO",
                  "changedByType": "SYSTEM",
                  "lifeTimeStart": "2019-01-01T07:53:23.450961Z",
                  "lifeTimeEnd": "2020-01-01T07:53:23.450961Z",
                  "accessTimeStart": "06:00:00",
                  "accessTimeEnd": "18:00:00",
                  "maxCacheDate": "2020-01-01T07:53:23.450961Z",
                  "data": [
                    {
                      "key": "value"
                    }
                  ],
                  "blocked": false,
                  "productId": "P_TTA1E7173120881551",
                  "plenigoOfferId": "O_TTA1E7173120881552",
                  "plenigoProductId": "P_TTA1E7173120881551",
                  "plenigoStepId": "S_TTA1E7173120881553",
                  "accessRightUniqueId": "UNIQUE-ID",
                  "accessRightData": {
                    "key": "value"
                  },
                  "itemType": "SUBSCRIPTION_ITEM",
                  "itemId": "7212"
                }
              ]
            }
          ]
        },
        "summary": "detail list"
      },
      "errorResultBadRequestExample": {
        "value": {
          "errorCode": 99400,
          "errorMessage": "Provided data cannot be processed.",
          "validationErrors": [
            {
              "field": "customerId",
              "error": "numeric",
              "value": "C1454646"
            }
          ]
        },
        "summary": "bad request"
      },
      "errorResultUnauthorizedExample": {
        "value": {
          "errorCode": 99015,
          "errorMessage": "Api token provided is not authorized."
        },
        "summary": "unauthorized"
      },
      "errorResultTooManyRequestsExample": {
        "value": {
          "errorCode": 99429,
          "errorMessage": "The rate limit for this endpoint is reached. Please try again later."
        },
        "summary": "too many requests"
      },
      "errorResultInternalErrorExample": {
        "value": {
          "errorCode": 99500,
          "errorMessage": "Currently we are not able to answer your request. We are working hard to resolve this problem."
        },
        "summary": "internal error"
      },
      "errorResultBadGatewayErrorExample": {
        "value": {
          "errorCode": 99502,
          "errorMessage": "Bad Gateway."
        },
        "summary": "bad gateway"
      },
      "errorResultGatewayTimeoutErrorExample": {
        "value": {
          "errorCode": 99504,
          "errorMessage": "Processing of your request took to long. To prevent blocking we aborted the request. You can resend your request without any changes."
        },
        "summary": "gateway timeout"
      },
      "errorResultNotFoundExample": {
        "value": {
          "errorCode": 99404,
          "errorMessage": "Entity for given id does not exist."
        },
        "summary": "not found"
      },
      "successStatusExample": {
        "value": {
          "success": true
        },
        "summary": "status"
      },
      "errorResultExample": {
        "value": {
          "errorCode": 99000,
          "errorMessage": "Error message"
        },
        "summary": "generic error"
      },
      "customersExample": {
        "value": {
          "items": [
            {
              "customerId": "100003",
              "username": "wild_flower",
              "email": "wildflower@example.com",
              "invoiceEmail": "wildflower-invoices@example.com",
              "birthday": "2001-03-21",
              "language": "de",
              "mobileNumber": "+14155552671",
              "status": "ACTIVATED"
            }
          ]
        },
        "summary": "detail list"
      },
      "customerCreationExample": {
        "value": {
          "customerId": "100003",
          "username": "wild_flower",
          "email": "wildflower@example.com",
          "invoiceEmail": "wildflower-invoices@example.com",
          "birthday": "2001-03-21",
          "language": "de",
          "mobileNumber": "+14155552671",
          "status": "ACTIVATED",
          "addresses": [
            {
              "type": "INVOICE",
              "preferred": true,
              "customerId": "100003",
              "businessAddress": true,
              "salutation": "MR",
              "title": "Dr",
              "firstName": "John",
              "lastName": "Doe",
              "companyName": "ARAMARK Ltd.",
              "additionalCompanyInfo": "Subdivision of World Ltd.",
              "street": "Commercial Road",
              "streetNumber": "30",
              "additionalStreetInfo": "Level 5",
              "postcode": "PO1 1AA",
              "city": "Hampshire",
              "country": "GB",
              "vatNumber": "DE123456789"
            }
          ],
          "data": {
            "myCustomerId": "1234CustomerId"
          }
        },
        "summary": "creation"
      },
      "customerCreationResultExample": {
        "value": {
          "customerId": "100003",
          "externalSystemId": "1748-E",
          "username": "wild_flower",
          "email": "wildflower@example.com",
          "salutation": "MR",
          "firstName": "John",
          "lastName": "Doe",
          "invoiceEmail": "wildflower-invoices@example.com",
          "birthday": "2001-03-21",
          "language": "de",
          "mobileNumber": "+14155552671",
          "status": "ACTIVATED",
          "changedDate": "2019-03-21T17:32:12Z",
          "registrationDate": "2019-03-21T17:32:12Z",
          "registrationSource": "www.example.com",
          "twoFactorEnabled": false,
          "addresses": [
            {
              "addressId": 10004,
              "type": "INVOICE",
              "preferred": true,
              "customerId": "100003",
              "businessAddress": true,
              "salutation": "MR",
              "title": "Dr",
              "firstName": "John",
              "lastName": "Doe",
              "companyName": "ARAMARK Ltd.",
              "additionalCompanyInfo": "Subdivision of World Ltd.",
              "street": "Commercial Road",
              "streetNumber": "30",
              "additionalStreetInfo": "Level 5",
              "postcode": "PO1 1AA",
              "city": "Hampshire",
              "country": "GB",
              "vatNumber": "DE123456789"
            }
          ],
          "data": {
            "myCustomerId": "1234CustomerId"
          }
        },
        "summary": "creation result"
      },
      "successStatusWithPromiseIdExample": {
        "value": {
          "success": true,
          "promiseId": "0ujsszgFvbiEr7CDgE3z8MAUPFt"
        },
        "summary": "status"
      },
      "invoicesExample": {
        "value": {
          "items": [
            {
              "invoiceId": 12200,
              "changedDate": "2019-03-21T17:32:12Z",
              "invoiceDate": "2019-03-21T17:32:12Z",
              "accumulatedPrice": 12,
              "currency": "EUR",
              "paymentMethod": "CREDIT_CARD",
              "paymentMetodId": 145,
              "invoiceCustomerId": 100003,
              "invoiceAddress": {
                "businessAddress": true,
                "salutation": "MR",
                "title": "Prince",
                "firstName": "Michael",
                "lastName": "Example",
                "companyName": "Example Ltd.",
                "additionalCompanyInfo": "London",
                "street": "King Street",
                "streetNumber": "4",
                "additionalStreetInfo": "Appartment 5",
                "postcode": "E-3245",
                "city": "London",
                "country": "GB",
                "vatNumber": "GB123456789"
              },
              "items": [
                {
                  "position": 1,
                  "title": "A simple cup",
                  "price": 12,
                  "tax": 19,
                  "taxCountry": "DE",
                  "quantity": 12,
                  "deliveryCustomerId": "100003",
                  "deliveryAddress": {
                    "businessAddress": true,
                    "salutation": "MR",
                    "title": "Prince",
                    "firstName": "Michael",
                    "lastName": "Example",
                    "companyName": "Example Ltd.",
                    "additionalCompanyInfo": "London",
                    "street": "King Street",
                    "streetNumber": "4",
                    "additionalStreetInfo": "Appartment 5",
                    "postcode": "E-3245",
                    "city": "London",
                    "country": "GB",
                    "vatNumber": "GB123456789"
                  }
                }
              ]
            }
          ]
        },
        "summary": "invoices"
      },
      "ordersExample": {
        "value": {
          "items": [
            {
              "orderId": 12200,
              "changedDate": "2019-03-21T17:32:12Z",
              "status": "DONE",
              "type": "ORDER",
              "orderDate": "2019-03-21T17:32:12Z",
              "accumulatedPrice": 12,
              "currency": "EUR",
              "paymentMethod": "PAYPAL",
              "paymentMethodId": 100231,
              "invoiceCustomerId": 100003,
              "invoiceAddress": {
                "businessAddress": true,
                "salutation": "MR",
                "title": "Dr",
                "firstName": "John",
                "lastName": "Doe",
                "companyName": "ARAMARK Ltd.",
                "additionalCompanyInfo": "Subdivision of World Ltd.",
                "street": "Commercial Road",
                "streetNumber": "30",
                "additionalStreetInfo": "Level 5",
                "postcode": "PO1 1AA",
                "city": "Hampshire",
                "country": "GB",
                "vatNumber": "DE123456789"
              },
              "items": [
                {
                  "position": 1,
                  "productId": "P_TTA1E7173120881551",
                  "plenigoOfferId": "O_MZA1E7173120881551",
                  "plenigoProductId": "P_TTA1E7173120881551",
                  "plenigoStepId": "S_DRLEE7173120881551",
                  "title": "A simple cup",
                  "taxType": "PHYSICALPRODUCT",
                  "price": 12,
                  "tax": 19,
                  "taxCountry": "DE",
                  "quantity": 12,
                  "deliveryCustomerId": "100003",
                  "deliveryAddress": {
                    "businessAddress": true,
                    "salutation": "MR",
                    "title": "Dr",
                    "firstName": "John",
                    "lastName": "Doe",
                    "companyName": "ARAMARK Ltd.",
                    "additionalCompanyInfo": "Subdivision of World Ltd.",
                    "street": "Commercial Road",
                    "streetNumber": "30",
                    "additionalStreetInfo": "Level 5",
                    "postcode": "PO1 1AA",
                    "city": "Hampshire",
                    "country": "GB",
                    "vatNumber": "DE123456789"
                  }
                }
              ]
            }
          ]
        },
        "summary": "detail list"
      },
      "subscriptionsExample": {
        "value": {
          "items": [
            {
              "subscriptionId": 9310,
              "changedDate": "2019-03-21T17:32:12Z",
              "startDate": "2019-02-01T17:32:12Z",
              "endDate": "2090-02-01TT17:32:12Z",
              "chainId": 9310,
              "plenigoOfferId": "O_MZA1E7173120881551",
              "invoiceCustomerId": "100003",
              "deliveryCustomerId": "100003",
              "term": 12,
              "termTimeSpan": "MONTH",
              "accountingPeriod": 1,
              "accountingPeriodTimeSpan": "MONTH",
              "cancellationPeriod": 1,
              "cancellationPeriodTimeSpan": "DAY",
              "currency": "EUR",
              "paymentMethod": "CREDIT_CARD",
              "paymentMethodId": 100230,
              "accessBlocked": false,
              "firstBookingDate": "2019-02-01",
              "lastBookingDate": "2019-08-01",
              "nextBookingDate": "2019-09-01",
              "status": "ACTIVE",
              "items": [
                {
                  "subscriptionItemId": 7212,
                  "productId": "P_TTA1E7173120881551",
                  "plenigoProductId": "P_TTA1E7173120881551",
                  "plenigoStepId": "S_DRLEE7173120881551",
                  "title": "Best monthly news",
                  "internalTitle": "Monthly newspaper",
                  "taxType": "NEWSPAPER",
                  "price": 9.99,
                  "priceIssueId": 12345,
                  "discountPercentage": 0,
                  "quantity": 1,
                  "status": "ACTIVE",
                  "packageTitle": "Best offer bundle",
                  "packageId": "AX20429MK3222",
                  "packageCancellationLocked": true,
                  "costCenter": "43400",
                  "accessRightUniqueId": "global-access"
                }
              ]
            }
          ]
        },
        "summary": "detail list"
      },
      "transactionsExample": {
        "value": {
          "items": [
            {
              "transactionId": "12341243123",
              "plenigoTransactionId": "1TCZCSdg0lFEGGG3JPbZODkZKG0",
              "sortKey": 20190321713212125000,
              "changedDate": "2019-03-21T17:32:12Z",
              "paymentProvider": "PAYPAL",
              "paymentMethod": "PAYPAL",
              "paymentAction": "PAYPAL_REFERENCE_TRANSACTION",
              "paymentStatus": "SUCCESS",
              "customerId": "12701",
              "amount": 12.9,
              "currency": "EUR"
            }
          ]
        },
        "summary": "detail list"
      },
      "additionalOrderDataExample": {
        "value": {
          "affiliateId": "AID-32473",
          "partnerId": "PartnerOne",
          "sourceId": "https://www.example.com",
          "utm": {
            "source": "https://www.example.com",
            "medium": "https://www.example.com",
            "campaign": "product launch",
            "term": "something",
            "content": "Test1"
          },
          "data": [
            {
              "key": "value"
            }
          ]
        },
        "summary": "additional data"
      },
      "bankAccountExample": {
        "value": {
          "bankAccountId": 100001,
          "createdDate": "2019-01-01T07:53:23.450961Z",
          "createdBy": "PLENIGO",
          "createdByType": "SYSTEM",
          "changedDate": "2019-01-01T07:53:23.450961Z",
          "changedBy": "PLENIGO",
          "changedByType": "SYSTEM",
          "customerId": "100003",
          "owner": "John Doe",
          "iban": "GB19123412341234123412",
          "mandateId": "12342342",
          "mandateDate": "2019-03-21T17:32:12Z",
          "active": true,
          "preferred": true
        },
        "summary": "detail"
      },
      "offersExample": {
        "value": {
          "items": [
            {
              "offerId": 50001,
              "plenigoOfferId": "O_123456789123456789",
              "internalTitle": "A new offer",
              "pauseAble": false,
              "invoiceAddressMandatory": false,
              "deliveryAddressMandatory": false,
              "multiplePurchases": false,
              "misuseRuleId": 17001,
              "archived": false,
              "allowedPaymentMethods": [
                "CREDIT_CARD",
                "BANK_ACCOUNT"
              ],
              "connectedCompanySettings": [
                {
                  "connectionInfo": [
                    {
                      "companyId": "8XYM4WU2V6NJUM5LZ6C9"
                    }
                  ]
                }
              ],
              "translations": [
                {
                  "language": "en",
                  "title": "Best offer ever",
                  "description": "This product is a must have.",
                  "legalText": "If you buy it you have it forever. No way to come out.",
                  "summaryText": "Click the buy button now.",
                  "withdrawalInstruction": "You can withdrawal every time.",
                  "preferred": true,
                  "images": [
                    {
                      "imageType": "PRODUCT_CHECKOUT",
                      "name": "Cool image",
                      "url": "http://static.example.com/image.png",
                      "altText": "Alter text"
                    }
                  ]
                }
              ],
              "products": [
                {
                  "plenigoProductId": "P_123456789123456789",
                  "internalTitle": "A new product",
                  "position": 1,
                  "taxType": "BOOK",
                  "costCenterId": 1230000,
                  "option": false,
                  "subscription": true,
                  "amount": 1,
                  "accessRightId": 2000,
                  "steps": [
                    {
                      "plenigoStepId": "S_123456789123456789",
                      "position": 1,
                      "termPeriod": 3,
                      "termTimespan": "MONTH",
                      "durationPeriod": 12,
                      "durationTimespan": "MONTH",
                      "accountingPeriod": 1,
                      "accountingTimespan": "MONTH",
                      "cancellationPeriod": 1,
                      "cancellationTimespan": "DAY",
                      "priceIssueId": 2000,
                      "translations": null
                    }
                  ],
                  "translations": [
                    {
                      "language": "en",
                      "title": "Single product one",
                      "description": "This product is single product one.",
                      "legalText": "Buy single product one.",
                      "summaryText": "Press to buy.",
                      "withdrawalInstruction": "You can withdrawal every time.",
                      "preferred": true
                    }
                  ]
                },
                {
                  "plenigoProductId": "P_223456789123456789",
                  "internalTitle": "A new product",
                  "position": 2,
                  "taxType": "DIGITALNEWSPAPER",
                  "costCenterId": 1230002,
                  "option": false,
                  "subscription": true,
                  "amount": 1,
                  "accessRightId": 2000,
                  "steps": [
                    {
                      "plenigoStepId": "S_223456789123456789",
                      "position": 1,
                      "termPeriod": 3,
                      "termTimespan": "MONTH",
                      "durationPeriod": 12,
                      "durationTimespan": "MONTH",
                      "accountingPeriod": 1,
                      "accountingTimespan": "MONTH",
                      "cancellationPeriod": 1,
                      "cancellationTimespan": "DAY",
                      "priceIssueId": 0
                    }
                  ],
                  "translations": [
                    {
                      "language": "en",
                      "title": "Single product two",
                      "description": "This product is single product two.",
                      "legalText": "Buy single product two.",
                      "summaryText": "Press to buy.",
                      "withdrawalInstruction": "You can withdrawal every time.",
                      "preferred": true
                    }
                  ]
                }
              ],
              "productGroups": [
                {
                  "plenigoProductGroupId": "G_123456789123456789",
                  "internalTitle": "A new product group",
                  "translations": [
                    {
                      "language": "en",
                      "title": "Best product group ever",
                      "description": "This product group is a must have.",
                      "legalText": "If you buy it you have it forever. No way to come out of this group.",
                      "summaryText": "Click the buy button the group now.",
                      "withdrawalInstruction": "You can withdrawal every time.",
                      "preferred": true
                    }
                  ],
                  "products": [
                    {
                      "plenigoProductId": "P_323456789123456789",
                      "internalTitle": "A new product",
                      "position": 1,
                      "taxType": "DIGITALOFFER",
                      "costCenterId": 1230005,
                      "option": false,
                      "subscription": true,
                      "amount": 1,
                      "accessRightId": 0,
                      "steps": [
                        {
                          "plenigoStepId": "S_323456789123456789",
                          "position": 1,
                          "termPeriod": 3,
                          "termTimespan": "MONTH",
                          "durationPeriod": 12,
                          "durationTimespan": "MONTH",
                          "accountingPeriod": 1,
                          "accountingTimespan": "MONTH",
                          "cancellationPeriod": 1,
                          "cancellationTimespan": "DAY",
                          "priceIssueId": 2000
                        }
                      ],
                      "translations": [
                        {
                          "language": "en",
                          "title": "Group product one",
                          "description": "This product is group product one.",
                          "legalText": "Buy group product one.",
                          "summaryText": "Press to buy.",
                          "withdrawalInstruction": "You can withdrawal every time.",
                          "preferred": true
                        }
                      ]
                    },
                    {
                      "plenigoProductId": "P_423456789123456789",
                      "internalTitle": "A new product",
                      "position": 2,
                      "taxType": "DOWNLOAD",
                      "costCenterId": 1230007,
                      "option": false,
                      "subscription": true,
                      "amount": 1,
                      "accessRightId": 0,
                      "steps": [
                        {
                          "plenigoStepId": "S_423456789123456789",
                          "position": 1,
                          "termPeriod": 3,
                          "termTimespan": "MONTH",
                          "durationPeriod": 12,
                          "durationTimespan": "MONTH",
                          "accountingPeriod": 1,
                          "accountingTimespan": "MONTH",
                          "cancellationPeriod": 1,
                          "cancellationTimespan": "DAY",
                          "priceIssueId": 2000
                        }
                      ],
                      "translations": [
                        {
                          "language": "en",
                          "title": "Group product two",
                          "description": "This product is group product two.",
                          "legalText": "Buy group product two.",
                          "summaryText": "Press to buy.",
                          "withdrawalInstruction": "You can withdrawal every time.",
                          "preferred": true
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        "summary": "detail list"
      },
      "priceIssuesExample": {
        "value": {
          "items": [
            {
              "priceIssueId": 10001,
              "title": "Price list number one",
              "description": "The first price list for our products",
              "archived": false,
              "priceSegments": [
                {
                  "priceSegmentId": 11001,
                  "price": 19.99,
                  "currency": "EUR",
                  "validFrom": "2019-03-21",
                  "worldSegment": false,
                  "priceCountrySegmentId": 12001,
                  "countrySegment": {
                    "priceCountrySegmentId": 12001,
                    "itle": "Europa light",
                    "description": "Europa with only a few countries",
                    "countries": [
                      "DE",
                      "FR"
                    ],
                    "archived": false
                  }
                }
              ]
            }
          ]
        },
        "summary": "detail list"
      },
      "refundsExample": {
        "value": {
          "items": {
            "refundId": "12341243123",
            "changedDate": "2019-03-21T17:32:12Z",
            "customerId": 12701,
            "amount": 12.9,
            "currency": "EUR",
            "paymentProvider": "PAYPAL",
            "cancellationInvoiceId": 23457,
            "transactionId": "2Lx7Hfn42IoFuOiogiyDBxhiBC",
            "status": "SUCCESS",
            "paymentMethod": "PAYPAL",
            "paymentAction": "PAYPAL_REFERENCE_TRANSACTION",
            "paymentStatus": "SUCCESS",
            "statusHistory": {
              "status": "CLOSED",
              "changeDate": "2019-03-21T17:32:12Z"
            }
          }
        },
        "summary": "detail list"
      },
      "customerCancellationReasonsExample": {
        "value": {
          "items": {
            "customerCancellationReasonId": 120302,
            "createdDate": "2019-01-01T07:53:23.450961Z",
            "createdBy": "PLENIGO",
            "createdByType": "SYSTEM",
            "changedDate": "2019-01-01T07:53:23.450961Z",
            "changedBy": "PLENIGO",
            "changedByType": "SYSTEM",
            "internalTitle": "Too expensive",
            "active": true,
            "priority": 1,
            "uniqueId": "too_expensive",
            "translations": [
              {
                "language": "DE",
                "text": "Too expensive",
                "preferred": true
              }
            ]
          }
        }
      },
      "subscriptionExample": {
        "value": {
          "subscriptionId": 9310,
          "changedDate": "2019-03-21T17:32:12Z",
          "startDate": "2019-02-01T17:32:12Z",
          "endDate": "2090-02-01TT17:32:12Z",
          "chainId": 9310,
          "plenigoOfferId": "O_MZA1E7173120881551",
          "invoiceCustomerId": "100003",
          "deliveryCustomerId": "100003",
          "term": 12,
          "termTimeSpan": "MONTH",
          "accountingPeriod": 1,
          "accountingPeriodTimeSpan": "MONTH",
          "cancellationPeriod": 1,
          "cancellationPeriodTimeSpan": "DAY",
          "currency": "EUR",
          "paymentMethod": "CREDIT_CARD",
          "paymentMethodId": 100230,
          "accessBlocked": false,
          "firstBookingDate": "2019-02-01",
          "lastBookingDate": "2019-08-01",
          "nextBookingDate": "2019-09-01",
          "status": "ACTIVE",
          "items": [
            {
              "subscriptonItemId": 7212,
              "productId": "P_TTA1E7173120881551",
              "plenigoProductId": "P_TTA1E7173120881551",
              "plenigoStepId": "S_DRLEE7173120881551",
              "title": "Best monthly news",
              "internalTitle": "Monthly newspaper",
              "taxType": "NEWSPAPER",
              "price": 9.99,
              "priceIssueId": 12345,
              "discountPercentage": 0,
              "quantity": 1,
              "status": "ACTIVE",
              "packageTitle": "Best offer bundle",
              "packageId": "AX20429MK3222",
              "packageCancellationLocked": true,
              "costCenter": "43400",
              "accessRightUniqueId": "global-access"
            }
          ]
        },
        "summary": "detail"
      },
      "additionalChainDataExample": {
        "value": {
          "data": {
            "myChainInfo": "newChain"
          }
        },
        "summary": "additional data"
      },
      "apiVoucherPageExample": {
        "value": {
          "items": [
            {
              "id": 100007,
              "createdDate": "2019-08-13",
              "changedDate": "2019-09-13",
              "changedBy": "P_UZV4L63ZBT",
              "changedByType": "MERCHANT",
              "voucherCode": "HNWN-2ETP-FA97",
              "customData": "Custom data",
              "status": "ACTIVE"
            },
            {
              "id": 100008,
              "createdDate": "2019-08-13",
              "changedDate": "2019-09-23",
              "changedBy": "Z2sZV4H63IBT",
              "changedByType": "CUSTOMER",
              "voucherCode": "NVUU-UG7A-T3C3",
              "customData": "Custom data",
              "status": "INACTIVE",
              "orderId": 100001
            }
          ]
        },
        "summary": "api voucher example"
      },
      "campaignPageExample": {
        "value": {
          "items": [
            {
              "startingAfter": 0,
              "size": 10,
              "totalSize": 1,
              "campaigns": [
                {
                  "campaignId": 100003,
                  "changedDate": "2019-09-13",
                  "changedBy": "P_UZV4L63ZBT",
                  "changedByType": "MERCHANT",
                  "campaignName": "Autumn 2019",
                  "voucherType": "SINGLE",
                  "plenigoOfferId": "O_TTA1E7173120881551",
                  "status": "ACTIVE",
                  "startDate": "2019-09-13",
                  "channels": [
                    {
                      "channelId": 100002,
                      "changedDate": "2019-09-13",
                      "changedBy": "P_UZV4L63ZBT",
                      "changedByType": "MERCHANT",
                      "channelName": "Internet",
                      "customData": "Custom data",
                      "voucherAmount": 2,
                      "status": "ACTIVE"
                    }
                  ]
                }
              ]
            }
          ]
        },
        "summary": "detail list"
      },
      "campaignCreationExample": {
        "value": {
          "campaignName": "API Campaign Creation",
          "voucherType": "SINGLE",
          "plenigoOfferId": "O_TTA1E7173120881551",
          "startDate": "2019-12-16",
          "endDate": "2099-12-16",
          "channels": [
            {
              "channelName": "API Channel",
              "customData": "Custom data",
              "voucherAmount": 2
            }
          ]
        }
      },
      "campaignCreationResultExample": {
        "value": {
          "items": [
            {
              "campaignId": 100003,
              "changedDate": "2019-09-13",
              "changedBy": "P_UZV4L63ZBT",
              "changedByType": "MERCHANT",
              "campaignName": "Autumn 2019",
              "voucherType": "SINGLE",
              "plenigoOfferId": "O_TTA1E7173120881551",
              "status": "CREATING",
              "startDate": "2019-09-13",
              "channels": [
                {
                  "channelId": 100002,
                  "changedDate": "2019-09-13",
                  "changedBy": "P_UZV4L63ZBT",
                  "changedByType": "MERCHANT",
                  "channelName": "Internet",
                  "customData": "Custom data",
                  "voucherAmount": 2,
                  "status": "CREATING"
                }
              ]
            }
          ]
        },
        "summary": "detail"
      }
    }
  }
}