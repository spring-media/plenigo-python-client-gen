{
  "openapi": "3.1.0",
  "info": {
    "title": "plenigo API v3",
    "description": "This is the OpenAPI description for accessing the plenigo platform.\nAll API calls are by default synchronous. Asynchronous calls are marked.\n",
    "version": "API.240627-MINOR",
    "contact": {
      "url": "https://github.com/plenigo/plenigo-doc"
    }
  },
  "servers": [
    {
      "url": "https://api.plenigo.com/api/v3.0"
    }
  ],
  "security": [
    {
      "plenigoToken": []
    }
  ],
  "x-tagGroups": [
    {
      "name": "Customers",
      "tags": [
        "Access Rights",
        "Activities",
        "Addresses",
        "Customers",
        "Payment Methods",
        "Sessions",
        "Corporate Accounts"
      ]
    },
    {
      "name": "Finance",
      "tags": [
        "Accounting",
        "Invoices",
        "Refunds",
        "Transactions"
      ]
    },
    {
      "name": "Imports",
      "tags": [
        "Order Imports"
      ]
    },
    {
      "name": "Reports",
      "tags": [
        "Analytics",
        "Callback Logs",
        "Downloads",
        "Mail Logs",
        "Sftp Logs"
      ]
    },
    {
      "name": "Processes",
      "tags": [
        "Checkout",
        "Login",
        "Password Forgotten",
        "Process Settings",
        "Registration",
        "Sso Provider Login"
      ]
    },
    {
      "name": "Products",
      "tags": [
        "Age Rules",
        "Bonuses",
        "Cross Sellings",
        "Delivery Lists",
        "IVW Rules",
        "Misuse Rules",
        "Offers",
        "Price Country Segments",
        "Price Issues",
        "Product Access Rights",
        "Product Contracts",
        "Product Tags",
        "Shopping Carts",
        "Vouchers"
      ]
    },
    {
      "name": "Purchases",
      "tags": [
        "App Stores",
        "Orders",
        "Subscriptions",
        "Wallets"
      ]
    },
    {
      "name": "Settings",
      "tags": [
        "Api Access Tokens",
        "Additional Data Selections",
        "Blocked ibans",
        "Customer Cancellation Reasons",
        "Customer OptIns",
        "Customer Terms",
        "Sort Tree Leafs",
        "Text Module Settings"
      ]
    }
  ],
  "paths": {
    "/accessRights": {
      "get": {
        "summary": "Search access rights",
        "operationId": "searchAccessRights",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Access Rights"
        ],
        "description": "Search all access rights that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessRightsData"
                },
                "examples": {
                  "accessRightsDataExample": {
                    "$ref": "#/components/examples/accessRightsDataExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/accessRights/{customerId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/customerIdPath"
        }
      ],
      "get": {
        "summary": "Get all customer access rights",
        "operationId": "getAccessRightsForCustomer",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Access Rights"
        ],
        "description": "Get all access rights for a customer identified by the passed customer id.\n",
        "responses": {
          "200": {
            "description": "Returns all access rights of a customer.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessRightData"
                },
                "examples": {
                  "accessRightDataExample": {
                    "$ref": "#/components/examples/accessRightDataExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create customer access right",
        "operationId": "createAccessRightsForCustomer",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Access Rights"
        ],
        "description": "Create a new access right item with the data provided for a customer identified by the passed customer id.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessRightItemCreation"
              },
              "examples": {
                "accessRightExample": {
                  "$ref": "#/components/examples/accessRightCreationExample"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Access right item was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessRightData"
                },
                "examples": {
                  "accessRightDataExample": {
                    "$ref": "#/components/examples/accessRightDataExample"
                  }
                }
              }
            }
          },
          "208": {
            "description": "Access right with provided access right item id already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessRightData"
                },
                "examples": {
                  "accessRightDataExample": {
                    "$ref": "#/components/examples/accessRightDataExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/accessRights/{customerId}/{accessRightUniqueId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/customerIdPath"
        },
        {
          "$ref": "#/components/parameters/accessRightUniqueIdPath"
        }
      ],
      "put": {
        "summary": "Update customer access right",
        "operationId": "updateAccessRightForCustomer",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Access Rights"
        ],
        "description": "Updates an access right item with the data provided for a customer identified by the passed customer id.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessRightItemCreation"
              },
              "examples": {
                "accessRightExample": {
                  "$ref": "#/components/examples/accessRightCreationExample"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Access right item was successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessRightData"
                },
                "examples": {
                  "accessRightDataExample": {
                    "$ref": "#/components/examples/accessRightDataExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete customer access right",
        "operationId": "deleteAccessRightForCustomer",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Access Rights"
        ],
        "description": "Delete an access right item for a customer identified by the passed customer id.\n",
        "responses": {
          "202": {
            "description": "Access right item was successfully deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessStatus"
                },
                "examples": {
                  "sessionExample": {
                    "$ref": "#/components/examples/successStatusExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/accessRights/{customerId}/{accessRightUniqueId}/{itemId}/block": {
      "parameters": [
        {
          "$ref": "#/components/parameters/customerIdPath"
        },
        {
          "$ref": "#/components/parameters/accessRightUniqueIdPath"
        },
        {
          "$ref": "#/components/parameters/itemIdPath"
        }
      ],
      "put": {
        "summary": "Block customer access right item",
        "operationId": "blockCustomerAccessRightItem",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Access Rights"
        ],
        "description": "Block a access right item of type EXTERNAL or SINGLE_PRODUCT for a customer.\n",
        "responses": {
          "202": {
            "description": "Access right item was successfully blocked.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessStatus"
                },
                "examples": {
                  "successStatusExample": {
                    "$ref": "#/components/examples/successStatusExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/accessRights/{customerId}/{accessRightUniqueId}/{itemId}/unblock": {
      "parameters": [
        {
          "$ref": "#/components/parameters/customerIdPath"
        },
        {
          "$ref": "#/components/parameters/accessRightUniqueIdPath"
        },
        {
          "$ref": "#/components/parameters/itemIdPath"
        }
      ],
      "put": {
        "summary": "Unblock customer access right item",
        "operationId": "unblockCustomerAccessRightItem",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Access Rights"
        ],
        "description": "Unblock a access right item of type EXTERNAL or SINGLE_PRODUCT for a customer.\n",
        "responses": {
          "202": {
            "description": "Access right item was successfully unblocked.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessStatus"
                },
                "examples": {
                  "successStatusExample": {
                    "$ref": "#/components/examples/successStatusExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/accessRights/{customerId}/hasAccess": {
      "parameters": [
        {
          "$ref": "#/components/parameters/customerIdPath"
        },
        {
          "$ref": "#/components/parameters/accessRightUniqueIdsQuery"
        }
      ],
      "get": {
        "summary": "Check customer has access",
        "operationId": "checkAccessOfCustomer",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Access Rights"
        ],
        "description": "Check if customer has a valid access right for one or multiple access rights identified by the provided access right unique ids.\n",
        "responses": {
          "200": {
            "description": "Contains detailed information about the allowed accesses of a customer.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessRightDataGranted"
                },
                "examples": {
                  "accessRightDataExample": {
                    "$ref": "#/components/examples/accessRightDataGrantedExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/accounting/costCenters": {
      "get": {
        "summary": "Search cost centers",
        "operationId": "searchCostCenters",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Accounting"
        ],
        "description": "Search all cost centers that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CostCenters"
                },
                "examples": {
                  "costCentersExample": {
                    "$ref": "#/components/examples/costCentersExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create cost center",
        "operationId": "createCostCenter",
        "tags": [
          "Accounting"
        ],
        "description": "Create a new cost center with the data provided.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CostCenterCreation"
              },
              "examples": {
                "costCenterCreationExample": {
                  "$ref": "#/components/examples/costCenterCreationExample"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Cost center that was created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CostCenter"
                },
                "examples": {
                  "costCenterExample": {
                    "$ref": "#/components/examples/costCenterExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/accounting/costCenters/{costCenterId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/costCenterIdPath"
        }
      ],
      "get": {
        "summary": "Get cost center",
        "operationId": "getCostCenter",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Accounting"
        ],
        "description": "Get cost center that is identified by the passed cost center id.\n",
        "responses": {
          "200": {
            "description": "Returns cost center details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CostCenter"
                },
                "examples": {
                  "costCenterExample": {
                    "$ref": "#/components/examples/costCenterExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update cost center",
        "operationId": "updateCostCenter",
        "tags": [
          "Accounting"
        ],
        "description": "Update an cost center that is identified by the passed cost center id with the data provided.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CostCenterCreation"
              },
              "examples": {
                "costCenterExample": {
                  "$ref": "#/components/examples/costCenterCreationExample"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Cost center that was updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CostCenter"
                },
                "examples": {
                  "costCenterExample": {
                    "$ref": "#/components/examples/costCenterExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/accounting/ledgers": {
      "get": {
        "summary": "Search ledgers",
        "operationId": "searchLedgers",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Accounting"
        ],
        "description": "Search all ledgers that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ledgers"
                },
                "examples": {
                  "ledgersExample": {
                    "$ref": "#/components/examples/ledgersExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create ledger",
        "operationId": "createLedger",
        "tags": [
          "Accounting"
        ],
        "description": "Create a new ledger with the data provided.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LedgerCreation"
              },
              "examples": {
                "ledgerCreationExample": {
                  "$ref": "#/components/examples/ledgerCreationExample"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Ledger that was created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ledger"
                },
                "examples": {
                  "ledgerExample": {
                    "$ref": "#/components/examples/ledgerExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/accounting/ledgers/{ledgerId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/ledgerIdPath"
        }
      ],
      "get": {
        "summary": "Get ledger",
        "operationId": "getLedger",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Accounting"
        ],
        "description": "Get ledger that is identified by the passed ledger id.\n",
        "responses": {
          "200": {
            "description": "Returns ledger details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ledger"
                },
                "examples": {
                  "ledgerExample": {
                    "$ref": "#/components/examples/ledgerExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update ledger",
        "operationId": "updateLedger",
        "tags": [
          "Accounting"
        ],
        "description": "Update an ledger that is identified by the passed ledger id with the data provided.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LedgerCreation"
              },
              "examples": {
                "ledgerExample": {
                  "$ref": "#/components/examples/ledgerExample"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ledger that was updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ledger"
                },
                "examples": {
                  "ledgerExample": {
                    "$ref": "#/components/examples/ledgerExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete ledger",
        "operationId": "deleteLedger",
        "tags": [
          "Accounting"
        ],
        "description": "Delete an ledger that is identified by the passed ledger id.\n",
        "responses": {
          "202": {
            "description": "Returns deletion status.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessStatus"
                },
                "examples": {
                  "successStatusExample": {
                    "$ref": "#/components/examples/successStatusExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/accounting/taxCodes": {
      "get": {
        "summary": "Search tax codes",
        "operationId": "searchTaxCodes",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Accounting"
        ],
        "description": "Search all tax codes that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxCodes"
                },
                "examples": {
                  "taxCodesExample": {
                    "$ref": "#/components/examples/taxCodesExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create tax code",
        "operationId": "createTaxCode",
        "tags": [
          "Accounting"
        ],
        "description": "Create a new tax code with the data provided.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaxCodeCreation"
              },
              "examples": {
                "taxCodeCreationExample": {
                  "$ref": "#/components/examples/taxCodeCreationExample"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Tax code that was created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxCode"
                },
                "examples": {
                  "taxCodeExample": {
                    "$ref": "#/components/examples/taxCodeExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/accounting/taxCodes/{taxCodeId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/taxCodeIdPath"
        }
      ],
      "get": {
        "summary": "Get the tax code",
        "operationId": "getTaxCode",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Accounting"
        ],
        "description": "Get tax code that is identified by the passed tax code id.\n",
        "responses": {
          "200": {
            "description": "Returns tax code details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxCode"
                },
                "examples": {
                  "taxCodeExample": {
                    "$ref": "#/components/examples/taxCodeExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem."
          }
        }
      },
      "put": {
        "summary": "Update tax code",
        "operationId": "updateTaxCode",
        "tags": [
          "Accounting"
        ],
        "description": "Update an tax code that is identified by the passed tax code id with the data provided.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaxCodeCreation"
              },
              "examples": {
                "taxCodeExample": {
                  "$ref": "#/components/examples/taxCodeExample"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tax code that was updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxCode"
                },
                "examples": {
                  "taxCodeExample": {
                    "$ref": "#/components/examples/taxCodeExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete tax code",
        "operationId": "deleteTaxCode",
        "tags": [
          "Accounting"
        ],
        "description": "Delete an tax code that is identified by the passed tax code id.\n",
        "responses": {
          "202": {
            "description": "Returns deletion status.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessStatus"
                },
                "examples": {
                  "successStatusExample": {
                    "$ref": "#/components/examples/successStatusExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/activities/{customerId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/customerIdPath"
        }
      ],
      "get": {
        "summary": "Search",
        "operationId": "searchActivities",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Activities"
        ],
        "description": "Search all accounting forms that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          },
          {
            "$ref": "#/components/parameters/jsonObjectTypeQuery"
          },
          {
            "$ref": "#/components/parameters/jsonObjectIdentifierQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Activities"
                },
                "examples": {
                  "activitiesExample": {
                    "$ref": "#/components/examples/activitiesExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/addresses": {
      "get": {
        "summary": "Search addresses",
        "operationId": "searchAddresses",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Addresses"
        ],
        "description": "Search all addresses that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Addresses"
                },
                "examples": {
                  "addressesExample": {
                    "$ref": "#/components/examples/addressesExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/overrideValidationQuery"
          }
        ],
        "summary": "Create address",
        "operationId": "createAddress",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Addresses"
        ],
        "description": "Create a new address with the data provided.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddressCreation"
              },
              "examples": {
                "addressCreationExample": {
                  "$ref": "#/components/examples/addressCreationExample"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Address that was created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                },
                "examples": {
                  "addressExample": {
                    "$ref": "#/components/examples/addressExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/addresses/{addressId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/addressIdPath"
        }
      ],
      "get": {
        "summary": "Get address",
        "operationId": "getAddressById",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Addresses"
        ],
        "description": "Get address that is identified by the passed address id.\n",
        "responses": {
          "200": {
            "description": "Returns address detail.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                },
                "examples": {
                  "addressExample": {
                    "$ref": "#/components/examples/addressExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/overrideValidationQuery"
          }
        ],
        "summary": "Update address",
        "operationId": "updateAddressById",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Addresses"
        ],
        "description": "Update an address that is identified by the passed address id with the data provided. If fields were filled before and are now passed empty these\nfields will be cleared.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddressChange"
              },
              "examples": {
                "addressChangeExample": {
                  "$ref": "#/components/examples/addressChangeExample"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Address that was updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                },
                "examples": {
                  "addressExample": {
                    "$ref": "#/components/examples/addressExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete address",
        "operationId": "deleteAddressById",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Addresses"
        ],
        "description": "Delete an address that is identified by the passed address id. Only addresses that are not associated with a subscription can be deleted. \nIf such an address shall be deleted it must first be disconnected from the subscription.\n",
        "responses": {
          "202": {
            "description": "Returns deletion status.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessStatus"
                },
                "examples": {
                  "sessionExample": {
                    "$ref": "#/components/examples/successStatusExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/addresses/{addressId}/futureAddresses": {
      "parameters": [
        {
          "$ref": "#/components/parameters/addressIdPath"
        }
      ],
      "get": {
        "summary": "Get future addresses",
        "operationId": "getFutureAddresses",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Addresses"
        ],
        "description": "Get all future addresses that correspond to the given address id.\n",
        "responses": {
          "200": {
            "description": "Returns future addresses.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FutureAddresses"
                },
                "examples": {
                  "addressesExample": {
                    "$ref": "#/components/examples/futureAddressesExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo merchant user session provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/addresses/{addressId}/futureAddresses/{date}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/addressIdPath"
        },
        {
          "$ref": "#/components/parameters/datePath"
        }
      ],
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/overrideValidationQuery"
          }
        ],
        "summary": "Create future address",
        "operationId": "createFutureAddress",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Addresses"
        ],
        "description": "Create a new future address with the data provided. A address can only have two future addresses\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddressBase"
              },
              "examples": {
                "addressExample": {
                  "$ref": "#/components/examples/futureAddressCreationExample"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Address that was created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FutureAddress"
                },
                "examples": {
                  "futureAddressExample": {
                    "$ref": "#/components/examples/futureAddressExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo merchant user session provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/overrideValidationQuery"
          }
        ],
        "summary": "Update future address",
        "operationId": "updateFutureAddress",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Addresses"
        ],
        "description": "Update an future address that is identified by the passed date with the data provided. If fields were filled before and are now passed empty these\nfields will be cleared.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddressBase"
              },
              "examples": {
                "addressExample": {
                  "$ref": "#/components/examples/futureAddressCreationExample"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Future address that was updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FutureAddress"
                },
                "examples": {
                  "futureAddressExample": {
                    "$ref": "#/components/examples/futureAddressExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo merchant user session provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete future address",
        "operationId": "deleteFutureAddress",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Addresses"
        ],
        "description": "Delete an future address that is identified by the passed date.\n",
        "responses": {
          "202": {
            "description": "Returns deletion status.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessStatus"
                },
                "examples": {
                  "successStatusExample": {
                    "$ref": "#/components/examples/successStatusExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo merchant user session provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "409": {
            "description": "Address cannot be deleted because it is used by a subscription.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/addresses/{addressId}/validate": {
      "parameters": [
        {
          "$ref": "#/components/parameters/addressIdPath"
        }
      ],
      "post": {
        "summary": "Validate address by id",
        "operationId": "validateAddressById",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Addresses"
        ],
        "description": "<span style=\"color:red\">**Important note: The use of these API endpoints is a chargeable service provided by plenigo GmbH. The billing is done according to the current price\n       list, which you can find in the settings section of your plenigo account. The billing is done with the monthly invoice.**</span>\n\nValidates the address with the given id.\n",
        "responses": {
          "200": {
            "description": "Address validation result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                },
                "examples": {
                  "addressExample": {
                    "$ref": "#/components/examples/addressExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "402": {
            "description": "This API call is part of a paid feature. The according module must be purchased in the plenigo backend before the API call can be used."
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/addresses/wbz": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/overrideValidationQuery"
          }
        ],
        "summary": "Create wbz address",
        "operationId": "createWbzAddress",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Addresses"
        ],
        "description": "Create a new wbz address with the data provided.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WbzAddressCreation"
              },
              "examples": {
                "addressCreationExample": {
                  "$ref": "#/components/examples/addressCreationExample"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Address that was created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                },
                "examples": {
                  "addressExample": {
                    "$ref": "#/components/examples/addressExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/addresses/validate": {
      "post": {
        "summary": "Validate address data",
        "operationId": "validateAddress",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Addresses"
        ],
        "description": "<span style=\"color:red\">**Important note: The use of these API endpoints is a chargeable service provided by plenigo GmbH. The billing is done according to the current price\n       list, which you can find in the settings section of your plenigo account. The billing is done with the monthly invoice.**</span>\nValidates the address with the data provided.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddressCreation"
              },
              "examples": {
                "addressCreationExample": {
                  "$ref": "#/components/examples/addressCreationExample"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Address validation result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                },
                "examples": {
                  "addressExample": {
                    "$ref": "#/components/examples/addressExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "402": {
            "description": "This API call is part of a paid feature. The according module must be purchased in the plenigo backend before the API call can be used."
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/analytics/customers/registrations": {
      "get": {
        "summary": "Get customer registrations",
        "operationId": "getCustomerRegistrationStatistics",
        "tags": [
          "Analytics"
        ],
        "description": "Get statistical information about new customer registrations within the defined time range.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/analyticsCalculationDateQuery"
          },
          {
            "$ref": "#/components/parameters/analyticsIntervalQuery"
          },
          {
            "$ref": "#/components/parameters/analyticsSizeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns statistic data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalyticsCountResult"
                },
                "examples": {
                  "analyticsCountResultExample": {
                    "$ref": "#/components/examples/analyticsCountResultExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "402": {
            "description": "This API call is part of a paid feature. The according module must be purchased in the plenigo backend before the API call can be used."
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/analytics/invoices/paymentMethods": {
      "get": {
        "summary": "Get invoice payment methods",
        "operationId": "getInvoicePaymentMethodStatistics",
        "tags": [
          "Analytics"
        ],
        "description": "Get statistical information about invoice payment methods within the defined time range.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/analyticsCalculationDateQuery"
          },
          {
            "$ref": "#/components/parameters/analyticsIntervalQuery"
          },
          {
            "$ref": "#/components/parameters/analyticsSizeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns statistic data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalyticsPaymentMethodResult"
                },
                "examples": {
                  "analyticsRevenueResultExample": {
                    "$ref": "#/components/examples/analyticsPaymentMethodResultExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "402": {
            "description": "This API call is part of a paid feature. The according module must be purchased in the plenigo backend before the API call can be used."
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/analytics/invoices/revenues": {
      "get": {
        "summary": "Get invoice revenues",
        "operationId": "getInvoiceRevenueStatistics",
        "tags": [
          "Analytics"
        ],
        "description": "Get statistical information about invoice revenues within the defined time range.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/analyticsCalculationDateQuery"
          },
          {
            "$ref": "#/components/parameters/analyticsIntervalQuery"
          },
          {
            "$ref": "#/components/parameters/analyticsSizeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns statistic data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalyticsRevenueResult"
                },
                "examples": {
                  "analyticsRevenueResultExample": {
                    "$ref": "#/components/examples/analyticsRevenueResultExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "402": {
            "description": "This API call is part of a paid feature. The according module must be purchased in the plenigo backend before the API call can be used."
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/analytics/orders/creations": {
      "get": {
        "summary": "Get order creations",
        "operationId": "getOrderCreationStatistics",
        "tags": [
          "Analytics"
        ],
        "description": "Get statistical information about new orders within the defined time range.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/analyticsCalculationDateQuery"
          },
          {
            "$ref": "#/components/parameters/analyticsIntervalQuery"
          },
          {
            "$ref": "#/components/parameters/analyticsSizeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns statistic data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalyticsCountResult"
                },
                "examples": {
                  "analyticsCountResultExample": {
                    "$ref": "#/components/examples/analyticsCountResultExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "402": {
            "description": "This API call is part of a paid feature. The according module must be purchased in the plenigo backend before the API call can be used."
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/analytics/subscriptions/active": {
      "get": {
        "summary": "Get active subscriptions",
        "operationId": "getActiveSubscriptions",
        "tags": [
          "Analytics"
        ],
        "description": "Get statistical information about active subscription chains within the defined time range.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/analyticsCalculationDateQuery"
          },
          {
            "$ref": "#/components/parameters/analyticsIntervalQuery"
          },
          {
            "$ref": "#/components/parameters/analyticsSizeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns statistic data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalyticsCountResult"
                },
                "examples": {
                  "analyticsCountResultExample": {
                    "$ref": "#/components/examples/analyticsCountResultExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "402": {
            "description": "This API call is part of a paid feature. The according module must be purchased in the plenigo backend before the API call can be used."
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/analytics/subscriptions/cancellations": {
      "get": {
        "summary": "Get cancelled subscriptions",
        "operationId": "getCancelledSubscriptions",
        "tags": [
          "Analytics"
        ],
        "description": "Get statistical information about cancelled subscription chains within the defined time range.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/analyticsCalculationDateQuery"
          },
          {
            "$ref": "#/components/parameters/analyticsIntervalQuery"
          },
          {
            "$ref": "#/components/parameters/analyticsSizeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns statistic data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalyticsCountResult"
                },
                "examples": {
                  "analyticsCountResultExample": {
                    "$ref": "#/components/examples/analyticsCountResultExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "402": {
            "description": "This API call is part of a paid feature. The according module must be purchased in the plenigo backend before the API call can be used."
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/analytics/subscriptions/cancellationReasons": {
      "get": {
        "summary": "Get subscription cancellation reasons",
        "operationId": "getSubscriptionsCancellationReasons",
        "tags": [
          "Analytics"
        ],
        "description": "Get statistical information about cancelled subscription chains within the defined time range.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/analyticsCalculationDateQuery"
          },
          {
            "$ref": "#/components/parameters/analyticsIntervalQuery"
          },
          {
            "$ref": "#/components/parameters/analyticsSizeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns statistic data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalyticsGroupResult"
                },
                "examples": {
                  "analyticsCountResultExample": {
                    "$ref": "#/components/examples/analyticsGroupResultExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/analytics/subscriptions/ended": {
      "get": {
        "summary": "Get ended subscriptions",
        "operationId": "getEndedSubscriptions",
        "tags": [
          "Analytics"
        ],
        "description": "Get statistical information about ended subscription chains within the defined time range.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/analyticsCalculationDateQuery"
          },
          {
            "$ref": "#/components/parameters/analyticsIntervalQuery"
          },
          {
            "$ref": "#/components/parameters/analyticsSizeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns statistic data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalyticsCountResult"
                },
                "examples": {
                  "analyticsCountResultExample": {
                    "$ref": "#/components/examples/analyticsCountResultExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "402": {
            "description": "This API call is part of a paid feature. The according module must be purchased in the plenigo backend before the API call can be used."
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/analytics/subscriptions/new": {
      "get": {
        "summary": "Get new subscriptions",
        "operationId": "getNewSubscriptionsStatistics",
        "tags": [
          "Analytics"
        ],
        "description": "Get statistical information about new subscriptions within the defined time range.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/analyticsCalculationDateQuery"
          },
          {
            "$ref": "#/components/parameters/analyticsIntervalQuery"
          },
          {
            "$ref": "#/components/parameters/analyticsSizeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns statistic data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalyticsCountResult"
                },
                "examples": {
                  "analyticsCountResultExample": {
                    "$ref": "#/components/examples/analyticsCountResultExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method."
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/analytics/subscriptions/paymentPeriods": {
      "get": {
        "summary": "Get all payment periods",
        "operationId": "getAllPaymentPeriodsStatistics",
        "tags": [
          "Analytics"
        ],
        "description": "Get statistical information about all payment periods within the defined time range.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/analyticsCalculationDateQuery"
          },
          {
            "$ref": "#/components/parameters/analyticsIntervalQuery"
          },
          {
            "$ref": "#/components/parameters/analyticsSizeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns statistic data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalyticsPaymentPeriodsResult"
                },
                "examples": {
                  "analyticsPaymentPeriodsResultExample": {
                    "$ref": "#/components/examples/analyticsPaymentPeriodsResultExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/analytics/subscriptions/paymentPeriods/failure": {
      "get": {
        "summary": "Get failed payment periods",
        "operationId": "getFailedPaymentPeriodsStatistics",
        "tags": [
          "Analytics"
        ],
        "description": "Get statistical information about failed payment periods within the defined time range.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/analyticsCalculationDateQuery"
          },
          {
            "$ref": "#/components/parameters/analyticsIntervalQuery"
          },
          {
            "$ref": "#/components/parameters/analyticsSizeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns statistic data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalyticsPaymentPeriodsResult"
                },
                "examples": {
                  "analyticsPaymentPeriodsResultExample": {
                    "$ref": "#/components/examples/analyticsPaymentPeriodsResultExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/analytics/subscriptions/paymentPeriods/success": {
      "get": {
        "summary": "Get succeeded payment periods",
        "operationId": "getSucceededPaymentPeriodsStatistics",
        "tags": [
          "Analytics"
        ],
        "description": "Get statistical information about succeeded payment periods within the defined time range.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/analyticsCalculationDateQuery"
          },
          {
            "$ref": "#/components/parameters/analyticsIntervalQuery"
          },
          {
            "$ref": "#/components/parameters/analyticsSizeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns statistic data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalyticsPaymentPeriodsResult"
                },
                "examples": {
                  "analyticsPaymentPeriodsResultExample": {
                    "$ref": "#/components/examples/analyticsPaymentPeriodsResultExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/analytics/transactions": {
      "get": {
        "summary": "Get transactions",
        "operationId": "getTransactionsStatistics",
        "tags": [
          "Analytics"
        ],
        "description": "Get statistical information about transactions within the defined time range.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/analyticsCalculationDateQuery"
          },
          {
            "$ref": "#/components/parameters/analyticsIntervalQuery"
          },
          {
            "$ref": "#/components/parameters/analyticsSizeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns statistic data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalyticsTransactionsResult"
                },
                "examples": {
                  "analyticsTransactionsResultExample": {
                    "$ref": "#/components/examples/analyticsTransactionsResultExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/analytics/transactions/customerReturns": {
      "get": {
        "summary": "Get customer return transactions",
        "operationId": "getCustomerReturnTransactionsStatistics",
        "tags": [
          "Analytics"
        ],
        "description": "Get statistical information about customer return transactions within the defined time range.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/analyticsCalculationDateQuery"
          },
          {
            "$ref": "#/components/parameters/analyticsIntervalQuery"
          },
          {
            "$ref": "#/components/parameters/analyticsSizeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns statistic data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalyticsTransactionsResult"
                },
                "examples": {
                  "analyticsTransactionsResultExample": {
                    "$ref": "#/components/examples/analyticsTransactionsResultExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/appStores/appleAppStore": {
      "get": {
        "summary": "Search Apple purchases",
        "operationId": "searchAppleAppStorePurchases",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "App Stores"
        ],
        "description": "Search all Apple purchases that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          },
          {
            "$ref": "#/components/parameters/tokenQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppleAppStorePurchases"
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Add Apple purchase",
        "operationId": "addAppleAppStorePurchase",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "App Stores"
        ],
        "description": "Add an Apple app store purchase to the plenigo system and retrieve a token for further processing.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppleAppStorePurchaseAddition"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Purchase data.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/AppStorePurchase"
                    },
                    {
                      "$ref": "#/components/schemas/AppStorePurchaseList"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/appStores/appleAppStore/{appleAppStorePurchaseId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/appleAppStorePurchaseIdPath"
        }
      ],
      "get": {
        "summary": "Get Apple purchase",
        "operationId": "getAppleAppStorePurchase",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "App Stores"
        ],
        "description": "Get details for an Apple app store purchase.\n",
        "responses": {
          "200": {
            "description": "Purchase details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppleAppStorePurchase"
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/appStores/appleAppStore/{token}/associate": {
      "parameters": [
        {
          "$ref": "#/components/parameters/appStoreTokenPath"
        }
      ],
      "post": {
        "summary": "Associate Apple purchase",
        "operationId": "associateAppleAppStorePurchase",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "App Stores"
        ],
        "description": "Associate an Apple app store purchase with a customer. Only app store purchases that include actual orders can be associated.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppStoreAssociation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Purchase data.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/AppStorePurchase"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/appStores/appleAppStore/{token}/dissociate": {
      "parameters": [
        {
          "$ref": "#/components/parameters/appStoreTokenPath"
        }
      ],
      "delete": {
        "summary": "Dissociate Apple purchase",
        "operationId": "dissociateAppleAppStorePurchase",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "App Stores"
        ],
        "description": "Dissociate an Apple app store purchase from a customer.\n",
        "responses": {
          "202": {
            "description": "Apple app store purchase was successfully dissociated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessStatus"
                },
                "examples": {
                  "successStatusExample": {
                    "$ref": "#/components/examples/successStatusExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/appStores/appleAppStore/{token}/verify": {
      "parameters": [
        {
          "$ref": "#/components/parameters/appStoreTokenPath"
        }
      ],
      "get": {
        "summary": "Verify Apple purchase",
        "operationId": "verifyAppleAppStorePurchase",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "App Stores"
        ],
        "description": "Verify validity of Apple app store purchase.\n",
        "responses": {
          "200": {
            "description": "Purchase data.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/AppStorePurchase"
                    },
                    {
                      "$ref": "#/components/schemas/AppStorePurchaseList"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/appStores/googlePlayStore": {
      "get": {
        "summary": "Search Google Playstore purchases",
        "operationId": "searchGooglePlayStorePurchases",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "App Stores"
        ],
        "description": "Search all Google Playstore purchases that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          },
          {
            "$ref": "#/components/parameters/tokenQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GooglePlayStorePurchases"
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Add Google purchase",
        "operationId": "addGooglePlaystorePurchase",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "App Stores"
        ],
        "description": "Add a Google Playstore purchase to the plenigo system and retrieve a token for further processing.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GooglePlayStorePurchaseAddition"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Purchase data.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/AppStorePurchase"
                    },
                    {
                      "$ref": "#/components/schemas/AppStorePurchaseList"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/appStores/googlePlayStore/{googlePlayStorePurchaseId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/googlePlayStorePurchaseIdPath"
        }
      ],
      "get": {
        "summary": "Get Google Playstore purchase",
        "operationId": "getGooglePlayStorePurchase",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "App Stores"
        ],
        "description": "Get details for an Google Playstore purchase.\n",
        "responses": {
          "200": {
            "description": "Purchase details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GooglePlayStorePurchase"
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/appStores/googlePlayStore/{token}/associate": {
      "parameters": [
        {
          "$ref": "#/components/parameters/appStoreTokenPath"
        }
      ],
      "post": {
        "summary": "Associate Google purchase",
        "operationId": "associateGooglePlaystorePurchase",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "App Stores"
        ],
        "description": "Associate a Google Playstore purchase with a customer.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppStoreAssociation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Purchase data.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/AppStorePurchase"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/appStores/googlePlayStore/{token}/dissociate": {
      "parameters": [
        {
          "$ref": "#/components/parameters/appStoreTokenPath"
        }
      ],
      "delete": {
        "summary": "Dissociate Google purchase",
        "operationId": "dissociateGooglePlaystorePurchase",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "App Stores"
        ],
        "description": "Dissociate a Google Playstore purchase from a customer.\n",
        "responses": {
          "202": {
            "description": "Google Playstore purchase was successfully dissociated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessStatus"
                },
                "examples": {
                  "successStatusExample": {
                    "$ref": "#/components/examples/successStatusExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/appStores/googlePlayStore/{token}/verify": {
      "parameters": [
        {
          "$ref": "#/components/parameters/appStoreTokenPath"
        }
      ],
      "get": {
        "summary": "Verify Google purchase",
        "operationId": "verifyGooglePlaystorePurchase",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "App Stores"
        ],
        "description": "Verify validity of Google Playstore purchase.\n",
        "responses": {
          "200": {
            "description": "Purchase data.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/AppStorePurchase"
                    },
                    {
                      "$ref": "#/components/schemas/AppStorePurchaseList"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/appStores/orders": {
      "get": {
        "summary": "Search app store order",
        "operationId": "searchAppStoreOrders",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "App Stores"
        ],
        "description": "Search all app store orders that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppStoreOrders"
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/appStores/orders/{appStoreOrderId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/appStoreOrderIdPath"
        }
      ],
      "get": {
        "summary": "Get app store order",
        "operationId": "getAppStoreOrder",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "App Stores"
        ],
        "description": "Get details for an app store order.\n",
        "responses": {
          "200": {
            "description": "Purchase details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppStoreOrder"
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/appStores/subscriptions": {
      "get": {
        "summary": "Search app store subscription",
        "operationId": "searchAppStoreSubscriptions",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "App Stores"
        ],
        "description": "Search all app store subscriptions that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppStoreSubscriptions"
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/appStores/subscriptions/{appStoreSubscriptionId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/appStoreSubscriptionIdPath"
        }
      ],
      "get": {
        "summary": "Get app store subscription",
        "operationId": "getAppStoreSubscription",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "App Stores"
        ],
        "description": "Get details for an app store subscription.\n",
        "responses": {
          "200": {
            "description": "Purchase details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppStoreSubscription"
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/callbacks/logs": {
      "get": {
        "summary": "Search",
        "operationId": "searchCallbackLogs",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Callback Logs"
        ],
        "description": "Search all callback log entries that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          },
          {
            "$ref": "#/components/parameters/entityTypeQuery"
          },
          {
            "$ref": "#/components/parameters/callbackTypeQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CallbackLogEntries"
                },
                "examples": {
                  "callbackLogEntriesExample": {
                    "$ref": "#/components/examples/callbackLogEntriesExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/callbacks/logs/{callbackLogEntryId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/callbackLogEntryIdPath"
        }
      ],
      "get": {
        "summary": "Get",
        "operationId": "getCallbackLog",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Callback Logs"
        ],
        "description": "Get callback log entry that is identified by the passed callback log entry id.\n",
        "responses": {
          "200": {
            "description": "Returns callback log entry details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CallbackLogEntry"
                },
                "examples": {
                  "callbackLogEntryExample": {
                    "$ref": "#/components/examples/callbackLogEntryExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/downloads": {
      "get": {
        "summary": "Search",
        "operationId": "searchDownloads",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Downloads"
        ],
        "description": "Search all downloads log entries that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/downloadTypeQuery"
          },
          {
            "$ref": "#/components/parameters/fileTypeQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Downloads"
                },
                "examples": {
                  "downloadsExample": {
                    "$ref": "#/components/examples/downloadsExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/downloads/{downloadId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/downloadIdPath"
        }
      ],
      "get": {
        "summary": "Get",
        "operationId": "getDownload",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Downloads"
        ],
        "description": "Get download that is identified by the passed download id.\n",
        "responses": {
          "200": {
            "description": "Returns download details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Download"
                },
                "examples": {
                  "callbackLogEntryExample": {
                    "$ref": "#/components/examples/downloadExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/downloads/{downloadId}/file": {
      "parameters": [
        {
          "$ref": "#/components/parameters/downloadIdPath"
        }
      ],
      "get": {
        "summary": "Get file",
        "operationId": "getDownloadFile",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Downloads"
        ],
        "description": "Get download file that is identified by the passed download id.\n",
        "responses": {
          "200": {
            "description": "Returns download file details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DownloadFile"
                },
                "examples": {
                  "callbackLogEntryExample": {
                    "$ref": "#/components/examples/downloadFileExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/checkout/buyWithVoucher": {
      "post": {
        "summary": "Voucher purchase",
        "operationId": "voucherPurchase",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Checkout"
        ],
        "description": "Executes a purchase for the product represented by the provided voucher code. Only products that are completely free and have no follow up periods that\nmust be paid can be bought that way.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VoucherPurchase"
              },
              "examples": {
                "buyWithVoucherExample": {
                  "$ref": "#/components/examples/buyWithVoucherExample"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns the order id of the successful order.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutOrderIdResult"
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Voucher code provided is no longer valid or already used.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/checkout/orderFreeProduct": {
      "post": {
        "summary": "Order free product",
        "operationId": "orderFreeProduct",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Checkout"
        ],
        "description": "Purchases a free product for a given customer. The product must be free of charge and if it is a subscription all the steps must be free of charge.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FreeOrder"
              },
              "examples": {
                "freeOrderExample": {
                  "$ref": "#/components/examples/freeOrderExample"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns the order id of the successful order.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutOrderIdResult"
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/checkout/preparePurchase": {
      "post": {
        "summary": "Prepare purchase",
        "operationId": "preparePurchase",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Checkout"
        ],
        "description": "Prepares everything for a purchase that a customer is supposed to do. The purchase order id returned is only valid a limited time so this method\nshould be called in time before the customer is sent to the checkout.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckoutPreparation"
              },
              "examples": {
                "preparePurchaseWithPlenigoProductAndLoginExample": {
                  "$ref": "#/components/examples/preparePurchaseWithPlenigoProductAndLoginExample"
                },
                "preparePurchaseWithPlenigoProductAndExternalCustomerExample": {
                  "$ref": "#/components/examples/preparePurchaseWithPlenigoProductAndExternalCustomerExample"
                },
                "preparePurchaseWithPlenigoProductAndAdditionalDataExample": {
                  "$ref": "#/components/examples/preparePurchaseWithPlenigoProductAndAdditionalDataExample"
                },
                "preparePurchaseWithPlenigoProductAndPlenigoSessionExample": {
                  "$ref": "#/components/examples/preparePurchaseWithPlenigoProductAndPlenigoSessionExample"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns the purchase order id to start the purchase for the customer.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutPreparationResult"
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/corporateAccounts": {
      "get": {
        "summary": "Search",
        "operationId": "getCorporateAccounts",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Corporate Accounts"
        ],
        "description": "Search all corporate accounts that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/corporateAccountIdQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all corporate accounts.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CorporateAccounts"
                },
                "examples": {
                  "corporateAccountsDataExample": {
                    "$ref": "#/components/examples/corporateAccountsDataExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/corporateAccounts/{customerId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/customerIdPath"
        }
      ],
      "get": {
        "summary": "Get",
        "operationId": "getCorporateAccountsForCustomer",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Corporate Accounts"
        ],
        "description": "Search all corporate accounts of the customer that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all corporate accounts of the customer.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CorporateAccounts"
                },
                "examples": {
                  "corporateAccountsDataExample": {
                    "$ref": "#/components/examples/corporateAccountsDataExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/corporateAccounts/{customerId}/{corporateAccountId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/customerIdPath"
        },
        {
          "$ref": "#/components/parameters/corporateAccountIdPath"
        }
      ],
      "get": {
        "summary": "Get for customer",
        "operationId": "getCorporateAccountForCustomer",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Corporate Accounts"
        ],
        "description": "Get the corporate account of the customer.\n",
        "responses": {
          "200": {
            "description": "Returns the corporate account of the customer.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CorporateAccount"
                },
                "examples": {
                  "corporateAccountsDataExample": {
                    "$ref": "#/components/examples/corporateAccountDataExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/corporateAccounts/{customerId}/{corporateAccountId}/users": {
      "parameters": [
        {
          "$ref": "#/components/parameters/customerIdPath"
        },
        {
          "$ref": "#/components/parameters/corporateAccountIdPath"
        },
        {
          "$ref": "#/components/parameters/sendMailQuery"
        }
      ],
      "post": {
        "summary": "Create",
        "operationId": "createCorporateAccountUser",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Corporate Accounts"
        ],
        "description": "Create a corporate account user for the given corporate account.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CorporateAccountUserCreation"
              },
              "examples": {
                "corporateAccountUserDataExample": {
                  "$ref": "#/components/examples/corporateAccountUserDataExample"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns the corporate account.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CorporateAccount"
                },
                "examples": {
                  "corporateAccountDataExample": {
                    "$ref": "#/components/examples/corporateAccountDataExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "422": {
            "description": "User amount of this corporate account is exceeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/corporateAccounts/{customerId}/{corporateAccountId}/users/{corporateAccountUserId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/customerIdPath"
        },
        {
          "$ref": "#/components/parameters/corporateAccountIdPath"
        },
        {
          "$ref": "#/components/parameters/corporateAccountUserIdPath"
        }
      ],
      "delete": {
        "summary": "Delete",
        "operationId": "deleteCorporateAccountUser",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Corporate Accounts"
        ],
        "description": "Delete a corporate account user for the given corporate account.\n",
        "responses": {
          "201": {
            "description": "Returns the corporate account.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CorporateAccount"
                },
                "examples": {
                  "corporateAccountDataExample": {
                    "$ref": "#/components/examples/corporateAccountDataExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/corporateAccounts/{customerId}/{corporateAccountId}/users/{corporateAccountUserId}/resend": {
      "parameters": [
        {
          "$ref": "#/components/parameters/customerIdPath"
        },
        {
          "$ref": "#/components/parameters/corporateAccountIdPath"
        },
        {
          "$ref": "#/components/parameters/corporateAccountUserIdPath"
        }
      ],
      "put": {
        "summary": "Resend invitation email",
        "operationId": "resendCorporateAccountUserInvitationMail",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Corporate Accounts"
        ],
        "description": "Resend a corporate account user invitation email for the given corporate account.\n",
        "responses": {
          "200": {
            "description": "Invitation email was send.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessStatus"
                },
                "examples": {
                  "successStatusExample": {
                    "$ref": "#/components/examples/successStatusExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/corporateAccounts/{customerId}/code/use": {
      "parameters": [
        {
          "$ref": "#/components/parameters/customerIdPath"
        }
      ],
      "post": {
        "summary": "Use",
        "operationId": "useCorporateAccountCode",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Corporate Accounts"
        ],
        "description": "Use a corporate account user code.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CorporateAccountUserCode"
              },
              "examples": {
                "corporateAccountUserCodeDataExample": {
                  "$ref": "#/components/examples/corporateAccountUserCodeDataExample"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Corporate access rights are granted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessStatus"
                },
                "examples": {
                  "successStatusExample": {
                    "$ref": "#/components/examples/successStatusExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo customer session is not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/corporateAccounts/code/validate": {
      "post": {
        "summary": "Validate",
        "operationId": "checkCorporateAccountCodeValidity",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Corporate Accounts"
        ],
        "description": "Check if a corporate account user code is valid.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CorporateAccountUserCode"
              },
              "examples": {
                "corporateAccountUserCodeDataExample": {
                  "$ref": "#/components/examples/corporateAccountUserCodeDataExample"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the corporate account user status.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CorporateAccountUserStatus"
                },
                "examples": {
                  "corporateAccountDataExample": {
                    "$ref": "#/components/examples/corporateAccountUserStatusDataExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo customer session is not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "403": {
            "description": "User amount of this corporate account is exceeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CorporateAccountUserStatus"
                },
                "examples": {
                  "corporateAccountDataExample": {
                    "$ref": "#/components/examples/corporateAccountUserStatusDataExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customers": {
      "get": {
        "summary": "Search",
        "operationId": "searchCustomers",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Customers"
        ],
        "description": "Search all customers that correspond to the given search conditions. It is important to note that email, username, and\nexternalSystemid exclude each other so only one query parameter is used. The defined priority is email, username, externalSystemId.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          },
          {
            "$ref": "#/components/parameters/externalSystemIdQuery"
          },
          {
            "$ref": "#/components/parameters/emailQuery"
          },
          {
            "$ref": "#/components/parameters/usernameQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customers"
                },
                "examples": {
                  "customersExample": {
                    "$ref": "#/components/examples/customersExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create",
        "operationId": "createCustomer",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Customers"
        ],
        "description": "Create a new customer with the data provided.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerCreation"
              },
              "examples": {
                "customerCreationExample": {
                  "$ref": "#/components/examples/customerCreationExample"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Customer that was created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                },
                "examples": {
                  "customerCreationResultExample": {
                    "$ref": "#/components/examples/customerCreationResultExample"
                  }
                }
              }
            }
          },
          "208": {
            "description": "Returns existing customer if a customer with same email and id already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                },
                "examples": {
                  "customerCreationResultExample": {
                    "$ref": "#/components/examples/customerCreationResultExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customers/additionalData": {
      "get": {
        "summary": "Search additional data",
        "operationId": "searchCustomerAdditionalData",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Customers"
        ],
        "description": "Search all additional data of customers.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdditionalCustomerDataList"
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo merchant user session provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customerId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/customerIdPath"
        }
      ],
      "get": {
        "summary": "Get",
        "operationId": "getCustomer",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Customers"
        ],
        "description": "Get customer that is identified by the passed customer id.\n",
        "responses": {
          "200": {
            "description": "Returns customer details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                },
                "examples": {
                  "customerExample": {
                    "$ref": "#/components/examples/customerExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update",
        "operationId": "updateCustomer",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Customers"
        ],
        "description": "Update a customer that is identified by the passed customer id with the data provided.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerChange"
              },
              "examples": {
                "customerChangeExample": {
                  "$ref": "#/components/examples/customerChangeExample"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Customer that was updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                },
                "examples": {
                  "customerExample": {
                    "$ref": "#/components/examples/customerExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/forceDeletionQuery"
          }
        ],
        "summary": "Delete",
        "operationId": "deleteCustomer",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Customers"
        ],
        "description": "Delete a customer. This is only possible if customer has no payments done yet.\n",
        "responses": {
          "202": {
            "description": "Returns deletion status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessStatus"
                },
                "examples": {
                  "successStatusExample": {
                    "$ref": "#/components/examples/successStatusExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customerId}/accessRights": {
      "parameters": [
        {
          "$ref": "#/components/parameters/customerIdPath"
        }
      ],
      "get": {
        "summary": "Get access rights",
        "operationId": "getCustomerAccessRights",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Customers"
        ],
        "description": "Get access rights associated with a customer.\n",
        "responses": {
          "200": {
            "description": "Returns access rights.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessRightData"
                },
                "examples": {
                  "accessRightDataExample": {
                    "$ref": "#/components/examples/accessRightDataExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customerId}/additionalData": {
      "parameters": [
        {
          "$ref": "#/components/parameters/customerIdPath"
        }
      ],
      "get": {
        "summary": "Get additional data",
        "operationId": "getCustomerAdditionalData",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Customers"
        ],
        "description": "Returns additional data associated with the customer associated with the provided customer id.\n",
        "responses": {
          "200": {
            "description": "Returns additional data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdditionalCustomerData"
                },
                "examples": {
                  "additionalCustomerDataExample": {
                    "$ref": "#/components/examples/additionalCustomerDataExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Replace additional data",
        "operationId": "replaceAdditionalData",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Customers"
        ],
        "description": "Replace additional data of a customer. All data will be replaced with the new data provided.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdditionalCustomerData"
              },
              "examples": {
                "additionalCustomerDataExample": {
                  "$ref": "#/components/examples/additionalCustomerDataExample"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns additional data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdditionalCustomerData"
                },
                "examples": {
                  "additionalCustomerDataExample": {
                    "$ref": "#/components/examples/additionalCustomerDataExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customerId}/appStoreOrders": {
      "parameters": [
        {
          "$ref": "#/components/parameters/customerIdPath"
        }
      ],
      "get": {
        "summary": "Search customer's app store orders",
        "operationId": "searchCustomerAppStoreOrders",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Customers"
        ],
        "description": "Search all app store orders that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppStoreOrders"
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customerId}/appStoreSubscriptions": {
      "parameters": [
        {
          "$ref": "#/components/parameters/customerIdPath"
        }
      ],
      "get": {
        "summary": "Search customer's app store subscriptions",
        "operationId": "searchCustomerAppStoreSubscriptions",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Customers"
        ],
        "description": "Search all app store subscriptions that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppStoreSubscriptions"
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customerId}/addresses": {
      "get": {
        "summary": "Search customer's addresses",
        "operationId": "searchCustomerAddresses",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Customers"
        ],
        "description": "Search all addresses that correspond to the given search conditions and belong to the customer identified by the customer id provided.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/customerIdPath"
          },
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns addresses.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Addresses"
                },
                "examples": {
                  "addressesExample": {
                    "$ref": "#/components/examples/addressesExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customerId}/dissociateAppStorePurchases": {
      "parameters": [
        {
          "$ref": "#/components/parameters/customerIdPath"
        }
      ],
      "delete": {
        "summary": "Dissociates all app store purchases",
        "operationId": "dissociateAppStorePurchases",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Customers"
        ],
        "description": "Dissociates all app store purchases of a customer.\n",
        "responses": {
          "202": {
            "description": "App store purchases dissociated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessStatus"
                },
                "examples": {
                  "sessionExample": {
                    "$ref": "#/components/examples/successStatusExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customerId}/email": {
      "parameters": [
        {
          "$ref": "#/components/parameters/customerIdPath"
        }
      ],
      "put": {
        "summary": "Change email",
        "operationId": "changeCustomerEmail",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Customers"
        ],
        "description": "Changes a customer's email\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerEmail"
              },
              "examples": {
                "customerEmailExample": {
                  "$ref": "#/components/examples/customerEmailExample"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Changed customer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customers"
                },
                "examples": {
                  "customersExample": {
                    "$ref": "#/components/examples/customersExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customerId}/gdprExport": {
      "parameters": [
        {
          "$ref": "#/components/parameters/customerIdPath"
        }
      ],
      "get": {
        "summary": "Create GDPR data",
        "operationId": "createCustomerGDPRData",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Customers"
        ],
        "description": "*ASYNC* Every call to this endpoint will return a promise ID and create a GDPR request callback that contains the customer data requested. The callback also returns the promise ID returned by this call to be identified.\nThis endpoint is highly limited because of its expensive nature. You can only call it three times every five seconds. Unlimited requests can be done by an agent via the plenigo merchant backend.\n",
        "responses": {
          "200": {
            "description": "Success with promise id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessStatus"
                },
                "examples": {
                  "successStatusExample": {
                    "$ref": "#/components/examples/successStatusWithPromiseIdExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo merchant user session provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customerId}/invoices": {
      "get": {
        "summary": "Search customer's invoices",
        "operationId": "searchCustomerInvoices",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Customers"
        ],
        "description": "Search all invoices that correspond to the given search conditions and belong to the customer identified by the customer id provided.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/customerIdPath"
          },
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns invoices.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoices"
                },
                "examples": {
                  "invoicesExample": {
                    "$ref": "#/components/examples/invoicesExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customerId}/invoiceEmail": {
      "parameters": [
        {
          "$ref": "#/components/parameters/customerIdPath"
        }
      ],
      "put": {
        "summary": "Change invoice email",
        "operationId": "changeCustomerInvoiceEmail",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Customers"
        ],
        "description": "Changes a customer's invoice email\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerInvoiceEmail"
              },
              "examples": {
                "customerInvoiceEmailExample": {
                  "$ref": "#/components/examples/customerInvoiceEmailExample"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Changed customer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customers"
                },
                "examples": {
                  "customersExample": {
                    "$ref": "#/components/examples/customersExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customerId}/foreignOrders": {
      "get": {
        "summary": "Search customer's foreign orders",
        "operationId": "searchCustomerForeignOrders",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Customers"
        ],
        "description": "Search all foreign orders that correspond to the given search conditions and belong to the customer identified by the customer id provided.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/customerIdPath"
          },
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns foreign orders.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Orders"
                },
                "examples": {
                  "ordersExample": {
                    "$ref": "#/components/examples/ordersExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customerId}/optIns": {
      "parameters": [
        {
          "$ref": "#/components/parameters/customerIdPath"
        }
      ],
      "get": {
        "summary": "Get opt-in",
        "operationId": "getCustomerAssociatedOptIn",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Customers"
        ],
        "description": "Get opt-ins of the customer.\n",
        "responses": {
          "200": {
            "description": "Returns opt-in details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OptIns"
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update opt-in",
        "operationId": "updateCustomerAssociatedOptIn",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Customers"
        ],
        "description": "Update opt-ins of a customer.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OptInsUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated opt-in details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OptIns"
                }
              }
            }
          },
          "206": {
            "description": "There was no active opt-in to accept.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OptIns"
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "409": {
            "description": "Email or username are already associated with another user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customerId}/orders": {
      "get": {
        "summary": "Search customer's orders",
        "operationId": "searchCustomerOrders",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Customers"
        ],
        "description": "Search all orders that correspond to the given search conditions and belong to the customer identified by the customer id provided.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/customerIdPath"
          },
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns orders.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Orders"
                },
                "examples": {
                  "ordersExample": {
                    "$ref": "#/components/examples/ordersExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customerId}/paymentMethods": {
      "get": {
        "summary": "Get customer's payment methods",
        "operationId": "getCustomersPaymentMethods",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Customers"
        ],
        "description": "Search all payment methods that correspond to the given search conditions and belong to the customer identified by the customer id provided.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/customerIdPath"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns payment methods.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethods"
                },
                "examples": {
                  "paymentMethodsExample": {
                    "$ref": "#/components/examples/paymentMethodsExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customerId}/status": {
      "put": {
        "summary": "Change status",
        "operationId": "changeCustomerStatus",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Customers"
        ],
        "description": "Change the current status of a customer\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/customerIdPath"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerStatusChange"
              },
              "examples": {
                "additionalCustomerDataExample": {
                  "$ref": "#/components/examples/customerStatusChangeExample"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Customer that was updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                },
                "examples": {
                  "customerExample": {
                    "$ref": "#/components/examples/customerExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Customer is disabled and status cannot be changed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customerId}/statusHistory": {
      "parameters": [
        {
          "$ref": "#/components/parameters/customerIdPath"
        },
        {
          "$ref": "#/components/parameters/sizeQuery"
        },
        {
          "$ref": "#/components/parameters/startTimeQuery"
        },
        {
          "$ref": "#/components/parameters/endTimeQuery"
        },
        {
          "$ref": "#/components/parameters/startingAfterQuery"
        }
      ],
      "get": {
        "summary": "Get customer status history",
        "operationId": "getCustomerStatusHistory",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Customers"
        ],
        "description": "Returns status history associated with the customer associated with the provided customer id.\n",
        "responses": {
          "200": {
            "description": "Returns status history.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerStatus"
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customerId}/subscriptions": {
      "get": {
        "summary": "Search customer's subscriptions",
        "operationId": "searchCustomerSubscriptions",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Customers"
        ],
        "description": "Search all subscriptions that correspond to the given search conditions and belong to the customer identified by the customer id provided.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/customerIdPath"
          },
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns subscriptions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscriptions"
                },
                "examples": {
                  "subscriptionsExample": {
                    "$ref": "#/components/examples/subscriptionsExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customerId}/subscriptions/crossClient": {
      "get": {
        "summary": "Search customer's cross client subscriptions",
        "operationId": "searchCustomerCrossClientSubscriptions",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Customers"
        ],
        "description": "Search all cross client subscriptions that correspond to the given search conditions and belong to the customer identified by the customer id provided.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/customerIdPath"
          },
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns subscriptions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscriptions"
                },
                "examples": {
                  "subscriptionsExample": {
                    "$ref": "#/components/examples/subscriptionsExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customerId}/transactions": {
      "get": {
        "summary": "Search customer's transactions",
        "operationId": "searchCustomerTransactions",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Customers"
        ],
        "description": "Search all transactions that correspond to the given search conditions and belong to the customer identified by the customer id provided.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/customerIdPath"
          },
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transactions"
                },
                "examples": {
                  "transactionsExample": {
                    "$ref": "#/components/examples/transactionsExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customerId}/wallets": {
      "parameters": [
        {
          "$ref": "#/components/parameters/customerIdPath"
        },
        {
          "$ref": "#/components/parameters/sizeQuery"
        },
        {
          "$ref": "#/components/parameters/startTimeQuery"
        },
        {
          "$ref": "#/components/parameters/endTimeQuery"
        },
        {
          "$ref": "#/components/parameters/startingAfterQuery"
        }
      ],
      "get": {
        "summary": "Get customer credit wallets",
        "operationId": "getCustomerCreditWallets",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Customers"
        ],
        "description": "Get customer credit wallets.\n",
        "responses": {
          "200": {
            "description": "Returns all customer credit wallets.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCreditWalletList"
                },
                "examples": {
                  "customerSessionTokenExample": {
                    "$ref": "#/components/examples/customerCreditWalletsExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo customer session provided is not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customerId}/loginAttempts/failed": {
      "get": {
        "summary": "Search customers failed login attempts",
        "operationId": "searchCustomerFailedLoginAttempts",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Customers"
        ],
        "description": "Search all failed login attempts that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/customerIdPath"
          },
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailedCustomerLogInAttempt"
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customerId}/loginAttempts/success": {
      "get": {
        "summary": "Search customers successful login attempts",
        "operationId": "searchCustomerLoginAttempts",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Customers"
        ],
        "description": "Search all successful login attempts that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/customerIdPath"
          },
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerLogInAttempt"
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customerId}/stripeCustomer": {
      "parameters": [
        {
          "$ref": "#/components/parameters/customerIdPath"
        }
      ],
      "post": {
        "summary": "Create Stripe customer",
        "operationId": "createStripeCustomer",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Customers"
        ],
        "description": "Create a stripe customer association for a customer\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StripeCustomerCreation"
              },
              "examples": {
                "stripeCustomerCreationExample": {
                  "$ref": "#/components/examples/stripeCustomerCreationExample"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Stripe customer was updated or created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StripeCustomer"
                },
                "examples": {
                  "stripeCustomerExample": {
                    "$ref": "#/components/examples/stripeCustomerExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Deletes a Stripe customer",
        "operationId": "deleteStripeCustomer",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Customers"
        ],
        "description": "Deletes a Stripe customer if no payment method is associated yet. Also the customer within the Stripe system will be removed if there are\nno other payment methods associated with.\n",
        "responses": {
          "202": {
            "description": "Stripe customer successfully deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessStatus"
                },
                "examples": {
                  "sessionExample": {
                    "$ref": "#/components/examples/successStatusExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customerId}/username": {
      "parameters": [
        {
          "$ref": "#/components/parameters/customerIdPath"
        }
      ],
      "put": {
        "summary": "Change username",
        "operationId": "changeCustomerUsername",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Customers"
        ],
        "description": "Changes a customer's username\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerUsername"
              },
              "examples": {
                "customerUsernameExample": {
                  "$ref": "#/components/examples/customerUsernameExample"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Changed customer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customers"
                },
                "examples": {
                  "customersExample": {
                    "$ref": "#/components/examples/customersExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customerId}/marks": {
      "parameters": [
        {
          "$ref": "#/components/parameters/customerIdPath"
        }
      ],
      "get": {
        "summary": "Get customer marks",
        "operationId": "getCustomerMarks",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Customers"
        ],
        "description": "Get the customer marks.\n",
        "responses": {
          "200": {
            "description": "Returns customer marks.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerMarksData"
                }
              }
            }
          },
          "401": {
            "description": "plenigo merchant user session provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customerId}/marks/{customerMark}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/customerIdPath"
        },
        {
          "$ref": "#/components/parameters/customerMarkPath"
        }
      ],
      "get": {
        "summary": "Get customer mark data",
        "operationId": "getCustomerMark",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Customers"
        ],
        "description": "Get the customer mark data.\n",
        "responses": {
          "200": {
            "description": "Returns customer mark data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WbzCustomerMark"
                }
              }
            }
          },
          "401": {
            "description": "plenigo merchant user session provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "402": {
            "description": "This API call is part of a paid feature. The according module must be purchased in the plenigo backend before the API call can be used."
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update customer mark data",
        "operationId": "updateCustomerMark",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Customers"
        ],
        "description": "Update customer mark data.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WbzCustomerMarkBase"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated customer mark data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WbzCustomerMark"
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "plenigo merchant user session provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "402": {
            "description": "This API call is part of a paid feature. The according module must be purchased in the plenigo backend before the API call can be used."
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "409": {
            "description": "Email or username are already associated with another user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customers/customerIdByExternalSystemId/{externalSystemId}": {
      "get": {
        "summary": "Get internal customer id",
        "operationId": "customerIdByExternalSystemId",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Customers"
        ],
        "description": "Get customer id by external system\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/externalSystemIdPath"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the customer id.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerId"
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo merchant user session provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customers/loginAttempts/failed": {
      "get": {
        "summary": "Search customers failed login attempts",
        "operationId": "searchCustomersFailedLoginAttempts",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Customers"
        ],
        "description": "Search all failed login attempts that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailedCustomerLogInAttempt"
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customers/loginAttempts/success": {
      "get": {
        "summary": "Search customers successful login attempts",
        "operationId": "searchCustomersLoginAttempts",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Customers"
        ],
        "description": "Search all successful login attempts that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerLogInAttempt"
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customers/optIns": {
      "parameters": [
        {
          "$ref": "#/components/parameters/sizeQuery"
        },
        {
          "$ref": "#/components/parameters/startTimeQuery"
        },
        {
          "$ref": "#/components/parameters/endTimeQuery"
        },
        {
          "$ref": "#/components/parameters/startingAfterQuery"
        },
        {
          "$ref": "#/components/parameters/sortQuery"
        }
      ],
      "get": {
        "summary": "Search opt-ins",
        "operationId": "searchCustomerAssociatedOptIns",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Customers"
        ],
        "description": "Search opt-ins of a company.\n",
        "responses": {
          "200": {
            "description": "List of opt-ins.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OptInsList"
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/imports/orders": {
      "post": {
        "summary": "Order import",
        "operationId": "orderImport",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Order Imports"
        ],
        "description": "Import the given orders into the system.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderImports"
              },
              "examples": {
                "orderImportsExample": {
                  "$ref": "#/components/examples/orderImportsExample"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns the order id of the successful order.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessStatus"
                },
                "examples": {
                  "successStatusExample": {
                    "$ref": "#/components/examples/successStatusExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Voucher code provided is no longer valid or already used.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/imports/orders/logs": {
      "get": {
        "summary": "Search",
        "operationId": "searchOrderImportLogs",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Order Imports"
        ],
        "description": "Search all order import log entries that correspond to the given search conditions. Import logs are only kept for 7 days.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          },
          {
            "$ref": "#/components/parameters/parameters-externalSystemIdQuery"
          },
          {
            "$ref": "#/components/parameters/plenigoOfferIdQuery"
          },
          {
            "$ref": "#/components/parameters/successQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderImportLogEntries"
                },
                "examples": {
                  "orderImportLogEntriesExample": {
                    "$ref": "#/components/examples/orderImportLogEntriesExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/imports/orders/logs/{orderImportLogEntryId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/orderImportLogEntryIdPath"
        }
      ],
      "get": {
        "summary": "Get",
        "operationId": "getOrderImportLog",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Order Imports"
        ],
        "description": "Get order import log entry that is identified by the passed order import log entry id.\n",
        "responses": {
          "200": {
            "description": "Returns order import log entry details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderImportLogEntry"
                },
                "examples": {
                  "orderImportLogEntryExample": {
                    "$ref": "#/components/examples/orderImportLogEntryExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/invoices": {
      "get": {
        "summary": "Search",
        "operationId": "searchInvoices",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Invoices"
        ],
        "description": "Search all invoices that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          },
          {
            "$ref": "#/components/parameters/orderIdQuery"
          },
          {
            "$ref": "#/components/parameters/subscriptionItemIdQuery"
          },
          {
            "$ref": "#/components/parameters/filterByInvoiceDateQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoices"
                },
                "examples": {
                  "invoiceExample": {
                    "$ref": "#/components/examples/invoicesExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/invoices/{invoiceId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/invoiceIdPath"
        }
      ],
      "get": {
        "summary": "Get",
        "operationId": "getInvoice",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Invoices"
        ],
        "description": "Get invoice that is identified by the passed invoice id.\n",
        "responses": {
          "200": {
            "description": "Returns invoice details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                },
                "examples": {
                  "orderExample": {
                    "$ref": "#/components/examples/invoiceExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/invoices/{invoiceId}/file": {
      "parameters": [
        {
          "$ref": "#/components/parameters/invoiceIdPath"
        }
      ],
      "get": {
        "summary": "Get PDF",
        "operationId": "getInvoicePdf",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Invoices"
        ],
        "description": "Retrieve base64 encoded invoice pdf file for a given invoice id.\n",
        "responses": {
          "200": {
            "description": "Returns base64 encoded invoice pdf.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceFile"
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/invoices/{invoiceId}/cancel": {
      "parameters": [
        {
          "$ref": "#/components/parameters/invoiceIdPath"
        },
        {
          "$ref": "#/components/parameters/suppressCustomerMailQuery"
        },
        {
          "$ref": "#/components/parameters/suppressRefundQuery"
        }
      ],
      "put": {
        "summary": "Cancel invoice",
        "operationId": "cancelInvoicePdf",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Invoices"
        ],
        "description": "Cancel an invoice - only invoices of type INVOICE can be cancelled.\n",
        "responses": {
          "200": {
            "description": "Invoice was successfully cancelled.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessStatus"
                },
                "examples": {
                  "sessionExample": {
                    "$ref": "#/components/examples/successStatusExample"
                  }
                }
              }
            }
          },
          "207": {
            "description": "Invoice was successfully cancelled but money could not be refunded - please check the transactions."
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/invoices/{invoiceId}/paymentFailed": {
      "parameters": [
        {
          "$ref": "#/components/parameters/invoiceIdPath"
        }
      ],
      "put": {
        "summary": "Invoice payment failed",
        "operationId": "invoicePaymentFailed",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Invoices"
        ],
        "description": "Handle invoice payment failed for an invoice paid via billing - this must be triggered by the system responsible for invoice handling.\n",
        "responses": {
          "200": {
            "description": "Payment failed was handled successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessStatus"
                },
                "examples": {
                  "sessionExample": {
                    "$ref": "#/components/examples/successStatusExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/invoices/{invoiceId}/statusChange": {
      "parameters": [
        {
          "$ref": "#/components/parameters/invoiceIdPath"
        }
      ],
      "put": {
        "summary": "Invoice payment status change",
        "operationId": "invoicePaymentStatusChange",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Invoices"
        ],
        "description": "Change payment status of an invoice that is paid via billing - this must be triggered by the system responsible for invoice handling.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvoicePaymentStatusChange"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payment failed was handled successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessStatus"
                },
                "examples": {
                  "sessionExample": {
                    "$ref": "#/components/examples/successStatusExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/invoices/{invoiceId}/xml": {
      "parameters": [
        {
          "$ref": "#/components/parameters/invoiceIdPath"
        }
      ],
      "get": {
        "summary": "Get xml",
        "operationId": "getInvoiceXml",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Invoices"
        ],
        "description": "Retrieve xml formatted invoice file for a given invoice id.\n",
        "responses": {
          "200": {
            "description": "Returns xml encoded invoice.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceXml"
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/mails/logs": {
      "get": {
        "summary": "Search",
        "operationId": "searchMailLogs",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Mail Logs"
        ],
        "description": "Search all mail log entries that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          },
          {
            "$ref": "#/components/parameters/mailTemplateTypeQuery"
          },
          {
            "$ref": "#/components/parameters/errorOnlyQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailLogEntries"
                },
                "examples": {
                  "mailLogEntriesExample": {
                    "$ref": "#/components/examples/mailLogEntriesExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/mails/logs/{mailLogEntryId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/mailLogEntryIdPath"
        }
      ],
      "get": {
        "summary": "Get",
        "operationId": "getMailLog",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Mail Logs"
        ],
        "description": "Get mail log entry that is identified by the passed mail log entry id.\n",
        "responses": {
          "200": {
            "description": "Returns mail log entry details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailLogEntry"
                },
                "examples": {
                  "mailLogEntryExample": {
                    "$ref": "#/components/examples/mailLogEntryExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/orders": {
      "get": {
        "summary": "Search",
        "operationId": "searchOrders",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Orders"
        ],
        "description": "Search all orders that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          },
          {
            "$ref": "#/components/parameters/externalSystemIdQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Orders"
                },
                "examples": {
                  "orderExample": {
                    "$ref": "#/components/examples/ordersExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/orders/additionalData": {
      "get": {
        "summary": "Search additional data",
        "operationId": "searchAdditionalDataOrders",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Orders"
        ],
        "description": "Search all additional order data that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdditionalOrderDataList"
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/orders/{orderId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/orderIdPath"
        }
      ],
      "get": {
        "summary": "Get",
        "operationId": "getOrder",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Orders"
        ],
        "description": "Get order that is identified by the passed order id.\n",
        "responses": {
          "200": {
            "description": "Returns order details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnhancedOrder"
                },
                "examples": {
                  "orderExample": {
                    "$ref": "#/components/examples/orderExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/orders/{orderId}/additionalData": {
      "parameters": [
        {
          "$ref": "#/components/parameters/orderIdPath"
        }
      ],
      "get": {
        "summary": "Get additional data",
        "operationId": "getOrderAdditionalData",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Orders"
        ],
        "description": "Returns additional data associated with the order associated with the provided order id.\n",
        "responses": {
          "200": {
            "description": "Returns additional data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdditionalOrderData"
                },
                "examples": {
                  "additionalDataExample": {
                    "$ref": "#/components/examples/additionalOrderDataExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/orders/{orderId}/file": {
      "parameters": [
        {
          "$ref": "#/components/parameters/orderIdPath"
        }
      ],
      "get": {
        "summary": "Get PDF",
        "operationId": "getOrderPdf",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Orders"
        ],
        "description": "Retrieve base64 encoded order pdf file for a given invoice id.\n",
        "responses": {
          "200": {
            "description": "Returns base64 encoded order pdf.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PdfFile"
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/orders/purchasedAddons": {
      "get": {
        "summary": "Search purchased addons",
        "operationId": "searchPurchasedAddons",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Orders"
        ],
        "description": "Search all purchased addons that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchasedAddons"
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/orders/purchasedAddons/{purchasedAddonId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/purchasedAddonIdPath"
        }
      ],
      "get": {
        "summary": "Get purchased addon",
        "operationId": "getPurchasedAddonById",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Orders"
        ],
        "description": "Get purchased addon that is identified by the passed address id.\n",
        "responses": {
          "200": {
            "description": "Returns purchased addon.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchasedAddon"
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/orders/purchasedAddons/{purchasedAddonId}/trackingData": {
      "parameters": [
        {
          "$ref": "#/components/parameters/purchasedAddonIdPath"
        }
      ],
      "put": {
        "summary": "Update purchased addon tracking data",
        "operationId": "updatePurchasedAddonTrackingData",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Orders"
        ],
        "description": "Update the tracking data of a purchased addons.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAddonTrackingData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Changed purchased addon.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchasedAddon"
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/orders/crossClientTransactions": {
      "get": {
        "summary": "Search cross client transactions",
        "operationId": "searchCrossClientTransactions",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Orders"
        ],
        "description": "Search all cross client transactions that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/orderIdQuery"
          },
          {
            "$ref": "#/components/parameters/subscriptionIdQuery"
          },
          {
            "$ref": "#/components/parameters/invoiceIdQuery"
          },
          {
            "$ref": "#/components/parameters/crossClientTransactionTypeQuery"
          },
          {
            "$ref": "#/components/parameters/crossClientTransactionPaidStatusQuery"
          },
          {
            "$ref": "#/components/parameters/connectedCompanyIdQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CrossClientTransactions"
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/orders/crossClientTransactions/{crossClientTransactionId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/crossClientTransactionIdPath"
        }
      ],
      "get": {
        "summary": "Get cross client transaction",
        "operationId": "getCrossClientTransactionById",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Orders"
        ],
        "description": "Get cross client transaction that is identified by the passed address id.\n",
        "responses": {
          "200": {
            "description": "Returns cross client transaction.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CrossClientTransaction"
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/orders/crossClientTransactions/{crossClientTransactionId}/paidStatus": {
      "parameters": [
        {
          "$ref": "#/components/parameters/crossClientTransactionIdPath"
        }
      ],
      "put": {
        "summary": "Update cross client transaction paid status",
        "operationId": "updateCrossClientTransactionPaidStatus",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Orders"
        ],
        "description": "Update the paid status of a cross client transactions.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CrossClientTransactionPaidStatusUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Changed cross client transaction.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CrossClientTransaction"
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/paymentMethods/amazonPayAccounts": {
      "get": {
        "summary": "Search amazon pay account",
        "operationId": "searchAmazonPayAccounts",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Payment Methods"
        ],
        "description": "Search all amazon pay accounts that correspond to the given search conditions",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AmazonPayAccounts"
                },
                "examples": {
                  "paymentMethod": {
                    "$ref": "#/components/examples/amazonPayAccountsExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a amazon pay account entity",
        "operationId": "createAmazonPayAccount",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Payment Methods"
        ],
        "description": "Create a new amazon pay account with the data provided.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AmazonPayAccountCreation"
              },
              "examples": {
                "amazonPayAccountCreation": {
                  "$ref": "#/components/examples/amazonPayAccountCreationExample"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Amazon pay account was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/schemas-AmazonPayAccount"
                },
                "examples": {
                  "amazonPayAccount": {
                    "$ref": "#/components/examples/amazonPayAccountExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/paymentMethods/amazonPayAccounts/{amazonPayAccountId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/amazonPayAccountIdPath"
        }
      ],
      "get": {
        "summary": "Get a amazon pay account entity",
        "operationId": "getAmazonPayAccount",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Payment Methods"
        ],
        "description": "Get amazon pay account that is identified by the passed amazon pay account id.\n",
        "responses": {
          "200": {
            "description": "Returns amazon pay account details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/schemas-AmazonPayAccount"
                },
                "examples": {
                  "paymentMethod": {
                    "$ref": "#/components/examples/amazonPayAccountExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update amazon pay account entity",
        "operationId": "updateAmazonPayAccount",
        "tags": [
          "Payment Methods"
        ],
        "description": "Update an amazon pay account that is identified by the passed amazon pay account id with the data provided.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AmazonPayAccountChange"
              },
              "examples": {
                "paymentMethod": {
                  "$ref": "#/components/examples/amazonPayAccountChangeExample"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Amazon pay account was successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/schemas-AmazonPayAccount"
                },
                "examples": {
                  "paymentMethod": {
                    "$ref": "#/components/examples/amazonPayAccountExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a amazon pay account",
        "operationId": "deleteAmazonPayAccount",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Payment Methods"
        ],
        "description": "Delete a amazon pay account. This is only possible if amazon pay account is not associated with a subscription. Otherwise the subscription association must be\nremoved first.\n",
        "responses": {
          "202": {
            "description": "Amazon pay account successfully deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessStatus"
                },
                "examples": {
                  "sessionExample": {
                    "$ref": "#/components/examples/successStatusExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Amazon pay account cannot be deleted because it is still used by subscriptions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/paymentMethods/bankAccounts": {
      "get": {
        "summary": "Search bank account",
        "operationId": "searchBankAccounts",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Payment Methods"
        ],
        "description": "Search all bank accounts that correspond to the given search conditions",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccounts"
                },
                "examples": {
                  "paymentMethod": {
                    "$ref": "#/components/examples/bankAccountsExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a bank account entity",
        "operationId": "createBankAccount",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Payment Methods"
        ],
        "description": "Create a new bank account with the data provided.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BankAccountCreation"
              },
              "examples": {
                "bankAccountCreation": {
                  "$ref": "#/components/examples/bankAccountCreationExample"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Bank account was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccount"
                },
                "examples": {
                  "bankAccount": {
                    "$ref": "#/components/examples/bankAccountExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/paymentMethods/bankAccounts/{bankAccountId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/bankAccountIdPath"
        }
      ],
      "get": {
        "summary": "Get a bank account entity",
        "operationId": "getBankAccount",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Payment Methods"
        ],
        "description": "Get bank account that is identified by the passed bank account id.\n",
        "responses": {
          "200": {
            "description": "Returns bank account details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccount"
                },
                "examples": {
                  "paymentMethod": {
                    "$ref": "#/components/examples/bankAccountExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update bank account entity",
        "operationId": "updateBankAccount",
        "tags": [
          "Payment Methods"
        ],
        "description": "Update an bank account that is identified by the passed bank account id with the data provided.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BankAccountChange"
              },
              "examples": {
                "paymentMethod": {
                  "$ref": "#/components/examples/bankAccountExample"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Bank account was successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccount"
                },
                "examples": {
                  "paymentMethod": {
                    "$ref": "#/components/examples/bankAccountExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a bank account",
        "operationId": "deleteBankAccount",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Payment Methods"
        ],
        "description": "Delete a bank account. This is only possible if bank account is not associated with a subscription. Otherwise the subscription association must be\nremoved first.\n",
        "responses": {
          "202": {
            "description": "Bank account successfully deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessStatus"
                },
                "examples": {
                  "sessionExample": {
                    "$ref": "#/components/examples/successStatusExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bank account cannot be deleted because it is still used by subscriptions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/paymentMethods/creditCards": {
      "get": {
        "summary": "Search credit card",
        "operationId": "searchCreditCards",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Payment Methods"
        ],
        "description": "Search all credit cards that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditCards"
                },
                "examples": {
                  "paymentMethod": {
                    "$ref": "#/components/examples/creditCardsExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a credit card",
        "operationId": "createCreditCard",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Payment Methods"
        ],
        "description": "Create a new credit card with the data provided.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreditCardCreation"
              },
              "examples": {
                "creditCardCreation": {
                  "$ref": "#/components/examples/creditCardCreationExample"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Credit card was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditCard"
                },
                "examples": {
                  "bankAccount": {
                    "$ref": "#/components/examples/creditCardExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/paymentMethods/creditCards/{creditCardId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/creditCardIdPath"
        }
      ],
      "get": {
        "summary": "Get a credit card entity",
        "operationId": "getCreditCard",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Payment Methods"
        ],
        "description": "Get credit card that is identified by the passed credit card id.\n",
        "responses": {
          "200": {
            "description": "Returns credit card details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditCard"
                },
                "examples": {
                  "paymentMethod": {
                    "$ref": "#/components/examples/creditCardExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a credit card entity",
        "operationId": "updateCreditCard",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Payment Methods"
        ],
        "description": "Update credit card that is identified by the passed address id with the data provided.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreditCardChange"
              },
              "examples": {
                "paymentMethod": {
                  "$ref": "#/components/examples/creditCardChangeExample"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Credit card was successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditCard"
                },
                "examples": {
                  "paymentMethod": {
                    "$ref": "#/components/examples/creditCardExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a credit card",
        "operationId": "deleteCreditCard",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Payment Methods"
        ],
        "description": "Delete a credit card. This is only possible if credit card is not associated with a subscription. Otherwise the subscription association must be\nremoved first.\n",
        "responses": {
          "202": {
            "description": "Credit card successfully deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessStatus"
                },
                "examples": {
                  "sessionExample": {
                    "$ref": "#/components/examples/successStatusExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/paymentMethods/iDealAccounts": {
      "get": {
        "summary": "Search iDeal account",
        "operationId": "searchIDealAccounts",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Payment Methods"
        ],
        "description": "Search all iDeal accounts that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IDealAccounts"
                },
                "examples": {
                  "iDealAccountsExample": {
                    "$ref": "#/components/examples/iDealAccountsExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo customer session is not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create",
        "operationId": "createIDealAccount",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Payment Methods"
        ],
        "description": "Create a new iDeal account with the data provided.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IDealAccountChange"
              },
              "examples": {
                "iDealAccountChangeExample": {
                  "$ref": "#/components/examples/iDealAccountChangeExample"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "IDeal account that was created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IDealAccount"
                },
                "examples": {
                  "iDealAccountExample": {
                    "$ref": "#/components/examples/iDealAccountExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo customer session is not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/paymentMethods/iDealAccounts/{iDealAccountId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/iDealAccountIdPath"
        }
      ],
      "get": {
        "summary": "Get iDeal account",
        "operationId": "getIDealAccount",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Payment Methods"
        ],
        "description": "Get iDeal account that is identified by the passed iDeal account id.\n",
        "responses": {
          "200": {
            "description": "Returns iDeal account details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IDealAccount"
                },
                "examples": {
                  "iDealAccountExample": {
                    "$ref": "#/components/examples/iDealAccountExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo customer session is not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update iDeal account",
        "operationId": "updateIDealAccount",
        "tags": [
          "Payment Methods"
        ],
        "description": "Update an iDeal account that is identified by the passed iDeal account id with the data provided.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IDealAccountChange"
              },
              "examples": {
                "iDealAccountChangeExample": {
                  "$ref": "#/components/examples/iDealAccountChangeExample"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "IDeal account that was updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IDealAccount"
                },
                "examples": {
                  "iDealAccountExample": {
                    "$ref": "#/components/examples/iDealAccountExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo customer session is not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete ideal account",
        "operationId": "deleteIDealAccount",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Payment Methods"
        ],
        "description": "Delete a iDeal account. This is only possible if iDeal account is not associated with a subscription. Otherwise the subscription association must be\nremoved first.\n",
        "responses": {
          "202": {
            "description": "Returns deletion status.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessStatus"
                },
                "examples": {
                  "successStatusExample": {
                    "$ref": "#/components/examples/successStatusExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo customer session is not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/paymentMethods/payPalAccounts": {
      "get": {
        "summary": "Search PayPal account",
        "operationId": "searchPayPalAccounts",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Payment Methods"
        ],
        "description": "Search all PayPal accounts that correspond to the given search conditions",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayPalAccounts"
                },
                "examples": {
                  "paymentMethod": {
                    "$ref": "#/components/examples/payPalAccountsExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a PayPal account entity",
        "operationId": "createPayPalAccount",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Payment Methods"
        ],
        "description": "Create a new PayPal account with the data provided.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PayPalAccountCreation"
              },
              "examples": {
                "payPalAccountCreationExample": {
                  "$ref": "#/components/examples/payPalAccountCreationExample"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "PayPal account was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayPalAccount"
                },
                "examples": {
                  "payPalAccountExample": {
                    "$ref": "#/components/examples/payPalAccountExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/paymentMethods/payPalAccounts/{payPalAccountId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/payPalAccountIdPath"
        }
      ],
      "get": {
        "summary": "Get a PayPal account entity",
        "operationId": "getPayPalAccount",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Payment Methods"
        ],
        "description": "Get PayPal account that is identified by the passed PayPal account id.\n",
        "responses": {
          "200": {
            "description": "Returns PayPal account details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayPalAccount"
                },
                "examples": {
                  "paymentMethod": {
                    "$ref": "#/components/examples/payPalAccountExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a PayPal account",
        "operationId": "deletePayPalAccount",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Payment Methods"
        ],
        "description": "Delete a PayPal account. This is only possible if PayPal account is not associated with a subscription. Otherwise the subscription association must be\nremoved first.\n",
        "responses": {
          "202": {
            "description": "PayPal account successfully deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessStatus"
                },
                "examples": {
                  "sessionExample": {
                    "$ref": "#/components/examples/successStatusExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "PayPal account cannot be deleted because it is still used by subscriptions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/paymentMethods/postFinanceAccounts": {
      "get": {
        "summary": "Search PostFinance account",
        "operationId": "searchPostFinanceAccounts",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Payment Methods"
        ],
        "description": "Search all PostFinance accounts that correspond to the given search conditions",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostFinanceAccounts"
                },
                "examples": {
                  "paymentMethod": {
                    "$ref": "#/components/examples/postFinanceAccountsExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a PostFinance account entity",
        "operationId": "createPostFinanceAccount",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Payment Methods"
        ],
        "description": "Create a new PostFinance account with the data provided.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostFinanceAccountCreation"
              },
              "examples": {
                "postFinanceAccountCreationExample": {
                  "$ref": "#/components/examples/postFinanceAccountCreationExample"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "PostFinance account was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostFinanceAccount"
                },
                "examples": {
                  "postFinanceAccountExample": {
                    "$ref": "#/components/examples/postFinanceAccountExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/paymentMethods/postFinanceAccounts/{postFinanceAccountId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/postFinanceAccountIdPath"
        }
      ],
      "get": {
        "summary": "Get a PostFinance account entity",
        "operationId": "getPostFinanceAccount",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Payment Methods"
        ],
        "description": "Get PostFinance account that is identified by the passed PostFinance account id.\n",
        "responses": {
          "200": {
            "description": "Returns PostFinance account details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostFinanceAccount"
                },
                "examples": {
                  "paymentMethod": {
                    "$ref": "#/components/examples/postFinanceAccountExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a PostFinance account",
        "operationId": "deletePostFinanceAccount",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Payment Methods"
        ],
        "description": "Delete a PostFinance account. This is only possible if PostFinance account is not associated with a subscription. Otherwise the subscription association must be\nremoved first.\n",
        "responses": {
          "202": {
            "description": "PostFinance account successfully deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessStatus"
                },
                "examples": {
                  "sessionExample": {
                    "$ref": "#/components/examples/successStatusExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "PostFinance account cannot be deleted because it is still used by subscriptions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/paymentMethods/twintAccounts": {
      "get": {
        "summary": "Search Twint account",
        "operationId": "searchTwintAccounts",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Payment Methods"
        ],
        "description": "Search all Twint accounts that correspond to the given search conditions",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TwintAccounts"
                },
                "examples": {
                  "paymentMethod": {
                    "$ref": "#/components/examples/twintAccountsExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a Twint account entity",
        "operationId": "createTwintAccount",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Payment Methods"
        ],
        "description": "Create a new Twint account with the data provided.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TwintAccountCreation"
              },
              "examples": {
                "twintAccountCreationExample": {
                  "$ref": "#/components/examples/twintAccountCreationExample"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Twint account was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TwintAccount"
                },
                "examples": {
                  "twintAccountExample": {
                    "$ref": "#/components/examples/twintAccountExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/paymentMethods/twintAccounts/{twintAccountId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/twintAccountIdPath"
        }
      ],
      "get": {
        "summary": "Get a Twint account entity",
        "operationId": "getTwintAccount",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Payment Methods"
        ],
        "description": "Get Twint account that is identified by the passed Twint account id.\n",
        "responses": {
          "200": {
            "description": "Returns Twint account details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TwintAccount"
                },
                "examples": {
                  "paymentMethod": {
                    "$ref": "#/components/examples/twintAccountExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a Twint account",
        "operationId": "deleteTwintAccount",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Payment Methods"
        ],
        "description": "Delete a Twint account. This is only possible if Twint account is not associated with a subscription. Otherwise the subscription association must be\nremoved first.\n",
        "responses": {
          "202": {
            "description": "Twint account successfully deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessStatus"
                },
                "examples": {
                  "sessionExample": {
                    "$ref": "#/components/examples/successStatusExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Twint account cannot be deleted because it is still used by subscriptions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/processes/settings": {
      "get": {
        "summary": "Get process settings",
        "operationId": "getProcessSettings",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Process Settings"
        ],
        "description": "Get settings for configuring the SSO and checkout part.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/languageQuery"
          },
          {
            "$ref": "#/components/parameters/plenigoCheckoutDesignIdQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns process settings.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessData"
                },
                "examples": {
                  "productAccessRightsExample": {
                    "$ref": "#/components/examples/processDataExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/processes/registration/start": {
      "post": {
        "summary": "Start registration",
        "operationId": "startRegistration",
        "tags": [
          "Registration"
        ],
        "description": "This functionality starts the registration process for a new customer. If address data will be provided a new\ninvoice address will be created - country is mandatory for an address. If only the first and the last name are\nprovided the first and last name of the customer will be filled.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerRegistrationCreation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Next step information for registration process.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NextStep"
                },
                "examples": {
                  "registrationVerificationEmailExample": {
                    "$ref": "#/components/examples/registrationVerificationEmailExample"
                  },
                  "registrationVerificationSmsExample": {
                    "$ref": "#/components/examples/registrationVerificationSmsExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "412": {
            "description": "Token type selected is not configured correct.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/processes/registration/validate": {
      "post": {
        "summary": "Validate registration token",
        "operationId": "validateRegistration",
        "tags": [
          "Registration"
        ],
        "description": "This functionality finishes the registration process by providing a token.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationVerification"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Customer session token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerSessionToken"
                },
                "examples": {
                  "customerSessionExample": {
                    "$ref": "#/components/examples/customerSessionTokenExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "403": {
            "description": "The given step token is not valid for this call.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "408": {
            "description": "Process timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "428": {
            "description": "Process is not executed in correct order.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/processes/registration/resend": {
      "post": {
        "summary": "Resend verification token",
        "operationId": "resend",
        "tags": [
          "Registration"
        ],
        "description": "This functionality resend the registration process token.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StepToken"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Next step information for registration process.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NextStep"
                },
                "examples": {
                  "registrationVerificationEmailExample": {
                    "$ref": "#/components/examples/registrationVerificationEmailExample"
                  },
                  "registrationVerificationSmsExample": {
                    "$ref": "#/components/examples/registrationVerificationSmsExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Resend token for this step is not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "408": {
            "description": "Process timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "412": {
            "description": "Process token is reused.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "428": {
            "description": "Process is not executed in correct order.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/processes/registration/loginIdentifier/start": {
      "post": {
        "summary": "Start registration identifier",
        "operationId": "startloginIdentifierRegistration",
        "tags": [
          "Registration"
        ],
        "description": "This functionality starts the registration process for an existing customer with registration identifier.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerLoginIdentifierRegistration"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Next step information for registration process.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NextStep"
                },
                "examples": {
                  "registrationVerificationEmailExample": {
                    "$ref": "#/components/examples/registrationVerificationEmailExample"
                  },
                  "registrationVerificationSmsExample": {
                    "$ref": "#/components/examples/registrationVerificationSmsExample"
                  }
                }
              }
            }
          },
          "208": {
            "description": "The customer is already registered."
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/processes/registration/loginIdentifier/validate": {
      "post": {
        "summary": "Validate registration identifier token",
        "operationId": "validateloginIdentifierRegistration",
        "tags": [
          "Registration"
        ],
        "description": "This functionality finishes the registration process with registration identifier by providing a token.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationVerification"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Customer session token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerSessionToken"
                },
                "examples": {
                  "customerSessionExample": {
                    "$ref": "#/components/examples/customerSessionTokenExample"
                  }
                }
              }
            }
          },
          "208": {
            "description": "Customer is already registered."
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "403": {
            "description": "The registration token is not of type LOGIN_IDENTIFIER.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "408": {
            "description": "Process timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "412": {
            "description": "Process token is reused.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "428": {
            "description": "Process is not executed in correct order.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/processes/registration/loginIdentifier/resend": {
      "post": {
        "summary": "Resend registration identifier token",
        "operationId": "resendloginIdentifier",
        "tags": [
          "Registration"
        ],
        "description": "This functionality resend the registration process registration identifier token.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StepToken"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Next step information for registration process.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NextStep"
                },
                "examples": {
                  "registrationVerificationEmailExample": {
                    "$ref": "#/components/examples/registrationVerificationEmailExample"
                  },
                  "registrationVerificationSmsExample": {
                    "$ref": "#/components/examples/registrationVerificationSmsExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Resend token for this step is not allowed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "408": {
            "description": "Process timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "412": {
            "description": "Process token is reused.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "428": {
            "description": "Process is not executed in correct order.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/processes/login/verify": {
      "post": {
        "summary": "Verify login",
        "operationId": "verifyLogin",
        "tags": [
          "Login"
        ],
        "description": "This functionality verifies the log in data of a customer and executes the log in. The caller must decide if a\ncustomer name or email address is provided for login. If both are provided only the email address will be used.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerPasswordAuthentication"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Additional authentication step.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NextStep"
                },
                "examples": {
                  "loginWithTwoFactorExample": {
                    "$ref": "#/components/examples/loginWithTwoFactorExample"
                  },
                  "loginWithPasswordResetExample": {
                    "$ref": "#/components/examples/loginWithPasswordResetExample"
                  },
                  "loginWithAdditionalDataExample": {
                    "$ref": "#/components/examples/loginWithAdditionalDataExample"
                  }
                }
              }
            }
          },
          "202": {
            "description": "Customer session token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerSessionToken"
                },
                "examples": {
                  "customerSessionExample": {
                    "$ref": "#/components/examples/customerSessionTokenExample"
                  }
                }
              }
            }
          },
          "207": {
            "description": "Session limit reached.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionLimitReached"
                },
                "examples": {
                  "sessionLimitReachedExample": {
                    "$ref": "#/components/examples/sessionLimitReachedExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Log in is forbidden because customer is deactivated, blocked or has entered incorrect password.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/processes/login/verifyTwoFactorAuth": {
      "post": {
        "summary": "Verify two factor",
        "operationId": "verifyTwoFactorAuth",
        "tags": [
          "Login"
        ],
        "description": "This functionality validates the two factor token of a customer.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerTwoFactorAuthentication"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Additional authentication step.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/NextStep"
                    },
                    {
                      "$ref": "#/components/schemas/SessionLimitReached"
                    }
                  ]
                },
                "examples": {
                  "loginWithPasswordResetExample": {
                    "$ref": "#/components/examples/loginWithPasswordResetExample"
                  },
                  "loginWithAdditionalDataExample": {
                    "$ref": "#/components/examples/loginWithAdditionalDataExample"
                  },
                  "sessionLimitReachedExample": {
                    "$ref": "#/components/examples/sessionLimitReachedExample"
                  }
                }
              }
            }
          },
          "202": {
            "description": "Customer session token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerSessionToken"
                },
                "examples": {
                  "customerSessionExample": {
                    "$ref": "#/components/examples/customerSessionTokenExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "403": {
            "description": "The given step token is not valid for this call.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "408": {
            "description": "Process timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "412": {
            "description": "Customer is blocked and must reset his password or step token is reused.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "428": {
            "description": "Process is not executed in correct order.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/processes/login/verifyResetPassword": {
      "post": {
        "summary": "Verify password reset",
        "operationId": "verifyResetPassword",
        "tags": [
          "Login"
        ],
        "description": "This functionality validates the password reset of a customer.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerResetPassword"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Additional authentication step.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/NextStep"
                    },
                    {
                      "$ref": "#/components/schemas/SessionLimitReached"
                    }
                  ]
                },
                "examples": {
                  "loginWithAdditionalDataExample": {
                    "$ref": "#/components/examples/loginWithAdditionalDataExample"
                  },
                  "sessionLimitReachedExample": {
                    "$ref": "#/components/examples/sessionLimitReachedExample"
                  }
                }
              }
            }
          },
          "202": {
            "description": "Customer session token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerSessionToken"
                },
                "examples": {
                  "customerSessionExample": {
                    "$ref": "#/components/examples/customerSessionTokenExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "408": {
            "description": "Process timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "412": {
            "description": "Step token is reused.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "428": {
            "description": "Process is not executed in correct order.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/processes/login/updateAdditionalData": {
      "post": {
        "summary": "Update additional data",
        "operationId": "updateAdditionalDataLogin",
        "tags": [
          "Login"
        ],
        "description": "Add missing customer data like username, first name and last name to the customer if requested by process. Only data that are actively requested can be set here.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/NextStep"
                  },
                  {
                    "$ref": "#/components/schemas/SessionLimitReached"
                  }
                ]
              },
              "examples": {
                "customerDataExample": {
                  "$ref": "#/components/examples/customerDataExample"
                },
                "sessionLimitReachedExample": {
                  "$ref": "#/components/examples/sessionLimitReachedExample"
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Customer session token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerSessionToken"
                },
                "examples": {
                  "customerSessionExample": {
                    "$ref": "#/components/examples/customerSessionTokenExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "408": {
            "description": "Process timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "412": {
            "description": "Step token is reused.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "428": {
            "description": "Process is not executed in correct order.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/processes/login/changeSessions/{removalToken}": {
      "put": {
        "summary": "Remove active sessions",
        "operationId": "removeActiveSessionsLogin",
        "tags": [
          "Login"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/removalTokenPath"
          },
          {
            "$ref": "#/components/parameters/sessionIdQuery"
          }
        ],
        "description": "Removes one or all active sessions of a customer. If a session id is provided the specific session will be removed otherwise all active sessions\nwill be removed.\n",
        "responses": {
          "202": {
            "description": "Customer session token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerSessionToken"
                },
                "examples": {
                  "customerSessionExample": {
                    "$ref": "#/components/examples/customerSessionTokenExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Removal token is not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/processes/ssoProvider/verify": {
      "post": {
        "summary": "Verify sso login",
        "operationId": "verifySsoLogin",
        "tags": [
          "Sso Provider Login"
        ],
        "description": "This functionality verifies the log in data of a customer over a sso provider and executes the log in. The caller must decide if a\ncustomer name or email address is provided for login. If both are provided only the email address will be used.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CustomerGoogleSsoAuthentication"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Additional authentication step.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/NextStep"
                    },
                    {
                      "$ref": "#/components/schemas/SessionLimitReached"
                    }
                  ]
                },
                "examples": {
                  "loginWithTwoFactorExample": {
                    "$ref": "#/components/examples/loginWithTwoFactorExample"
                  },
                  "loginWithPasswordResetExample": {
                    "$ref": "#/components/examples/loginWithPasswordResetExample"
                  },
                  "loginWithAdditionalDataExample": {
                    "$ref": "#/components/examples/loginWithAdditionalDataExample"
                  },
                  "sessionLimitReachedExample": {
                    "$ref": "#/components/examples/sessionLimitReachedExample"
                  }
                }
              }
            }
          },
          "202": {
            "description": "Customer session token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerSessionToken"
                },
                "examples": {
                  "customerSessionExample": {
                    "$ref": "#/components/examples/customerSessionTokenExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Log in is forbidden because customer is deactivated, blocked or has entered incorrect password.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "412": {
            "description": "Customer is blocked and must reset his password.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/processes/passwordForgotten/sendToken": {
      "post": {
        "summary": "Send token",
        "operationId": "passwordForgottenSendToken",
        "tags": [
          "Password Forgotten"
        ],
        "description": "This functionality sends the password forgotten token to reset password.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerPasswordForgotten"
              },
              "examples": {
                "passwordForgottenEmailExample": {
                  "$ref": "#/components/examples/passwordForgottenEmailExample"
                },
                "passwordForgottenUsernameExample": {
                  "$ref": "#/components/examples/passwordForgottenUsernameExample"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Step information for password forgotten process.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NextStep"
                },
                "examples": {
                  "passwordForgottenNextStepExample": {
                    "$ref": "#/components/examples/passwordForgottenNextStepExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/processes/passwordForgotten/resendToken": {
      "post": {
        "summary": "Resend token",
        "operationId": "passwordForgottenResendToken",
        "tags": [
          "Password Forgotten"
        ],
        "description": "This functionality resend the password forgotten token to reset password.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerPasswordForgottenResend"
              },
              "examples": {
                "passwordForgottenResendTokenExample": {
                  "$ref": "#/components/examples/passwordForgottenResendTokenExample"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password forgotten reset info.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NextStep"
                },
                "examples": {
                  "passwordForgottenNextStepExample": {
                    "$ref": "#/components/examples/passwordForgottenNextStepExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "403": {
            "description": "The given customer status does not allow to reset password.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "408": {
            "description": "Process timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "412": {
            "description": "Customer is blocked and must reset his password or step token is reused.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "428": {
            "description": "Process is not executed in correct order.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/processes/passwordForgotten/verifyToken": {
      "post": {
        "summary": "Token verification",
        "operationId": "passwordForgottenVerifyToken",
        "tags": [
          "Password Forgotten"
        ],
        "description": "This functionality verifies the token to reset password.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerPasswordForgottenToken"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Next step for Password forgotten process.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NextStep"
                },
                "examples": {
                  "passwordForgottenPasswordResetStepExample": {
                    "$ref": "#/components/examples/passwordForgottenPasswordResetStepExample"
                  },
                  "passwordForgottenResendTwoFactorStepExample": {
                    "$ref": "#/components/examples/passwordForgottenResendTwoFactorStepExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "403": {
            "description": "The given customer status does not allow to reset password.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "406": {
            "description": "The given token is not correct.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "408": {
            "description": "Process timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "412": {
            "description": "Customer is blocked and must reset his password or step token is reused.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "424": {
            "description": "The password reset process has already finished.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "428": {
            "description": "Process is not executed in correct order.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/processes/passwordForgotten/resetPassword": {
      "post": {
        "summary": "Reset password",
        "operationId": "passwordForgottenResetPassword",
        "tags": [
          "Password Forgotten"
        ],
        "description": "This functionality resets the password of the customer.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerPasswordForgottenReset"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Additional authentication step.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NextStep"
                },
                "examples": {
                  "passwordForgottenAdditionalDataExample": {
                    "$ref": "#/components/examples/passwordForgottenAdditionalDataExample"
                  }
                }
              }
            }
          },
          "202": {
            "description": "Customer session token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerSessionToken"
                },
                "examples": {
                  "customerSessionExample": {
                    "$ref": "#/components/examples/customerSessionTokenExample"
                  }
                }
              }
            }
          },
          "207": {
            "description": "Session limit reached.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionLimitReached"
                },
                "examples": {
                  "sessionLimitReachedExample": {
                    "$ref": "#/components/examples/sessionLimitReachedExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "The password reset process has already finished.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "403": {
            "description": "The given customer status is not allowed to reset password.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "408": {
            "description": "Process timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "412": {
            "description": "Customer is blocked and must reset his password or step token is reused.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "428": {
            "description": "Process is not executed in correct order.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/processes/passwordForgotten/verifyTwoFactor": {
      "post": {
        "summary": "Verify two factor token",
        "operationId": "passwordForgottenVerifyTwoFactor",
        "tags": [
          "Password Forgotten"
        ],
        "description": "This functionality verifies the two factor of the customer.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerPasswordForgottenTwoFactor"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Step information for password forgotten process.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NextStep"
                },
                "examples": {
                  "passwordForgottenNextStepExample": {
                    "$ref": "#/components/examples/passwordForgottenNextStepExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "403": {
            "description": "The given customer status does not allow to reset password.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "408": {
            "description": "Process timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "412": {
            "description": "Step token is reused.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "428": {
            "description": "Process is not executed in correct order.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/processes/passwordForgotten/updateAdditionalData": {
      "post": {
        "summary": "Update additional data",
        "operationId": "updateAdditionalDataPasswordForgotten",
        "tags": [
          "Password Forgotten"
        ],
        "description": "Add missing customer data like username, first name and last name to the customer if requested by process. Only data that are actively requested can be set here.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerData"
              },
              "examples": {
                "customerDataExample": {
                  "$ref": "#/components/examples/customerDataExample"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Additional authentication step.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionLimitReached"
                },
                "examples": {
                  "sessionLimitReachedExample": {
                    "$ref": "#/components/examples/sessionLimitReachedExample"
                  }
                }
              }
            }
          },
          "202": {
            "description": "Customer session token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerSessionToken"
                },
                "examples": {
                  "customerSessionExample": {
                    "$ref": "#/components/examples/customerSessionTokenExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "408": {
            "description": "Process timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "412": {
            "description": "Step token is reused.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "428": {
            "description": "Process is not executed in correct order.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/processes/passwordForgotten/changeSessions/{removalToken}": {
      "put": {
        "summary": "Remove active sessions",
        "operationId": "removeActiveSessionsPasswordForgotten",
        "tags": [
          "Password Forgotten"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/removalTokenPath"
          },
          {
            "$ref": "#/components/parameters/sessionIdQuery"
          }
        ],
        "description": "Removes one or all active sessions of a customer. If a session id is provided the specific session will be removed otherwise all active sessions\nwill be removed.\n",
        "responses": {
          "202": {
            "description": "Customer session token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerSessionToken"
                },
                "examples": {
                  "customerSessionExample": {
                    "$ref": "#/components/examples/customerSessionTokenExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Removal token is not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/products/accessRights": {
      "get": {
        "summary": "Search",
        "operationId": "searchProductAccessRights",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Product Access Rights"
        ],
        "description": "Search all access rights that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductAccessRights"
                },
                "examples": {
                  "productAccessRightsExample": {
                    "$ref": "#/components/examples/productAccessRightsExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/products/accessRights/{accessRightId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/accessRightIdPath"
        }
      ],
      "get": {
        "summary": "Get",
        "operationId": "searchProductAccessRight",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Product Access Rights"
        ],
        "description": "Get access right that is identified by the passed access right id.\n",
        "responses": {
          "200": {
            "description": "Returns access right details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductAccessRight"
                },
                "examples": {
                  "productAccessRightExample": {
                    "$ref": "#/components/examples/productAccessRightExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/products/ageRules": {
      "get": {
        "summary": "Search age rules",
        "operationId": "searchProductAgeRules",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Age Rules"
        ],
        "description": "Search all age rules that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgeRules"
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/products/ageRules/{ageRuleId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/ageRuleIdPath"
        }
      ],
      "get": {
        "summary": "Get",
        "operationId": "getProductAgeRule",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Age Rules"
        ],
        "description": "Get age rule that is identified by the passed age rule id.\n",
        "responses": {
          "200": {
            "description": "Returns age rule details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgeRule"
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/products/appStoreOffers": {
      "get": {
        "summary": "Search",
        "operationId": "searchProductAppStoreOffers",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "App Store Offers"
        ],
        "description": "Search all app store offers that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppStoreOffers"
                },
                "examples": {
                  "appStoreOffersExample": {
                    "$ref": "#/components/examples/appStoreOffersExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/products/appStoreOffers/archived": {
      "get": {
        "summary": "Search archived",
        "operationId": "searchProductAppStoreOffersArchived",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "App Store Offers"
        ],
        "description": "Search all archived app store offers that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppStoreOffers"
                },
                "examples": {
                  "appStoreOffersExample": {
                    "$ref": "#/components/examples/appStoreOffersExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/products/appStoreOffers/{appStoreOfferId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/appStoreOfferIdPath"
        }
      ],
      "get": {
        "summary": "Get",
        "operationId": "getProductAppStoreOffer",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "App Store Offers"
        ],
        "description": "Get app store offer that is identified by the passed app store offer id.\n",
        "responses": {
          "200": {
            "description": "Returns app store offer details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppStoreOffer"
                },
                "examples": {
                  "appStoreOfferExample": {
                    "$ref": "#/components/examples/appStoreOfferExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/products/bonuses": {
      "get": {
        "summary": "Search bonuses",
        "operationId": "searchProductBonuses",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Bonuses"
        ],
        "description": "Search all bonuses that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/plenigoBonusIdQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Bonuses"
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/products/bonuses/archived": {
      "get": {
        "summary": "Search archived bonuses",
        "operationId": "searchProductBonusesArchived",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Bonuses"
        ],
        "description": "Search all archived bonuses that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Bonuses"
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/products/bonuses/{bonusId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/bonusIdPath"
        }
      ],
      "get": {
        "summary": "Get",
        "operationId": "getProductBonus",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Bonuses"
        ],
        "description": "Get bonus that is identified by the passed bonus id.\n",
        "responses": {
          "200": {
            "description": "Returns bonus details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Bonus"
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/products/creditWallets": {
      "get": {
        "summary": "Search credit wallets",
        "operationId": "searchProductCreditWallets",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Credit Wallets"
        ],
        "description": "Search all credit wallets that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditWallets"
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/products/creditWallets/{creditWalletId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/creditWalletIdPath"
        }
      ],
      "get": {
        "summary": "Get",
        "operationId": "getProductCreditWallet",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Credit Wallets"
        ],
        "description": "Get credit wallet that is identified by the passed credit wallet id.\n",
        "responses": {
          "200": {
            "description": "Returns credit waller details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditWallet"
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/products/crossSellings": {
      "get": {
        "summary": "Search",
        "operationId": "searchCrossSellings",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Cross Sellings"
        ],
        "description": "Search all cross sellings that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CrossSellings"
                },
                "examples": {
                  "crossSellingsExample": {
                    "$ref": "#/components/examples/crossSellingsExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/products/crossSellings/{crossSellingId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/crossSellingIdPath"
        }
      ],
      "get": {
        "summary": "Get",
        "operationId": "getCrossSelling",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Cross Sellings"
        ],
        "description": "Get cross selling that is identified by the passed cross selling id.\n",
        "responses": {
          "200": {
            "description": "Returns cross selling details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CrossSelling"
                },
                "examples": {
                  "crossSellingExample": {
                    "$ref": "#/components/examples/crossSellingExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/products/deliveryLists": {
      "get": {
        "summary": "Search",
        "operationId": "searchDeliveryLists",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Delivery Lists"
        ],
        "description": "Search all delivery lists that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeliveryLists"
                },
                "examples": {
                  "deliveryListsExample": {
                    "$ref": "#/components/examples/deliveryListsExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/products/deliveryLists/{deliveryListId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/deliveryListIdPath"
        }
      ],
      "get": {
        "summary": "Get",
        "operationId": "getDeliveryList",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Delivery Lists"
        ],
        "description": "Get delivery list that is identified by the passed delivery list id.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns delivery list id.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeliveryList"
                },
                "examples": {
                  "deliveryListExample": {
                    "$ref": "#/components/examples/deliveryListExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/products/deliveryLists/{deliveryListId}/dates": {
      "parameters": [
        {
          "$ref": "#/components/parameters/deliveryListIdPath"
        }
      ],
      "get": {
        "summary": "Get delivery list dates",
        "operationId": "getDeliveryListDates",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Delivery Lists"
        ],
        "description": "Get delivery list dates that belong to the delivery list identified by the passed delivery list id.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/ignorePastQuery"
          },
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns delivery list dates.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeliveryListDates"
                },
                "examples": {
                  "deliveryListDatesExample": {
                    "$ref": "#/components/examples/deliveryListDatesExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/products/deliveryLists/{deliveryListId}/dates/shared/{sourceCompanyId}/{sharedOfferId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/deliveryListIdPath"
        },
        {
          "$ref": "#/components/parameters/sourceCompanyIdPath"
        },
        {
          "$ref": "#/components/parameters/sharedOfferIdPath"
        }
      ],
      "get": {
        "summary": "Get delivery list dates",
        "operationId": "getDeliveryListDatesForSharedOffer",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Delivery Lists"
        ],
        "description": "Get delivery list dates that belong to the delivery list identified by the passed delivery list id.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns delivery list dates.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeliveryListDates"
                },
                "examples": {
                  "deliveryListDatesExample": {
                    "$ref": "#/components/examples/deliveryListDatesExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/products/deliveryLists/{deliveryListId}/dates/{deliveryListDateId}/status": {
      "parameters": [
        {
          "$ref": "#/components/parameters/deliveryListIdPath"
        },
        {
          "$ref": "#/components/parameters/deliveryListDateIdPath"
        }
      ],
      "put": {
        "summary": "Update delivery date status",
        "operationId": "updateDeliveryListDateStatues",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Delivery Lists"
        ],
        "description": "Update the status of a delivery list date.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeliveryListDateStatusUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns delivery list dates.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeliveryListDate"
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo merchant user session provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/products/ivwRules": {
      "get": {
        "summary": "Search",
        "operationId": "searchProductIvwRules",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "IVW Rules"
        ],
        "description": "Search all ivw rules that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductIvwRules"
                },
                "examples": {
                  "productIvwRulesExample": {
                    "$ref": "#/components/examples/productIvwRulesExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/products/ivwRules/{ivwRuleId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/ivwRuleIdPath"
        }
      ],
      "get": {
        "summary": "Get",
        "operationId": "getProductIvwRule",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "IVW Rules"
        ],
        "description": "Get ivw rule that is identified by the passed ivw rule id.\n",
        "responses": {
          "200": {
            "description": "Returns ivw rule details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductIvwRule"
                },
                "examples": {
                  "productIvwRuleExample": {
                    "$ref": "#/components/examples/productIvwRuleExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/products/misuseRules": {
      "get": {
        "summary": "Search",
        "operationId": "searchProductMisuseRules",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Misuse Rules"
        ],
        "description": "Search all misuse rules that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductMisuseRules"
                },
                "examples": {
                  "productMisuseRulesExample": {
                    "$ref": "#/components/examples/productMisuseRulesExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/products/misuseRules/{misuseRuleId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/misuseRuleIdPath"
        }
      ],
      "get": {
        "summary": "Get",
        "operationId": "getProductMisuseRule",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Misuse Rules"
        ],
        "description": "Get misuse rule that is identified by the passed misuse rule id.\n",
        "responses": {
          "200": {
            "description": "Returns misuse rule details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductMisuseRule"
                },
                "examples": {
                  "productMisuseRuleExample": {
                    "$ref": "#/components/examples/productMisuseRuleExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/products/offers": {
      "get": {
        "summary": "Search offers",
        "operationId": "searchProductOffers",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Offers"
        ],
        "description": "Search all offers that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          },
          {
            "$ref": "#/components/parameters/parameters-plenigoOfferIdQuery"
          },
          {
            "$ref": "#/components/parameters/sortTreeLeafIdQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Offers"
                },
                "examples": {
                  "offersExample": {
                    "$ref": "#/components/examples/offersExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/products/offers/archived": {
      "get": {
        "summary": "Search archived offers",
        "operationId": "searchProductOffersArchived",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Offers"
        ],
        "description": "Search all archived offers that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          },
          {
            "$ref": "#/components/parameters/parameters-plenigoOfferIdQuery"
          },
          {
            "$ref": "#/components/parameters/sortTreeLeafIdQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Offers"
                },
                "examples": {
                  "offersExample": {
                    "$ref": "#/components/examples/offersExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/products/offers/{offerId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/offerIdPath"
        }
      ],
      "get": {
        "summary": "Get",
        "operationId": "getProductOffer",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Offers"
        ],
        "description": "Get offer that is identified by the passed offer id.\n",
        "responses": {
          "200": {
            "description": "Returns offer details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Offer"
                },
                "examples": {
                  "offerExample": {
                    "$ref": "#/components/examples/offerExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/products/offers/shared": {
      "get": {
        "summary": "Get",
        "operationId": "getSharedOffers",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Offers"
        ],
        "description": "Get offers shared with the company\n",
        "responses": {
          "200": {
            "description": "Returns offer details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectedOffers"
                },
                "examples": {
                  "offerExample": {
                    "$ref": "#/components/examples/connectedOffersExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo merchant user session provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/products/offers/shared/{sourceCompanyId}/{sharedOfferId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/sourceCompanyIdPath"
        },
        {
          "$ref": "#/components/parameters/sharedOfferIdPath"
        }
      ],
      "get": {
        "summary": "Get",
        "operationId": "getSharedOffer",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Offers"
        ],
        "description": "Get specific offer which is shared with the company\n",
        "responses": {
          "200": {
            "description": "Returns offer details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Offer"
                },
                "examples": {
                  "offerExample": {
                    "$ref": "#/components/examples/offerExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo merchant user session provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/products/priceCountrySegments": {
      "get": {
        "summary": "Search",
        "operationId": "searchProductPriceCountrySegments",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Price Country Segments"
        ],
        "description": "Search all price country segments that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PriceCountrySegments"
                },
                "examples": {
                  "priceCountrySegmentExample": {
                    "$ref": "#/components/examples/priceCountrySegmentExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/products/priceCountrySegments/{priceCountrySegmentId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/priceCountrySegmentIdPath"
        }
      ],
      "get": {
        "summary": "Get",
        "operationId": "getProductPriceCountrySegment",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Price Country Segments"
        ],
        "description": "Get price country segment that is identified by the passed price country segment id.\n",
        "responses": {
          "200": {
            "description": "Returns price country segment details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PriceCountrySegment"
                },
                "examples": {
                  "priceCountrySegmentExample": {
                    "$ref": "#/components/examples/priceCountrySegmentExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/products/priceIssues": {
      "get": {
        "summary": "Search",
        "operationId": "searchProductPriceIssues",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Price Issues"
        ],
        "description": "Search all price issues that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PriceIssues"
                },
                "examples": {
                  "priceIssuesExample": {
                    "$ref": "#/components/examples/priceIssuesExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/products/priceIssues/archived": {
      "get": {
        "summary": "Search",
        "operationId": "searchProductPriceIssuesArchived",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Price Issues"
        ],
        "description": "Search all archived price issues that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PriceIssues"
                },
                "examples": {
                  "priceIssuesExample": {
                    "$ref": "#/components/examples/priceIssuesExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/products/priceIssues/{priceIssueId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/priceIssueIdPath"
        }
      ],
      "get": {
        "summary": "Get",
        "operationId": "getProductPriceIssue",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Price Issues"
        ],
        "description": "Get price issue that is identified by the passed price issue id.\n",
        "responses": {
          "200": {
            "description": "Returns price issue details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PriceIssue"
                },
                "examples": {
                  "priceIssueExample": {
                    "$ref": "#/components/examples/priceIssueExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/products/productContracts": {
      "get": {
        "summary": "Search product contract",
        "operationId": "searchProductContracts",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Product Contracts"
        ],
        "description": "Search all product contracts that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductContracts"
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo merchant user session provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/products/productContracts/archived": {
      "get": {
        "summary": "Search archived product contracts",
        "operationId": "searchProductContractsArchived",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Product Contracts"
        ],
        "description": "Search all archived product contracts that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductContracts"
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo merchant user session provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/products/productContracts/{productContractId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/productContractIdPath"
        }
      ],
      "get": {
        "summary": "Get",
        "operationId": "getProductContract",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Product Contracts"
        ],
        "description": "Get product contract that is identified by the passed product contract id.\n",
        "responses": {
          "200": {
            "description": "Returns product contract details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductContract"
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo merchant user session provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/products/productTags": {
      "get": {
        "summary": "Search",
        "operationId": "searchProductTags",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Product Tags"
        ],
        "description": "Search all product tags that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductTags"
                },
                "examples": {
                  "productMisuseRulesExample": {
                    "$ref": "#/components/examples/productTagsExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/products/productTags/{productTagId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/productTagIdPath"
        }
      ],
      "get": {
        "summary": "Get",
        "operationId": "getProductTag",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Product Tags"
        ],
        "description": "Get product tag that is identified by the passed product tag id.\n",
        "responses": {
          "200": {
            "description": "Returns product tag details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductTag"
                },
                "examples": {
                  "productMisuseRuleExample": {
                    "$ref": "#/components/examples/productTagExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/products/relationRules": {
      "get": {
        "summary": "Search relation rules",
        "operationId": "searchProductRelationRules",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Relation Rules"
        ],
        "description": "Search all relation rules that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationRules"
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/products/relationRules/{relationRuleId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/relationRuleIdPath"
        }
      ],
      "get": {
        "summary": "Get",
        "operationId": "getProductRelationRule",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Relation Rules"
        ],
        "description": "Get relation rule that is identified by the passed relation rule id.\n",
        "responses": {
          "200": {
            "description": "Returns relation rule details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationRule"
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/products/shoppingCarts": {
      "get": {
        "summary": "Search shopping carts",
        "operationId": "searchProductShoppingCarts",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Shopping Carts"
        ],
        "description": "Search all shopping carts that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/plenigoShoppingCartIdQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShoppingCarts"
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/products/shoppingCarts/archived": {
      "get": {
        "summary": "Search archived shoppingCarts",
        "operationId": "searchProductShoppingCartsArchived",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Shopping Carts"
        ],
        "description": "Search all archived shopping carts that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShoppingCarts"
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/products/shoppingCarts/{shoppingCartId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/shoppingCartIdPath"
        }
      ],
      "get": {
        "summary": "Get",
        "operationId": "getProductShoppingCart",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Shopping Carts"
        ],
        "description": "Get shopping cart that is identified by the passed shopping cart id.\n",
        "responses": {
          "200": {
            "description": "Returns shopping cart details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShoppingCart"
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/refunds": {
      "get": {
        "summary": "Search",
        "operationId": "searchRefunds",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Refunds"
        ],
        "description": "Search all refunds that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/customerIdQuery"
          },
          {
            "$ref": "#/components/parameters/statusQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Refunds"
                },
                "examples": {
                  "refundsExample": {
                    "$ref": "#/components/examples/refundsExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo merchant user session provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/refunds/{refundId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/refundIdPath"
        }
      ],
      "get": {
        "summary": "Get",
        "operationId": "getRefund",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Refunds"
        ],
        "description": "Get refund that is identified by the passed refund id.\n",
        "responses": {
          "200": {
            "description": "Returns refund details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Refund"
                },
                "examples": {
                  "refundExample": {
                    "$ref": "#/components/examples/refundExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo merchant user session provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/refunds/{refundId}/status": {
      "parameters": [
        {
          "$ref": "#/components/parameters/refundIdPath"
        }
      ],
      "put": {
        "summary": "Update refund status",
        "operationId": "updateRefundStatus",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Refunds"
        ],
        "description": "Update the refund\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefundStatusChange"
              },
              "examples": {
                "purchaseOrderIndicatorExample": {
                  "$ref": "#/components/examples/refundStatusChangeExample"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Changed refund status.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Refund"
                },
                "examples": {
                  "orderExample": {
                    "$ref": "#/components/examples/refundExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo merchant user session provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sessions/customerData": {
      "get": {
        "summary": "Get customer data",
        "operationId": "getCustomerDataBySession",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Sessions"
        ],
        "description": "Provides customer data details for the currently active session. Includes the complete customer and her preferred invoice and delivery\naddresses if available.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sessionTokenQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns customer details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                },
                "examples": {
                  "completeCustomerExample": {
                    "$ref": "#/components/examples/customerExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo customer session provided is not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sessions/validate": {
      "get": {
        "summary": "Validate",
        "operationId": "validateCustomerSession",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Sessions"
        ],
        "description": "Validates a customer session and returns the session information in case of a valid session.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sessionTokenQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns customer session data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerSession"
                },
                "examples": {
                  "customerSessionExample": {
                    "$ref": "#/components/examples/customerSessionExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo customer session provided is not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sessions/{customerId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/customerIdPath"
        }
      ],
      "post": {
        "summary": "Create",
        "operationId": "createCustomerSession",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Sessions"
        ],
        "description": "Creates a new customer session for the provided customer id. More information provided during the session creation process will lead to a better\nsession protection and also helps the user to identify which session he wants to remove if multiple parallel log ins are allowed and the maximum\nactive session limit is reached.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoggingData"
              },
              "examples": {
                "loggingDataExample": {
                  "$ref": "#/components/examples/loggingDataExample"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Session limit reached.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionLimitReached"
                },
                "examples": {
                  "sessionLimitReachedExample": {
                    "$ref": "#/components/examples/sessionLimitReachedExample"
                  }
                }
              }
            }
          },
          "202": {
            "description": "Returns customer session token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerSessionToken"
                },
                "examples": {
                  "customerSessionTokenExample": {
                    "$ref": "#/components/examples/customerSessionTokenExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo customer session provided is not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sessions/transferToken": {
      "post": {
        "summary": "Create Transfer Token",
        "operationId": "createTransferToken",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Sessions"
        ],
        "description": "Creates a new transfer token that enables to transfer a customer session e.g. via Javascript without letting other Javascripts to catch the actual user\nsession. A transfer token is only valid one time and for 30 seconds.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerSessionToken"
              },
              "examples": {
                "loggingDataExample": {
                  "$ref": "#/components/examples/customerSessionTokenExample"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns transfer token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransferToken"
                },
                "examples": {
                  "customerSessionTokenExample": {
                    "$ref": "#/components/examples/transferTokenExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo customer session provided is not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Validate Transfer Token",
        "operationId": "validateTransferToken",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Sessions"
        ],
        "description": "Validates a transfer token and returns the session information in case of a transfer token.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/transferTokenQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns customer session data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerSessionToken"
                },
                "examples": {
                  "customerSessionExample": {
                    "$ref": "#/components/examples/customerSessionTokenExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo transfer token provided is not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "412": {
            "description": "Transfer token is not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/settings/apiAccessTokens/requestRenewedToken": {
      "parameters": [
        {
          "$ref": "#/components/parameters/requestTokenQuery"
        }
      ],
      "get": {
        "summary": "Get renewed API token",
        "operationId": "getRenewedApiAccessToken",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Api Access Tokens"
        ],
        "description": "Get renewed API access token identified by renewed token\n",
        "responses": {
          "200": {
            "description": "API access tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestTokenResult"
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo merchant user session provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/settings/additionalDataSelections": {
      "get": {
        "summary": "Get additional data selections",
        "operationId": "getAdditionalDataSelections",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Additional Data Selections"
        ],
        "description": "Returns additional data selections.",
        "responses": {
          "200": {
            "description": "Additional data selections.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdditionalDataSelectionList"
                },
                "examples": {
                  "additionalDataSelectionsExample": {
                    "$ref": "#/components/examples/additionalDataSelectionsExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo merchant user session provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update additional data selections.",
        "operationId": "updateAdditionalDataSelections",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Additional Data Selections"
        ],
        "description": "Update additional data selections.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdditionalDataSelectionList"
              },
              "examples": {
                "additionalDataSelectionsExample": {
                  "$ref": "#/components/examples/additionalDataSelectionsExample"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Additional Data Selections",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdditionalDataSelectionList"
                },
                "examples": {
                  "additionalDataSelectionsExample": {
                    "$ref": "#/components/examples/additionalDataSelectionsExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo merchant user session provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/settings/advertisementOptIns": {
      "get": {
        "summary": "Search advertisement opt ins",
        "operationId": "searchAdvertisementOptIns",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Customer OptIns"
        ],
        "description": "Search all advertisement opt ins that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerOptIns"
                },
                "examples": {
                  "customerOptInsExample": {
                    "$ref": "#/components/examples/customerOptInsExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/settings/advertisementOptIns/{customerOptInId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/customerOptInIdPath"
        }
      ],
      "get": {
        "summary": "Get advertisement opt in",
        "operationId": "getAdvertisementOptIn",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Customer OptIns"
        ],
        "description": "Get advertisement opt in that is identified by the passed advertisement opt in id.\n",
        "responses": {
          "200": {
            "description": "Returns advertisement opt in details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerOptIn"
                },
                "examples": {
                  "customerOptInExample": {
                    "$ref": "#/components/examples/customerOptInExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/settings/blockedIbans": {
      "get": {
        "summary": "Get",
        "operationId": "getBlockedIbans",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Blocked ibans"
        ],
        "description": "Get blocked ibans for a company.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/ibanQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Blocked ibans.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockedIbans"
                },
                "examples": {
                  "blockedIbansExample": {
                    "$ref": "#/components/examples/blockedIbansExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create blocked iban",
        "operationId": "createBlockedIban",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Blocked ibans"
        ],
        "description": "Create a blocked iban for a company.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BlockedIbanBase"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Blocked iban",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockedIban"
                },
                "examples": {
                  "blockedIbansExample": {
                    "$ref": "#/components/examples/blockedIbanExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/settings/blockedIbans/{blockedIbanId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/blockedIbanIdPath"
        }
      ],
      "get": {
        "summary": "Get",
        "operationId": "getBlockedIban",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Blocked ibans"
        ],
        "description": "Get blocked iban for a company.\n",
        "responses": {
          "200": {
            "description": "Blocked iban.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockedIban"
                },
                "examples": {
                  "blockedIbanExample": {
                    "$ref": "#/components/examples/blockedIbanExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a blocked iban",
        "operationId": "deleteBlockedIban",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Blocked ibans"
        ],
        "description": "Delete a blocked iban for a company.\n",
        "responses": {
          "202": {
            "description": "Blocked iban successfully deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessStatus"
                },
                "examples": {
                  "successStatusExample": {
                    "$ref": "#/components/examples/successStatusExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultInternalErrorExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/settings/customerCancellationReasons": {
      "get": {
        "summary": "Search cancellation reasons",
        "operationId": "searchCustomerCancellationReasons",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Customer Cancellation Reasons"
        ],
        "description": "Search all cancellation reasons that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCancellationReasons"
                },
                "examples": {
                  "cancellationReasonsExample": {
                    "$ref": "#/components/examples/customerCancellationReasonsExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/settings/customerCancellationReasons/archived": {
      "get": {
        "summary": "Search archived cancellation reasons",
        "operationId": "searchArchivedCustomerCancellationReasons",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Archived customer Cancellation Reason Settings"
        ],
        "description": "Search all archived cancellation reasons that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCancellationReasons"
                },
                "examples": {
                  "cancellationReasonsExample": {
                    "$ref": "#/components/examples/customerCancellationReasonsExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/settings/customerCancellationReasons/{customerCancellationReasonId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/customerCancellationReasonIdPath"
        }
      ],
      "get": {
        "summary": "Get cancellation reasons",
        "operationId": "getCustomerCancellationReason",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Customer Cancellation Reasons"
        ],
        "description": "Get cancellation reasons that is identified by the passed cancellation reasons id.\n",
        "responses": {
          "200": {
            "description": "Returns cancellation reasons details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCancellationReason"
                },
                "examples": {
                  "cancellationReasonExample": {
                    "$ref": "#/components/examples/customerCancellationReasonExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/settings/termsAndConditions": {
      "get": {
        "summary": "Search terms and conditions",
        "operationId": "searchCustomerTermsAndConditions",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Customer Terms"
        ],
        "description": "Search all terms and conditions that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerTerms"
                },
                "examples": {
                  "customerTermsExample": {
                    "$ref": "#/components/examples/customerTermsExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/settings/termsAndConditions/{customerTermId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/customerTermIdPath"
        }
      ],
      "get": {
        "summary": "Get terms and conditions",
        "operationId": "getCustomerTermsAndCondition",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Customer Terms"
        ],
        "description": "Get terms and conditions that is identified by the passed terms and conditions id.\n",
        "responses": {
          "200": {
            "description": "Returns terms and conditions details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerTerm"
                },
                "examples": {
                  "customerTermExample": {
                    "$ref": "#/components/examples/customerTermExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/settings/textModules": {
      "get": {
        "summary": "Search text modules",
        "operationId": "searchTextModules",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Text Module Settings"
        ],
        "description": "Search all text modules that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/textModuleTypeQuery"
          },
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sortTreeLeafIdQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TextModules"
                },
                "examples": {
                  "textModulesExample": {
                    "$ref": "#/components/examples/textModulesExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/settings/textModules/{textModuleId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/textModuleIdPath"
        }
      ],
      "get": {
        "summary": "Get text module",
        "operationId": "getTextModule",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Text Module Settings"
        ],
        "description": "Get text module that is identified by the passed text module id.\n",
        "responses": {
          "200": {
            "description": "Returns text module details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TextModule"
                },
                "examples": {
                  "textModuleExample": {
                    "$ref": "#/components/examples/textModuleExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/settings/sortTreeLeafs": {
      "get": {
        "summary": "Search sort tree leafs",
        "operationId": "searchSortTreeLeafs",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Sort Tree Leafs"
        ],
        "description": "Search all sort tree leafs that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SortTreeLeafs"
                },
                "examples": {
                  "sortTreeLeafsExample": {
                    "$ref": "#/components/examples/sortTreeLeafsExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo merchant user session provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/settings/sortTreeLeafs/byType/{type}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/sortTreeLeafTypePath"
        }
      ],
      "get": {
        "summary": "Search sort tree leafs by type",
        "operationId": "searchSortTreeLeafsByType",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Sort Tree Leafs"
        ],
        "description": "Search all sort tree leafs that correspond to the given search conditions and type.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SortTreeLeafs"
                },
                "examples": {
                  "sortTreeLeafsExample": {
                    "$ref": "#/components/examples/sortTreeLeafsExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo merchant user session provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/settings/sortTreeLeafs/{sortTreeLeafId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/sortTreeLeafIdPath"
        }
      ],
      "get": {
        "summary": "Get sort tree leaf by id",
        "operationId": "getSortTreeLeaf",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Sort Tree Leafs"
        ],
        "description": "Get sort tree leaf that is identified by the passed sort tree leaf id.\n",
        "responses": {
          "200": {
            "description": "Returns sort tree leaf details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SortTreeLeaf"
                },
                "examples": {
                  "sortTreeLeafExample": {
                    "$ref": "#/components/examples/sortTreeLeafExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo merchant user session provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/settings/sortTreeLeafs/{sortTreeLeafId}/byType/{type}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/sortTreeLeafIdPath"
        },
        {
          "$ref": "#/components/parameters/sortTreeLeafTypePath"
        }
      ],
      "get": {
        "summary": "Get sort tree leaf by id and type",
        "operationId": "getSortTreeLeafByType",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Sort Tree Leafs"
        ],
        "description": "Get sort tree leaf that is identified by the passed sort tree leaf id and type.\n",
        "responses": {
          "200": {
            "description": "Returns sort tree leaf details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SortTreeLeaf"
                },
                "examples": {
                  "sortTreeLeafExample": {
                    "$ref": "#/components/examples/sortTreeLeafExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo merchant user session provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sftp/logs": {
      "get": {
        "summary": "Search",
        "operationId": "searchSftpLogs",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Sftp Logs"
        ],
        "description": "Search all SFTP log entries that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SftpLogEntries"
                },
                "examples": {
                  "sftpLogEntriesExample": {
                    "$ref": "#/components/examples/sftpLogEntriesExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sftp/logs/{sftpLogEntryId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/sftpLogEntryIdPath"
        }
      ],
      "get": {
        "summary": "Get",
        "operationId": "getSftpLog",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Sftp Logs"
        ],
        "description": "Get SFTP log entry that is identified by the passed sftp log entry id.\n",
        "responses": {
          "200": {
            "description": "Returns sftp log entry details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SftpLogEntry"
                },
                "examples": {
                  "sftpLogEntryExample": {
                    "$ref": "#/components/examples/sftpLogEntryExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions": {
      "get": {
        "summary": "Search",
        "operationId": "searchSubscriptions",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Subscriptions"
        ],
        "description": "Search all subscriptions that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          },
          {
            "$ref": "#/components/parameters/subscriptionItemIdQuery"
          },
          {
            "$ref": "#/components/parameters/externalSystemIdQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscriptions"
                },
                "examples": {
                  "subscriptionsExample": {
                    "$ref": "#/components/examples/subscriptionsExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/crossClient": {
      "get": {
        "summary": "Search cross client subscriptions",
        "operationId": "searchCrossClientSubscriptions",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Subscriptions"
        ],
        "description": "Search all cross client subscriptions that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          },
          {
            "$ref": "#/components/parameters/subscriptionItemIdQuery"
          },
          {
            "$ref": "#/components/parameters/externalSystemIdQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscriptions"
                },
                "examples": {
                  "subscriptionsExample": {
                    "$ref": "#/components/examples/subscriptionsExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/subscriptionIdPath"
        }
      ],
      "get": {
        "summary": "Get",
        "operationId": "getSubscription",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Subscriptions"
        ],
        "description": "Get subscription that is identified by the passed subscription id.\n",
        "responses": {
          "200": {
            "description": "Returns subscription details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                },
                "examples": {
                  "subscriptionExample": {
                    "$ref": "#/components/examples/subscriptionExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/access": {
      "parameters": [
        {
          "$ref": "#/components/parameters/subscriptionIdPath"
        }
      ],
      "put": {
        "summary": "Change access",
        "operationId": "changeSubscriptionAccess",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Subscriptions"
        ],
        "description": "Change the access status of a subscription immediately.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionChangeAccess"
              },
              "examples": {
                "subscriptionChangeAccessDataExample": {
                  "$ref": "#/components/examples/subscriptionChangeAccessDataExample"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns changed subscription.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                },
                "examples": {
                  "subscriptionExample": {
                    "$ref": "#/components/examples/subscriptionExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/address": {
      "parameters": [
        {
          "$ref": "#/components/parameters/subscriptionIdPath"
        }
      ],
      "put": {
        "summary": "Change address",
        "operationId": "changeSubscriptionAddress",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Subscriptions"
        ],
        "description": "Change the address that is associated with a subscription.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionChangeAddress"
              },
              "examples": {
                "subscriptionChangeAddressExample": {
                  "$ref": "#/components/examples/subscriptionChangeAddressExample"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns changed subscription.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                },
                "examples": {
                  "subscriptionExample": {
                    "$ref": "#/components/examples/subscriptionExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/analogInvoice": {
      "parameters": [
        {
          "$ref": "#/components/parameters/subscriptionIdPath"
        }
      ],
      "put": {
        "summary": "Change analog invoice flag",
        "operationId": "changeSubscriptionAnalogInvoice",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Subscriptions"
        ],
        "description": "Change analog invoice flag of a subscription.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionChangeAnalogInvoice"
              },
              "examples": {
                "subscriptionChangeAnalogInvoiceDataExample": {
                  "$ref": "#/components/examples/subscriptionChangeAnalogInvoiceDataExample"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns changed subscription.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                },
                "examples": {
                  "subscriptionExample": {
                    "$ref": "#/components/examples/subscriptionExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/cancel/at": {
      "parameters": [
        {
          "$ref": "#/components/parameters/subscriptionIdPath"
        },
        {
          "$ref": "#/components/parameters/sendMailQuery"
        },
        {
          "$ref": "#/components/parameters/cancellationReasonUniqueIdQuery"
        }
      ],
      "put": {
        "summary": "Cancel a running subscription at a given date",
        "operationId": "cancelSubscriptionAt",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Subscriptions"
        ],
        "description": "Cancel a running subscription to a given date.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionCancellationAtData"
              },
              "examples": {
                "subscriptionCancellationAtDataExample": {
                  "$ref": "#/components/examples/subscriptionCancellationAtDataExample"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Detail data of changed subscription.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                },
                "examples": {
                  "subscriptionExample": {
                    "$ref": "#/components/examples/subscriptionExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/cancel/dates": {
      "parameters": [
        {
          "$ref": "#/components/parameters/subscriptionIdPath"
        },
        {
          "$ref": "#/components/parameters/useAccountingPeriodQuery"
        }
      ],
      "get": {
        "summary": "Get possible cancellation dates",
        "operationId": "cancelSubscriptionDates",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Subscriptions"
        ],
        "description": "Get possible cancellation dates of a running subscription.",
        "responses": {
          "200": {
            "description": "List of possible cancellation dates.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionCancellationDates"
                },
                "examples": {
                  "subscriptionExample": {
                    "$ref": "#/components/examples/subscriptionCancellationDatesExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/cancel/now": {
      "parameters": [
        {
          "$ref": "#/components/parameters/subscriptionIdPath"
        },
        {
          "$ref": "#/components/parameters/sendMailQuery"
        },
        {
          "$ref": "#/components/parameters/cancellationReasonUniqueIdQuery"
        }
      ],
      "put": {
        "summary": "Cancel now",
        "operationId": "cancelSubscriptionNow",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Subscriptions"
        ],
        "description": "Cancel subscription immediately and switch the subscription status to inactive.\n",
        "responses": {
          "200": {
            "description": "Returns changed subscription.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                },
                "examples": {
                  "subscriptionExample": {
                    "$ref": "#/components/examples/subscriptionExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/cancel/regular": {
      "parameters": [
        {
          "$ref": "#/components/parameters/subscriptionIdPath"
        },
        {
          "$ref": "#/components/parameters/sendMailQuery"
        },
        {
          "$ref": "#/components/parameters/cancellationReasonUniqueIdQuery"
        }
      ],
      "put": {
        "summary": "Cancel regular",
        "operationId": "cancelSubscriptionRegular",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Subscriptions"
        ],
        "description": "Cancel a subscription to the next regular end date.\n",
        "responses": {
          "200": {
            "description": "Returns changed subscription.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                },
                "examples": {
                  "subscriptionExample": {
                    "$ref": "#/components/examples/subscriptionExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/cancel/undo": {
      "parameters": [
        {
          "$ref": "#/components/parameters/subscriptionIdPath"
        },
        {
          "$ref": "#/components/parameters/sendMailQuery"
        }
      ],
      "put": {
        "summary": "Undo cancellation",
        "operationId": "undoSubscriptionCancellation",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Subscriptions"
        ],
        "description": "Undo cancellation of a subscription that is cancelled but has not reached the end of its runtime yet.\n",
        "responses": {
          "200": {
            "description": "Returns changed subscription.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                },
                "examples": {
                  "subscriptionExample": {
                    "$ref": "#/components/examples/subscriptionExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/discount": {
      "parameters": [
        {
          "$ref": "#/components/parameters/subscriptionIdPath"
        }
      ],
      "put": {
        "summary": "Change discount",
        "operationId": "changeSubscriptionDiscount",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Subscriptions"
        ],
        "description": "Change discount percentage of a subscription item.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionItemChangeDiscount"
              },
              "examples": {
                "subscriptionChangeItemDiscountDataExample": {
                  "$ref": "#/components/examples/subscriptionChangeItemDiscountDataExample"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns changed subscription.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                },
                "examples": {
                  "subscriptionExample": {
                    "$ref": "#/components/examples/subscriptionExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/payment": {
      "parameters": [
        {
          "$ref": "#/components/parameters/subscriptionIdPath"
        }
      ],
      "put": {
        "summary": "Change payment method",
        "operationId": "changeSubscriptionPaymentMethod",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Subscriptions"
        ],
        "description": "Change payment method of a subscription.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionChangePayment"
              },
              "examples": {
                "subscriptionChangePaymentDataExample": {
                  "$ref": "#/components/examples/subscriptionChangePaymentDataExample"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns changed subscription.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                },
                "examples": {
                  "subscriptionExample": {
                    "$ref": "#/components/examples/subscriptionExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/addDeliveries": {
      "parameters": [
        {
          "$ref": "#/components/parameters/subscriptionIdPath"
        }
      ],
      "put": {
        "summary": "Add deliveries",
        "operationId": "addSubscriptionDeliveries",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Subscriptions"
        ],
        "description": "Add deliveries to open deliveries count of a subscription.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionDeliveryAddition"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns changed subscription.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                },
                "examples": {
                  "subscriptionExample": {
                    "$ref": "#/components/examples/subscriptionExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/quantity": {
      "parameters": [
        {
          "$ref": "#/components/parameters/subscriptionIdPath"
        }
      ],
      "put": {
        "summary": "Change quantity",
        "operationId": "changeSubscriptionQuantity",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Subscriptions"
        ],
        "description": "Change quantity of a subscription item.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionItemChangeQuantity"
              },
              "examples": {
                "subscriptionChangeItemQuantityDataExample": {
                  "$ref": "#/components/examples/subscriptionChangeItemQuantityDataExample"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns changed subscription.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                },
                "examples": {
                  "subscriptionExample": {
                    "$ref": "#/components/examples/subscriptionExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/suppressInvoiceSending": {
      "parameters": [
        {
          "$ref": "#/components/parameters/subscriptionIdPath"
        }
      ],
      "put": {
        "summary": "Change suppress invoice sending flag",
        "operationId": "changeSubscriptionSuppressInvoiceSending",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Subscriptions"
        ],
        "description": "Change suppress invoice sending flag of a subscription.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionChangeSuppressInvoiceSending"
              },
              "examples": {
                "subscriptionChangeSuppressInvoiceSendingDataExample": {
                  "$ref": "#/components/examples/subscriptionChangeSuppressInvoiceSendingDataExample"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns changed subscription.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                },
                "examples": {
                  "subscriptionExample": {
                    "$ref": "#/components/examples/subscriptionExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/purchaseOrderIndicator": {
      "parameters": [
        {
          "$ref": "#/components/parameters/subscriptionIdPath"
        }
      ],
      "put": {
        "summary": "Change purchase order indicator",
        "operationId": "changeSubscriptionPurchaseOrderIndicator",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Subscriptions"
        ],
        "description": "Change purchase order indicator of a subscription.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionPurchaseOrderIndicator"
              },
              "examples": {
                "subscriptionPurchaseOrderIndicatorExample": {
                  "$ref": "#/components/examples/subscriptionPurchaseOrderIndicatorExample"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns changed subscription.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                },
                "examples": {
                  "subscriptionExample": {
                    "$ref": "#/components/examples/subscriptionExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/pause": {
      "parameters": [
        {
          "$ref": "#/components/parameters/subscriptionIdPath"
        },
        {
          "$ref": "#/components/parameters/sendMailQuery"
        }
      ],
      "put": {
        "summary": "Pause subscription",
        "operationId": "pauseSubscription",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Subscriptions"
        ],
        "description": "Pause a subscription during the given time range. Only subscriptions with the same accounting period and term can be paused.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionPauseAt"
              },
              "examples": {
                "subscriptionCancellationAtDataExample": {
                  "$ref": "#/components/examples/subscriptionPauseAtExample"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns changed subscription.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                },
                "examples": {
                  "subscriptionExample": {
                    "$ref": "#/components/examples/subscriptionExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a pause subscriptions",
        "operationId": "deletePauseSubscription",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Subscriptions"
        ],
        "description": "Delete the pause of a subscription.\n",
        "responses": {
          "200": {
            "description": "Returns changed subscription.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                },
                "examples": {
                  "subscriptionExample": {
                    "$ref": "#/components/examples/subscriptionExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/pause/dates": {
      "parameters": [
        {
          "$ref": "#/components/parameters/subscriptionIdPath"
        }
      ],
      "get": {
        "summary": "Get possible pause dates",
        "operationId": "pauseSubscriptionDates",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Subscriptions"
        ],
        "description": "Get possible pause dates of a running subscription.",
        "responses": {
          "200": {
            "description": "List of possible pause dates.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionCancellationDates"
                },
                "examples": {
                  "subscriptionExample": {
                    "$ref": "#/components/examples/subscriptionCancellationDatesExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/pause/delivery": {
      "parameters": [
        {
          "$ref": "#/components/parameters/subscriptionIdPath"
        },
        {
          "$ref": "#/components/parameters/sendMailQuery"
        }
      ],
      "put": {
        "summary": "Pause delivery",
        "operationId": "pauseSubscriptionDelivery",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Subscriptions"
        ],
        "description": "Pause a subscription delivery during the given time range.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionPauseAt"
              },
              "examples": {
                "subscriptionCancellationAtDataExample": {
                  "$ref": "#/components/examples/subscriptionPauseAtExample"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns changed subscription.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                },
                "examples": {
                  "subscriptionExample": {
                    "$ref": "#/components/examples/subscriptionExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a pause delivery",
        "operationId": "deletePauseSubscriptionDelivery",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Subscriptions"
        ],
        "description": "Delete the pause of a subscription delivery.\n",
        "responses": {
          "200": {
            "description": "Returns changed subscription.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                },
                "examples": {
                  "subscriptionExample": {
                    "$ref": "#/components/examples/subscriptionExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/chain/{chainId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/chainIdPath"
        }
      ],
      "get": {
        "summary": "Get by chain",
        "operationId": "getSubscriptionsByChain",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Subscriptions"
        ],
        "description": "Get all subscriptions that belong to a specific subscription chain that is identified by the passed chain id.\n",
        "responses": {
          "200": {
            "description": "Returns subscriptions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscriptions"
                },
                "examples": {
                  "subscriptionsExample": {
                    "$ref": "#/components/examples/subscriptionsExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/chain/{chainId}/additionalData": {
      "parameters": [
        {
          "$ref": "#/components/parameters/chainIdPath"
        }
      ],
      "get": {
        "summary": "Get additional chain data",
        "operationId": "getSubscriptionChainAdditionalData",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Subscriptions"
        ],
        "description": "Returns additional data associated with the chain associated with the provided chain id.\n",
        "responses": {
          "200": {
            "description": "Returns additional data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdditionalChainData"
                },
                "examples": {
                  "additionalChainDataExample": {
                    "$ref": "#/components/examples/additionalChainDataExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Replace additional chain data",
        "tags": [
          "Subscriptions"
        ],
        "description": "Replace additional data of a subscription chain. All data will be replaced with the new data provided.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdditionalChainData"
              },
              "examples": {
                "additionalChainDataExample": {
                  "$ref": "#/components/examples/additionalChainDataExample"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns additional data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdditionalChainData"
                },
                "examples": {
                  "additionalChainDataExample": {
                    "$ref": "#/components/examples/additionalChainDataExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/chain/{chainId}/statusHistory": {
      "parameters": [
        {
          "$ref": "#/components/parameters/chainIdPath"
        },
        {
          "$ref": "#/components/parameters/sizeQuery"
        },
        {
          "$ref": "#/components/parameters/startTimeQuery"
        },
        {
          "$ref": "#/components/parameters/endTimeQuery"
        },
        {
          "$ref": "#/components/parameters/startingAfterQuery"
        }
      ],
      "get": {
        "summary": "Get chain status history",
        "operationId": "getSubscriptionChainStatusHistory",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Subscriptions"
        ],
        "description": "Returns status history associated with the chain associated with the provided chain id.\n",
        "responses": {
          "200": {
            "description": "Returns status history.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionStatus"
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/crossClient/chain/{chainId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/chainIdPath"
        }
      ],
      "get": {
        "summary": "Get cross client subscription by chain",
        "operationId": "getCrossClientSubscriptionsByChain",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Subscriptions"
        ],
        "description": "Get all cross client subscriptions that belong to a specific subscription chain that is identified by the passed chain id.\n",
        "responses": {
          "200": {
            "description": "Returns subscriptions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscriptions"
                },
                "examples": {
                  "subscriptionsExample": {
                    "$ref": "#/components/examples/subscriptionsExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/deliveryLists/{deliveryListId}/dates/{deliveryListDateId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/deliveryListIdPath"
        },
        {
          "$ref": "#/components/parameters/deliveryListDateIdPath"
        },
        {
          "$ref": "#/components/parameters/sizeQuery"
        },
        {
          "$ref": "#/components/parameters/startTimeQuery"
        },
        {
          "$ref": "#/components/parameters/endTimeQuery"
        },
        {
          "$ref": "#/components/parameters/startingAfterQuery"
        },
        {
          "$ref": "#/components/parameters/sortQuery"
        },
        {
          "$ref": "#/components/parameters/deliveryCustomerIdQuery"
        }
      ],
      "get": {
        "summary": "Search subscription delivery dates",
        "operationId": "searchSubscriptionDeliveryDates",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Subscriptions"
        ],
        "description": "Search all subscriptions delivery dates that correspond to the given search conditions.\n",
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionDeliveryDates"
                },
                "examples": {
                  "subscriptionsExample": {
                    "$ref": "#/components/examples/subscriptionDeliveryDatesExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/crossClient/deliveryLists/{deliveryListId}/dates/{deliveryListDateId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/deliveryListIdPath"
        },
        {
          "$ref": "#/components/parameters/deliveryListDateIdPath"
        },
        {
          "$ref": "#/components/parameters/sizeQuery"
        },
        {
          "$ref": "#/components/parameters/startTimeQuery"
        },
        {
          "$ref": "#/components/parameters/endTimeQuery"
        },
        {
          "$ref": "#/components/parameters/startingAfterQuery"
        },
        {
          "$ref": "#/components/parameters/sortQuery"
        },
        {
          "$ref": "#/components/parameters/deliveryCustomerIdQuery"
        }
      ],
      "get": {
        "summary": "Search cross client subscription delivery dates",
        "operationId": "searchCrossClientSubscriptionDeliveryDates",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Subscriptions"
        ],
        "description": "Search all cross client subscriptions delivery dates that correspond to the given search conditions.\n",
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionDeliveryDates"
                },
                "examples": {
                  "subscriptionsExample": {
                    "$ref": "#/components/examples/subscriptionDeliveryDatesExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/transactions": {
      "get": {
        "summary": "Search",
        "operationId": "searchTransactions",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Transactions"
        ],
        "description": "Search all transactions that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          },
          {
            "$ref": "#/components/parameters/plenigoTransactionIdQuery"
          },
          {
            "$ref": "#/components/parameters/pspTransactionIdQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transactions"
                },
                "examples": {
                  "transactionsExample": {
                    "$ref": "#/components/examples/transactionsExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/transactions/{transactionId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/transactionIdPath"
        }
      ],
      "get": {
        "summary": "Get",
        "operationId": "getTransaction",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Transactions"
        ],
        "description": "Get transaction that is identified by the passed transaction id.\n",
        "responses": {
          "200": {
            "description": "Returns transaction details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                },
                "examples": {
                  "transactionExample": {
                    "$ref": "#/components/examples/transactionExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/vouchers/campaigns": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/callbackQuery"
          }
        ],
        "summary": "Create",
        "operationId": "createVoucherCampaign",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Vouchers"
        ],
        "description": "*ASYNC* Creates a new voucher campaign with the data provided. ATTENTION - this process is async.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CampaignCreation"
              },
              "examples": {
                "campaignCreationExample": {
                  "$ref": "#/components/examples/campaignCreationExample"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Campaign that will be created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiCampaignCreationResult"
                },
                "examples": {
                  "campaignCreationResultExample": {
                    "$ref": "#/components/examples/campaignCreationResultExample"
                  }
                }
              }
            }
          },
          "202": {
            "description": "Success result with promise id.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessStatus"
                },
                "examples": {
                  "successStatusExample": {
                    "$ref": "#/components/examples/successStatusWithPromiseIdExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Search",
        "operationId": "searchVoucherCampaigns",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Vouchers"
        ],
        "description": "Search all campaigns that correspond to the given search conditions.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/voucherCodeQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns search result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiCampaignPage"
                },
                "examples": {
                  "campaignPageExample": {
                    "$ref": "#/components/examples/campaignPageExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "402": {
            "description": "This API call is part of a paid feature. The according module must be purchased in the plenigo backend before the API call can be used.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/vouchers/campaigns/{campaignId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/campaignIdPath"
        }
      ],
      "get": {
        "summary": "Get",
        "operationId": "getVoucherCampaign",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Vouchers"
        ],
        "description": "Get campaign that is identified by the passed campaign id.\n",
        "responses": {
          "200": {
            "description": "Returns campaign details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiCampaign"
                },
                "examples": {
                  "campaignExample": {
                    "$ref": "#/components/examples/campaignExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "402": {
            "description": "This API call is part of a paid feature. The according module must be purchased in the plenigo backend before the API call can be used.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/vouchers/channels/{channelId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/channelIdPath"
        }
      ],
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/callbackQuery"
          }
        ],
        "summary": "Update channel",
        "operationId": "updateVoucherChannel",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Vouchers"
        ],
        "description": "*ASYNC* Update channel that is identified by the passed channel id. ATTENTION - this process is async.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChannelUpdate"
              },
              "examples": {
                "channelUpdateExample": {
                  "$ref": "#/components/examples/channelUpdateExample"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns channel details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiChannel"
                },
                "examples": {
                  "channelUpdateResultExample": {
                    "$ref": "#/components/examples/channelUpdateResultExample"
                  }
                }
              }
            }
          },
          "202": {
            "description": "Success result with promise id.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessStatus"
                },
                "examples": {
                  "successStatusExample": {
                    "$ref": "#/components/examples/successStatusWithPromiseIdExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "402": {
            "description": "This API call is part of a paid feature. The according module must be purchased in the plenigo backend before the API call can be used.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/vouchers/channels/{channelId}/vouchers": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/channelIdPath"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/voucherStatusQuery"
          }
        ],
        "summary": "Returns vouchers",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Vouchers"
        ],
        "description": "Returns all vouchers of the selected channel page, depending on query parameters",
        "responses": {
          "200": {
            "description": "Vouchers",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiVoucherPage"
                },
                "examples": {
                  "orderExample": {
                    "$ref": "#/components/examples/apiVoucherPageExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo merchant user session provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/vouchers/{voucherCode}/validate": {
      "parameters": [
        {
          "$ref": "#/components/parameters/voucherCodePath"
        }
      ],
      "get": {
        "summary": "Validate voucher code",
        "operationId": "validateVoucherCode",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Vouchers"
        ],
        "description": "Validates the voucher code provided.\n",
        "responses": {
          "200": {
            "description": "Returns voucher code status and associated data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoucherStatus"
                },
                "examples": {
                  "voucherStatusExample": {
                    "$ref": "#/components/examples/voucherStatusExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "402": {
            "description": "This API call is part of a paid feature. The according module must be purchased in the plenigo backend before the API call can be used.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Voucher code is no longer valid or already used.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultExample"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity for given id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultNotFoundExample": {
                    "$ref": "#/components/examples/errorResultNotFoundExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/wallets": {
      "post": {
        "summary": "Create credit wallet",
        "operationId": "createCreditWallet",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Wallets"
        ],
        "description": "Create credit wallet.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/schemas-CreditWalletCreation"
              },
              "examples": {
                "taxBorderExample": {
                  "$ref": "#/components/examples/customerCreditWalletCreationExample"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns created credit Wallet.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCreditWallet"
                },
                "examples": {
                  "customerCreditWalletsExample": {
                    "$ref": "#/components/examples/customerCreditWalletExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Search",
        "operationId": "searchCreditWallets",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Wallets"
        ],
        "description": "Search credit wallets.\n",
        "responses": {
          "200": {
            "description": "Returns all credit wallets.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCreditWalletList"
                },
                "examples": {
                  "customerCreditWalletsExample": {
                    "$ref": "#/components/examples/customerCreditWalletsExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/wallets/{customerCreditWalletId}": {
      "get": {
        "summary": "Get credit wallet by id",
        "operationId": "getCreditWalletById",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Wallets"
        ],
        "description": "Get credit wallet by id.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/customerCreditWalletIdPath"
          }
        ],
        "responses": {
          "200": {
            "description": "Return credit wallet for id.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCreditWallet"
                },
                "examples": {
                  "customerCreditWalletExample": {
                    "$ref": "#/components/examples/customerCreditWalletExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/wallets/creditsUploaded": {
      "get": {
        "summary": "Get credit uploads",
        "operationId": "getCreditWalletUploads",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Wallets"
        ],
        "description": "Get credit wallet uploads.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all credit wallet uploads.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditUploadList"
                },
                "examples": {
                  "creditUploadListExample": {
                    "$ref": "#/components/examples/creditUploadListExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/wallets/creditsUsed": {
      "get": {
        "summary": "Get credit usages",
        "operationId": "getCreditWalletUsages",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Wallets"
        ],
        "description": "Get credit wallet usages.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all credit wallet usages.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditUsageList"
                },
                "examples": {
                  "creditUsageListExample": {
                    "$ref": "#/components/examples/creditUsageListExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/wallets/refillWallets/{uniqueId}": {
      "post": {
        "summary": "Refill empty wallets",
        "operationId": "refillWallets",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Wallets"
        ],
        "description": "Refill empty wallets related to the even list\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/uniqueWalletIdPath"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the current customer wallet with updated credit count.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessStatus"
                },
                "examples": {
                  "successStatusExample": {
                    "$ref": "#/components/examples/successStatusExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/wallets/upload": {
      "post": {
        "summary": "Upload",
        "operationId": "uploadCreditWallet",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Wallets"
        ],
        "description": "Uploads a credit to a given credit wallet.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExternalCreditUpload"
              },
              "examples": {
                "creditUsageBaseExample": {
                  "$ref": "#/components/examples/externalCreditUploadExample"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the current customer wallet with updated credit count.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCreditWallet"
                },
                "examples": {
                  "customerCreditWalletExample": {
                    "$ref": "#/components/examples/customerCreditWalletExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/wallets/use": {
      "post": {
        "summary": "Use",
        "operationId": "useCreditWallet",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Wallets"
        ],
        "description": "Uses a credit from a given credit wallet.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreditUsageBase"
              },
              "examples": {
                "creditUsageBaseExample": {
                  "$ref": "#/components/examples/creditUsageBaseExample"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the current customer wallet with updated credit count.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCreditWallet"
                },
                "examples": {
                  "customerCreditWalletExample": {
                    "$ref": "#/components/examples/customerCreditWalletExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/wallets/{customerId}/{uniqueId}": {
      "get": {
        "summary": "Get credit wallet by unique id",
        "operationId": "getCreditWalletByUniqueId",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Wallets"
        ],
        "description": "Get credit wallet by unique id.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/customerIdPath"
          },
          {
            "$ref": "#/components/parameters/uniqueWalletIdPath"
          },
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Return credit wallet for unique id.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCreditWallet"
                },
                "examples": {
                  "customerCreditWalletExample": {
                    "$ref": "#/components/examples/customerCreditWalletExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/wallets/{customerId}/{uniqueId}/creditsUploaded": {
      "get": {
        "summary": "Get credit uploads by customer",
        "operationId": "getCreditWalletUploadsByCustomer",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Wallets"
        ],
        "description": "Get credit wallet uploads.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/customerIdPath"
          },
          {
            "$ref": "#/components/parameters/uniqueWalletIdPath"
          },
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all credit wallet uploads.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditUploadList"
                },
                "examples": {
                  "creditUploadListExample": {
                    "$ref": "#/components/examples/creditUploadListExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/wallets/{customerId}/{uniqueId}/creditsUsed": {
      "get": {
        "summary": "Get credit usages by customer",
        "operationId": "getCreditWalletUsagesByCustomer",
        "security": [
          {
            "plenigoToken": []
          }
        ],
        "tags": [
          "Wallets"
        ],
        "description": "Get credit wallet usages.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/customerIdPath"
          },
          {
            "$ref": "#/components/parameters/uniqueWalletIdPath"
          },
          {
            "$ref": "#/components/parameters/sizeQuery"
          },
          {
            "$ref": "#/components/parameters/startTimeQuery"
          },
          {
            "$ref": "#/components/parameters/endTimeQuery"
          },
          {
            "$ref": "#/components/parameters/startingAfterQuery"
          },
          {
            "$ref": "#/components/parameters/endingBeforeQuery"
          },
          {
            "$ref": "#/components/parameters/sortQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all credit wallet usages.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditUsageList"
                },
                "examples": {
                  "creditUsageListExample": {
                    "$ref": "#/components/examples/creditUsageListExample"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not formatted correctly or contains invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                },
                "examples": {
                  "errorResultBadRequestExample": {
                    "$ref": "#/components/examples/errorResultBadRequestExample"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Plenigo api token provided is not valid or doesn't have necessary rights to access this method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultUnauthorizedExample"
                  }
                }
              }
            }
          },
          "429": {
            "description": "The rate limit for this endpoint is reached. Please try again later.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultTooManyRequestsExample"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Currently we are not able to answer your request but we are working hard to resolve this problem.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResultBase"
                },
                "examples": {
                  "errorResultUnauthorizedExample": {
                    "$ref": "#/components/examples/errorResultInternalErrorExample"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "plenigoToken": {
        "type": "apiKey",
        "name": "X-plenigo-token",
        "in": "header",
        "description": "To access functions from the public API a valid plenigo token must be provided as header.\n\n```\ncurl -i -H \"X-plenigo-token: PLENIGO_TOKEN\" -H \"Content-Type: application/json\" https://hostname/resource\n```\n"
      }
    },
    "parameters": {
      "sizeQuery": {
        "name": "size",
        "in": "query",
        "description": "amount of elements to return - if no size is provided or the size is not within range it will be automatically set to 5",
        "required": false,
        "schema": {
          "type": "integer",
          "minimum": 5,
          "maximum": 100,
          "format": "int32"
        }
      },
      "startTimeQuery": {
        "name": "startTime",
        "in": "query",
        "description": "time the entity was changed after or equal with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      },
      "endTimeQuery": {
        "name": "endTime",
        "in": "query",
        "description": "time the entity was changed before or equal with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      },
      "startingAfterQuery": {
        "name": "startingAfter",
        "in": "query",
        "description": "A cursor for use in pagination. startingAfter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include startingAfter=obj_foo in order to fetch the next result set.",
        "schema": {
          "type": "string",
          "maxLength": 100
        }
      },
      "endingBeforeQuery": {
        "name": "endingBefore",
        "in": "query",
        "description": "A cursor for use in pagination. endingBefore is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include endingBefore=obj_bar in order to fetch the previous page of the list.",
        "schema": {
          "type": "string",
          "maxLength": 100
        }
      },
      "sortQuery": {
        "name": "sort",
        "in": "query",
        "description": "The sort of the search, if its desc it will revert to search for a lower startingAfter",
        "schema": {
          "type": "string",
          "maxLength": 4,
          "enum": [
            "ASC",
            "DESC"
          ]
        }
      },
      "customerIdPath": {
        "name": "customerId",
        "in": "path",
        "description": "unique id of the customer",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "accessRightUniqueIdPath": {
        "name": "accessRightUniqueId",
        "in": "path",
        "description": "id of the access right item",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "itemIdPath": {
        "name": "itemId",
        "in": "path",
        "description": "item id of a access right item",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "accessRightUniqueIdsQuery": {
        "name": "accessRightUniqueIds",
        "in": "query",
        "description": "comma separated ids of access right unique ids",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "costCenterIdPath": {
        "name": "costCenterId",
        "in": "path",
        "description": "unique id of the cost center",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "ledgerIdPath": {
        "name": "ledgerId",
        "in": "path",
        "description": "unique id of the ledger",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "taxCodeIdPath": {
        "name": "taxCodeId",
        "in": "path",
        "description": "unique id of the tax code",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "jsonObjectTypeQuery": {
        "name": "jsonObjectType",
        "in": "query",
        "description": "The type the activity belongs to.",
        "schema": {
          "type": "string",
          "enum": [
            "ACCESS_RIGHT_ITEM",
            "AMAZON_PAY",
            "BANK_ACCOUNT",
            "CREDIT_CARD",
            "CUSTOMER",
            "DELIVERY_ADDRESS",
            "INVOICE",
            "INVOICE_ADDRESS",
            "ORDER",
            "PAYPAL",
            "SUBSCRIPTION"
          ]
        }
      },
      "jsonObjectIdentifierQuery": {
        "name": "jsonObjectIdentifier",
        "in": "query",
        "description": "The identifier of the object the activity belongs to. Can only be used in combination with jsonObjectType",
        "schema": {
          "type": "string",
          "maxLength": 100
        }
      },
      "overrideValidationQuery": {
        "name": "overrideValidation",
        "in": "query",
        "description": "flag if the validation should be ignored",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "addressIdPath": {
        "name": "addressId",
        "in": "path",
        "description": "unique id of the address",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "datePath": {
        "name": "date",
        "in": "path",
        "description": "date of the future address",
        "required": true,
        "schema": {
          "type": "string",
          "format": "date"
        }
      },
      "analyticsCalculationDateQuery": {
        "name": "calculationDate",
        "in": "query",
        "description": "end time of the analytics period with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
        "schema": {
          "type": "string",
          "format": "date-Time"
        }
      },
      "analyticsIntervalQuery": {
        "name": "interval",
        "in": "query",
        "description": "interval the returned data should be clustered",
        "required": true,
        "schema": {
          "type": "string",
          "enum": [
            "MONTH",
            "WEEK",
            "DAY",
            "HOUR"
          ]
        }
      },
      "analyticsSizeQuery": {
        "name": "size",
        "in": "query",
        "description": "amount of intervals to go back from calculation date - values depend from interval",
        "required": true,
        "schema": {
          "type": "integer",
          "minimum": 1,
          "maximum": 48,
          "format": "int32"
        }
      },
      "tokenQuery": {
        "name": "token",
        "in": "query",
        "description": "app store token",
        "schema": {
          "type": "string"
        }
      },
      "appleAppStorePurchaseIdPath": {
        "name": "appleAppStorePurchaseId",
        "in": "path",
        "description": "unique id of the purchase",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "appStoreTokenPath": {
        "name": "token",
        "in": "path",
        "description": "unique id of the purchase of an app store",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "googlePlayStorePurchaseIdPath": {
        "name": "googlePlayStorePurchaseId",
        "in": "path",
        "description": "unique id of the purchase",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "appStoreOrderIdPath": {
        "name": "appStoreOrderId",
        "in": "path",
        "description": "unique id of the app store order",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "appStoreSubscriptionIdPath": {
        "name": "appStoreSubscriptionId",
        "in": "path",
        "description": "unique id of the app store subscription",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "entityTypeQuery": {
        "name": "entityType",
        "in": "query",
        "description": "entity type to get entries for",
        "schema": {
          "type": "string",
          "enum": [
            "APP_STORE_ORDER",
            "APP_STORE_SUBSCRIPTION",
            "CALLBACK_RENEWAL",
            "CUSTOMER",
            "CUSTOMER_GDPR",
            "CUSTOMER_OPT_IN",
            "DOO_EVENT_ACCESS",
            "FAILED_PAYMENT",
            "INVOICE",
            "INVOICE_CANCELLATION",
            "INVOICE_CORRECTION",
            "ORDER",
            "PURCHASED_ADDON",
            "SUBSCRIPTION",
            "TRANSACTION",
            "VOUCHER_CAMPAIGN",
            "VOUCHER_CHANNEL"
          ]
        }
      },
      "callbackTypeQuery": {
        "name": "callbackType",
        "in": "query",
        "description": "callback type to get entries for",
        "schema": {
          "type": "string",
          "enum": [
            "CANCELLATION",
            "CHANGE",
            "CONDITIONS_FULFILLED",
            "CREATION",
            "DELETION",
            "ENDED",
            "FINISHED",
            "PAYMENT_FAILED",
            "PAYMENT_REVOKED",
            "UNDO_CANCELLATION"
          ]
        }
      },
      "callbackLogEntryIdPath": {
        "name": "callbackLogEntryId",
        "in": "path",
        "description": "unique id of the callback log entry",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "downloadTypeQuery": {
        "name": "downloadType",
        "in": "query",
        "description": "download type of the downlaod",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "DELIVERY_LIST",
            "DELIVERY_NOTE_LIST",
            "ANALOG_INVOICE_LIST"
          ]
        }
      },
      "fileTypeQuery": {
        "name": "fileType",
        "in": "query",
        "description": "file type of the downlaod",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "CSV",
            "PDF",
            "ZIP"
          ]
        }
      },
      "downloadIdPath": {
        "name": "downloadId",
        "in": "path",
        "description": "unique id of the download",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "corporateAccountIdQuery": {
        "name": "corporateAccountId",
        "in": "query",
        "description": "unique id of the corporate account",
        "required": false,
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "corporateAccountIdPath": {
        "name": "corporateAccountId",
        "in": "path",
        "description": "unique id of the corporate account",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "sendMailQuery": {
        "name": "sendMail",
        "in": "query",
        "description": "flag indicating if a email should be send",
        "schema": {
          "type": "boolean"
        }
      },
      "corporateAccountUserIdPath": {
        "name": "corporateAccountUserId",
        "in": "path",
        "description": "unique id of the corporate account user",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "externalSystemIdQuery": {
        "name": "externalSystemId",
        "in": "query",
        "description": "external system id defined by third party systems",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "emailQuery": {
        "name": "email",
        "in": "query",
        "description": "email to search for",
        "required": false,
        "schema": {
          "type": "string",
          "format": "email"
        }
      },
      "usernameQuery": {
        "name": "username",
        "in": "query",
        "description": "username to search for",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "forceDeletionQuery": {
        "name": "forceDeletion",
        "in": "query",
        "description": "flag indicating if force deletion",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "customerMarkPath": {
        "name": "customerMark",
        "in": "path",
        "description": "customer mark",
        "required": true,
        "schema": {
          "type": "string",
          "enum": [
            "WBZ"
          ]
        }
      },
      "externalSystemIdPath": {
        "name": "externalSystemId",
        "in": "path",
        "description": "external system id defined by third party systems",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "parameters-externalSystemIdQuery": {
        "name": "externalSystemId",
        "in": "query",
        "description": "external system id of the order",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "plenigoOfferIdQuery": {
        "name": "plenigoOfferId",
        "in": "query",
        "description": "plenigo offer id of the order",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "successQuery": {
        "name": "success",
        "in": "query",
        "description": "flag indicating if only order import logs with the given success flag should be returned",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "orderImportLogEntryIdPath": {
        "name": "orderImportLogEntryId",
        "in": "path",
        "description": "unique id of the order import log entry",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "orderIdQuery": {
        "name": "orderId",
        "in": "query",
        "description": "unique id of the order",
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "subscriptionItemIdQuery": {
        "name": "subscriptionItemId",
        "in": "query",
        "description": "unique id of the subscription item to search for",
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "filterByInvoiceDateQuery": {
        "name": "filterByInvoiceDate",
        "in": "query",
        "description": "flag indicating if returned list of invoiced should be filtered by invoice date",
        "schema": {
          "type": "boolean"
        }
      },
      "invoiceIdPath": {
        "name": "invoiceId",
        "in": "path",
        "description": "unique id of the invoice",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "suppressCustomerMailQuery": {
        "name": "suppressCustomerMail",
        "in": "query",
        "description": "suppress sending mail with cancellation invoice to customer",
        "schema": {
          "type": "boolean"
        }
      },
      "suppressRefundQuery": {
        "name": "suppressRefund",
        "in": "query",
        "description": "suppress refund the invoice amount to customer",
        "schema": {
          "type": "boolean"
        }
      },
      "mailTemplateTypeQuery": {
        "name": "mailTemplateType",
        "in": "query",
        "description": "mail template type of the mail sent",
        "schema": {
          "type": "string",
          "enum": [
            "CHANGE_EMAIL",
            "CROSS_SELLING",
            "INVOICE",
            "ORDER",
            "ORDER_ITEM_VOUCHER",
            "PAYMENT_FAILED",
            "PAYMENT_METHOD_CHANGED",
            "RECURRING_PAYMENT_FAILED",
            "RECURRING_PAYMENT_TRY_FAILED",
            "REGISTRATION_ALREADY_FINISHED",
            "REGISTRATION_COMPLETION",
            "REGISTRATION_FINISHED",
            "RESET_PASSWORD",
            "RESET_PASSWORD_FINISHED",
            "SUBSCRIPTION_CANCELED",
            "SUBSCRIPTION_DELIVERY_PAUSED",
            "SUBSCRIPTION_DELIVERY_PAUSED_CANCELED",
            "SUBSCRIPTION_PAUSED",
            "SUBSCRIPTION_PAUSED_CANCELED",
            "SUBSCRIPTION_CANCELLATION_TERMINATION",
            "SUBSCRIPTION_RELATION_RULE",
            "WELCOME_MAIL"
          ]
        }
      },
      "errorOnlyQuery": {
        "name": "errorOnly",
        "in": "query",
        "description": "flag indicating if only failed mail logs should be returned",
        "schema": {
          "type": "boolean"
        }
      },
      "mailLogEntryIdPath": {
        "name": "mailLogEntryId",
        "in": "path",
        "description": "unique id of the mail log entry",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "orderIdPath": {
        "name": "orderId",
        "in": "path",
        "description": "unique id of the order",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "purchasedAddonIdPath": {
        "name": "purchasedAddonId",
        "in": "path",
        "description": "unique id of the purchase addon",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "subscriptionIdQuery": {
        "name": "subscriptionId",
        "in": "query",
        "description": "unique id of the subscription",
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "invoiceIdQuery": {
        "name": "invoiceId",
        "in": "query",
        "description": "unique id of the invoice",
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "crossClientTransactionTypeQuery": {
        "name": "type",
        "in": "query",
        "description": "unique id of the cross client transaction type",
        "schema": {
          "type": "string",
          "enum": [
            "LOSS",
            "REFUND",
            "PAYMENT"
          ]
        }
      },
      "crossClientTransactionPaidStatusQuery": {
        "name": "paidStatus",
        "in": "query",
        "description": "unique id of the cross client transaction paid status",
        "schema": {
          "type": "string",
          "enum": [
            "OPEN",
            "PAID"
          ]
        }
      },
      "connectedCompanyIdQuery": {
        "name": "connectedCompanyId",
        "in": "query",
        "description": "unique id of a connected company",
        "schema": {
          "type": "string"
        }
      },
      "crossClientTransactionIdPath": {
        "name": "crossClientTransactionId",
        "in": "path",
        "description": "unique id of the cross client transaction id",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "amazonPayAccountIdPath": {
        "name": "amazonPayAccountId",
        "in": "path",
        "description": "unique id of the AmazonPay account",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "bankAccountIdPath": {
        "name": "bankAccountId",
        "in": "path",
        "description": "unique id of the bank account",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "creditCardIdPath": {
        "name": "creditCardId",
        "in": "path",
        "description": "unique id of the credit card",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "iDealAccountIdPath": {
        "name": "iDealAccountId",
        "in": "path",
        "description": "unique id of the iDeal account",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "payPalAccountIdPath": {
        "name": "payPalAccountId",
        "in": "path",
        "description": "unique id of the PayPal account",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "postFinanceAccountIdPath": {
        "name": "postFinanceAccountId",
        "in": "path",
        "description": "unique id of the PostFinance account",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "twintAccountIdPath": {
        "name": "twintAccountId",
        "in": "path",
        "description": "unique id of the Twint account",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "languageQuery": {
        "name": "language",
        "in": "query",
        "description": "language of the request - two letter language code according to <a href=\"https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes\" target=\"_blank\">ISO 639-1</a>",
        "required": false,
        "schema": {
          "type": "string",
          "minLength": 2,
          "maxLength": 2
        }
      },
      "plenigoCheckoutDesignIdQuery": {
        "name": "plenigoCheckoutDesignId",
        "in": "query",
        "description": "plenigo checkout design id",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "removalTokenPath": {
        "name": "removalToken",
        "in": "path",
        "description": "token for the temporary removal session",
        "required": true,
        "schema": {
          "type": "string",
          "maxLength": 40
        }
      },
      "sessionIdQuery": {
        "name": "sessionId",
        "in": "query",
        "description": "id of the session",
        "required": false,
        "schema": {
          "type": "string",
          "maxLength": 40
        }
      },
      "accessRightIdPath": {
        "name": "accessRightId",
        "in": "path",
        "description": "unique id of the access right",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "ageRuleIdPath": {
        "name": "ageRuleId",
        "in": "path",
        "description": "unique id of the age rule",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "appStoreOfferIdPath": {
        "name": "appStoreOfferId",
        "in": "path",
        "description": "unique id of the app store offer",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "plenigoBonusIdQuery": {
        "name": "plenigoBonusId",
        "in": "query",
        "description": "plenigo bonus id of the offer",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "bonusIdPath": {
        "name": "bonusId",
        "in": "path",
        "description": "unique id of the bonus",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "creditWalletIdPath": {
        "name": "creditWalletId",
        "in": "path",
        "description": "unique id of the credit wallet",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "crossSellingIdPath": {
        "name": "crossSellingId",
        "in": "path",
        "description": "unique id of the cross selling",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "deliveryListIdPath": {
        "name": "deliveryListId",
        "in": "path",
        "description": "unique id of the delivery list",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "ignorePastQuery": {
        "name": "ignorePast",
        "in": "query",
        "description": "flag indicating if past delivery dates should be ignored",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "sourceCompanyIdPath": {
        "name": "sourceCompanyId",
        "in": "path",
        "description": "source company id",
        "required": true,
        "schema": {
          "type": "string",
          "maxLength": 20
        }
      },
      "sharedOfferIdPath": {
        "name": "sharedOfferId",
        "in": "path",
        "description": "unique id of the sharedOffer",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "deliveryListDateIdPath": {
        "name": "deliveryListDateId",
        "in": "path",
        "description": "unique id of the delivery list date",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "ivwRuleIdPath": {
        "name": "ivwRuleId",
        "in": "path",
        "description": "unique id of the ivw rule",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "misuseRuleIdPath": {
        "name": "misuseRuleId",
        "in": "path",
        "description": "unique id of the misuse rule",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "parameters-plenigoOfferIdQuery": {
        "name": "plenigoOfferId",
        "in": "query",
        "description": "plenigo offer id of the offer",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "sortTreeLeafIdQuery": {
        "name": "leafId",
        "in": "query",
        "description": "unique id of the sort tree leaf",
        "required": false,
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "offerIdPath": {
        "name": "offerId",
        "in": "path",
        "description": "unique id of the offer",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "priceCountrySegmentIdPath": {
        "name": "priceCountrySegmentId",
        "in": "path",
        "description": "unique id of the price country segment",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "priceIssueIdPath": {
        "name": "priceIssueId",
        "in": "path",
        "description": "unique id of the price issue",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "productContractIdPath": {
        "name": "productContractId",
        "in": "path",
        "description": "unique id of the product contract",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "productTagIdPath": {
        "name": "productTagId",
        "in": "path",
        "description": "unique id of the product tag",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "relationRuleIdPath": {
        "name": "relationRuleId",
        "in": "path",
        "description": "unique id of the relation rule",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "plenigoShoppingCartIdQuery": {
        "name": "plenigoShoppingCartId",
        "in": "query",
        "description": "plenigo shopping cart id of the shopping cart",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "shoppingCartIdPath": {
        "name": "shoppingCartId",
        "in": "path",
        "description": "unique id of the shopping cart",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "customerIdQuery": {
        "name": "customerId",
        "in": "query",
        "description": "unique id of the customer",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "statusQuery": {
        "name": "status",
        "in": "query",
        "description": "status of the refund",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "CLOSED",
            "IGNORED",
            "OPEN",
            "PROCESSING",
            "REJECTED"
          ]
        }
      },
      "refundIdPath": {
        "name": "refundId",
        "in": "path",
        "description": "unique id of the refund",
        "required": true,
        "schema": {
          "type": "string",
          "maxLength": 32
        }
      },
      "sessionTokenQuery": {
        "name": "sessionToken",
        "in": "query",
        "description": "active customer session",
        "required": true,
        "schema": {
          "type": "string",
          "maxLength": 10000
        }
      },
      "transferTokenQuery": {
        "name": "transferToken",
        "in": "query",
        "description": "transfer token",
        "required": true,
        "schema": {
          "type": "string",
          "maxLength": 50
        }
      },
      "requestTokenQuery": {
        "name": "requestToken",
        "in": "query",
        "description": "the request token to get the new API token",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "customerOptInIdPath": {
        "name": "customerOptInId",
        "in": "path",
        "description": "unique id of a customer opt in",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "ibanQuery": {
        "name": "iban",
        "in": "query",
        "description": "<a href=\"https://en.wikipedia.org/wiki/International_Bank_Account_Number\" target=\"_blank\">IBAN</a>",
        "schema": {
          "type": "string",
          "minLength": 18,
          "maxLength": 32
        }
      },
      "blockedIbanIdPath": {
        "name": "blockedIbanId",
        "in": "path",
        "description": "unique id of the blocked iban",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "customerCancellationReasonIdPath": {
        "name": "customerCancellationReasonId",
        "in": "path",
        "description": "unique id of a customer cancellation reason",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "customerTermIdPath": {
        "name": "customerTermId",
        "in": "path",
        "description": "unique id of a customer term",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "textModuleTypeQuery": {
        "name": "type",
        "in": "query",
        "description": "type of the text module",
        "required": true,
        "schema": {
          "type": "string",
          "enum": [
            "LINK",
            "HTML_TEXT",
            "PLAIN_TEXT"
          ]
        }
      },
      "textModuleIdPath": {
        "name": "textModuleId",
        "in": "path",
        "description": "unique id of a text module",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "sortTreeLeafTypePath": {
        "name": "type",
        "in": "path",
        "description": "type of the sort tree leaf",
        "required": true,
        "schema": {
          "type": "string",
          "enum": [
            "OFFER",
            "PRICE_ISSUE",
            "PRODUCT_CONTRACT",
            "TEXT_MODULE"
          ]
        }
      },
      "sortTreeLeafIdPath": {
        "name": "sortTreeLeafId",
        "in": "path",
        "description": "unique id of the sort tree leaf",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "sftpLogEntryIdPath": {
        "name": "sftpLogEntryId",
        "in": "path",
        "description": "unique id of the sftp log entry",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "subscriptionIdPath": {
        "name": "subscriptionId",
        "in": "path",
        "description": "unique id of the subscription",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "cancellationReasonUniqueIdQuery": {
        "name": "cancellationReasonUniqueId",
        "in": "query",
        "description": "unique id of the cancellation reason",
        "schema": {
          "type": "string"
        }
      },
      "useAccountingPeriodQuery": {
        "name": "useAccountingPeriod",
        "in": "query",
        "description": "flag indicating that the accounting should be used for date calculation instead ot the term period",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "chainIdPath": {
        "name": "chainId",
        "in": "path",
        "description": "unique id of the subscription chain",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "deliveryCustomerIdQuery": {
        "name": "deliveryCustomerId",
        "in": "query",
        "description": "unique id of the delivery customer",
        "schema": {
          "type": "string"
        }
      },
      "plenigoTransactionIdQuery": {
        "name": "plenigoTransactionId",
        "in": "query",
        "description": "plenigo transaction id",
        "schema": {
          "type": "string"
        }
      },
      "pspTransactionIdQuery": {
        "name": "pspTransactionId",
        "in": "query",
        "description": "PSP transaction id",
        "schema": {
          "type": "string"
        }
      },
      "transactionIdPath": {
        "name": "transactionId",
        "in": "path",
        "description": "unique id of the transaction",
        "required": true,
        "schema": {
          "type": "string",
          "maxLength": 32
        }
      },
      "voucherCodeQuery": {
        "name": "voucherCode",
        "in": "query",
        "description": "voucher code to get",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "callbackQuery": {
        "name": "callback",
        "in": "query",
        "description": "if set to true the call to this endpoint will return a promise ID and creates a new voucher request callback that contains the data provided. The callback also returns the promise ID returned by this call to be identified.",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "campaignIdPath": {
        "name": "campaignId",
        "in": "path",
        "description": "unique id of the campaign",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "channelIdPath": {
        "name": "channelId",
        "in": "path",
        "description": "unique id of the channel",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "voucherStatusQuery": {
        "name": "voucherStatus",
        "in": "query",
        "description": "status of the voucher",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "ACTIVE",
            "CANCELLED",
            "INACTIVE",
            "DELETED"
          ]
        }
      },
      "voucherCodePath": {
        "name": "voucherCode",
        "in": "path",
        "description": "voucher code to validate",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "customerCreditWalletIdPath": {
        "name": "customerCreditWalletId",
        "in": "path",
        "description": "id of the credit wallet",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "uniqueWalletIdPath": {
        "name": "uniqueId",
        "in": "path",
        "description": "unique id of the wallet",
        "required": true,
        "schema": {
          "type": "string"
        }
      }
    },
    "schemas": {
      "ApiSearchResultBase": {
        "type": "object",
        "properties": {
          "endingBeforeId": {
            "description": "A cursor for use in pagination. endingBefore is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_bar, your subsequent call can include endingBefore=obj_bar in order to fetch the previous page of the list.",
            "type": "string",
            "maxLength": 100
          },
          "startingAfterId": {
            "description": "A cursor for use in pagination. startingAfter is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include startingAfter=obj_foo in order to fetch the next result set.",
            "type": "string",
            "maxLength": 100
          }
        }
      },
      "ApiBaseDate": {
        "type": "object",
        "properties": {
          "createdDate": {
            "description": "time the object was created with time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 17:32:28",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "changedDate": {
            "description": "time the object was changed with time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 17:32:28",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          }
        }
      },
      "ApiBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBaseDate"
          }
        ],
        "type": "object",
        "properties": {
          "createdBy": {
            "description": "id who created the object",
            "type": "string",
            "maxLength": 100
          },
          "createdByType": {
            "description": "type of created by",
            "type": "string",
            "enum": [
              "API",
              "CUSTOMER",
              "MERCHANT",
              "SYSTEM"
            ]
          },
          "changedBy": {
            "description": "id who changed the object",
            "type": "string",
            "maxLength": 100
          },
          "changedByType": {
            "description": "type of changed by",
            "type": "string",
            "enum": [
              "API",
              "CUSTOMER",
              "MERCHANT",
              "SYSTEM"
            ]
          }
        }
      },
      "AccessRightItemData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBase"
          }
        ],
        "type": "object",
        "properties": {
          "lifeTimeStart": {
            "description": "date the access right will start with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "lifeTimeEnd": {
            "description": "date the access right will end with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "accessTimeStart": {
            "description": "time the access right will start with time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 17:32:28",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "accessTimeEnd": {
            "description": "time the access right will end with time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 17:32:28",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "maxCacheDate": {
            "description": "max cache date with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "data": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "maxLength": 20
                },
                "value": {
                  "type": "string",
                  "maxLength": 2000
                }
              }
            }
          },
          "blocked": {
            "description": "flag indicating if access is blocked",
            "type": "boolean"
          },
          "productId": {
            "description": "id of the product bought",
            "type": "string",
            "maxLength": 100
          },
          "plenigoOfferId": {
            "description": "if the product is based on a plenigo offer the plenigo offer id is provided here",
            "type": "string",
            "minLength": 20,
            "maxLength": 20
          },
          "plenigoProductId": {
            "description": "if the product is based on a plenigo offer the plenigo product id is provided here - can be identically to the productId",
            "type": "string",
            "minLength": 20,
            "maxLength": 20
          },
          "plenigoStepId": {
            "description": "if the product is based on a plenigo offer the plenigo step id is provided here",
            "type": "string",
            "minLength": 20,
            "maxLength": 20
          },
          "accessRightUniqueId": {
            "description": "unique id of the access right this access right grants access to",
            "type": "string",
            "pattern": "^[0-9\\\\-a-zA-Z]{2,30}$"
          },
          "itemType": {
            "description": "type of this access right item",
            "type": "string",
            "enum": [
              "EXTERNAL",
              "SINGLE_PRODUCT",
              "SUBSCRIPTION_ITEM"
            ]
          },
          "itemId": {
            "description": "the id this access right belongs to",
            "type": "string",
            "maxLength": 30
          },
          "accessRightData": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "maxLength": 30
                },
                "value": {
                  "type": "string",
                  "maxLength": 200
                }
              }
            }
          }
        }
      },
      "AccessRightData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBase"
          }
        ],
        "type": "object",
        "properties": {
          "customerId": {
            "description": "unique id of the customer the access right belongs to",
            "type": "string",
            "pattern": "^[0-9]{1,18}$"
          },
          "customerBlocked": {
            "description": "flag indicating if customer is blocked completely",
            "type": "boolean"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessRightItemData"
            }
          }
        }
      },
      "AccessRightsData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiSearchResultBase"
          }
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessRightData"
            }
          }
        }
      },
      "ErrorResultBase": {
        "type": "object",
        "properties": {
          "errorCode": {
            "description": "plenigo error code",
            "type": "integer",
            "format": "int32"
          },
          "errorMessage": {
            "description": "plenigo error description",
            "type": "string"
          }
        },
        "required": [
          "errorCode",
          "errorMessage"
        ]
      },
      "ValidationError": {
        "type": "object",
        "properties": {
          "field": {
            "description": "field name with the error",
            "type": "string"
          },
          "error": {
            "description": "error description",
            "type": "string"
          },
          "value": {
            "description": "value of the field",
            "type": "string"
          }
        },
        "required": [
          "field",
          "error",
          "value"
        ]
      },
      "ErrorResult": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorResultBase"
          }
        ],
        "type": "object",
        "properties": {
          "validationErrors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        },
        "required": [
          "errorCode",
          "errorMessage"
        ]
      },
      "AccessRightItemCreation": {
        "type": "object",
        "properties": {
          "lifeTimeStart": {
            "description": "date the access right will start with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "lifeTimeEnd": {
            "description": "date the access right will end with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "accessTimeStart": {
            "description": "time the access right will start with time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 17:32:28",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "accessTimeEnd": {
            "description": "time the access right will end with time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 17:32:28",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "maxCacheDate": {
            "description": "max cache date with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "data": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "maxLength": 20
                },
                "value": {
                  "type": "string",
                  "maxLength": 2000
                }
              }
            }
          },
          "blocked": {
            "description": "flag indicating if access is blocked",
            "type": "boolean"
          }
        }
      },
      "SuccessStatus": {
        "type": "object",
        "properties": {
          "success": {
            "description": "success status",
            "type": "boolean"
          },
          "promiseId": {
            "description": "in case of long running calls it contains the id that identifies the corresponding callback that contains the result",
            "type": "string"
          }
        }
      },
      "AccessRightItemDataGranted": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AccessRightItemData"
          }
        ],
        "type": "object",
        "properties": {
          "accessGranted": {
            "description": "flag indicating if access is granted",
            "type": "boolean"
          }
        }
      },
      "AccessRightDataGranted": {
        "type": "object",
        "properties": {
          "customerId": {
            "description": "unique id of the customer the access right belongs to",
            "type": "string",
            "pattern": "^[0-9]{1,18}$"
          },
          "customerBlocked": {
            "description": "flag indicating if customer is blocked completely",
            "type": "boolean"
          },
          "accessGranted": {
            "description": "flag indicating if at least one access right is granted",
            "type": "boolean"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessRightItemDataGranted"
            }
          }
        }
      },
      "CostCenterCreation": {
        "type": "object",
        "properties": {
          "costCenter": {
            "description": "Cost center value of the cost center",
            "type": "string",
            "maxLength": 10
          },
          "purchaseNumber": {
            "description": "Purchase number to use",
            "type": "string",
            "maxLength": 20
          },
          "description": {
            "description": "description of the cost center",
            "type": "string",
            "maxLength": 400
          },
          "shortDescription": {
            "description": "short description of the cost center",
            "type": "string",
            "maxLength": 20
          }
        }
      },
      "CostCenter": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CostCenterCreation"
          },
          {
            "$ref": "#/components/schemas/ApiBase"
          }
        ],
        "type": "object",
        "properties": {
          "costCenterId": {
            "description": "unique id of the cost center in the context of a company",
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "costCenterId",
          "costCenter"
        ]
      },
      "CostCenters": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CostCenter"
            }
          }
        }
      },
      "LedgerCreation": {
        "type": "object",
        "properties": {
          "title": {
            "description": "Title of the ledger",
            "type": "string",
            "maxLength": 100
          },
          "description": {
            "description": "description of the ledger",
            "type": "string",
            "maxLength": 400
          },
          "deliveryCommitmentAccount": {
            "description": "delivery commitment account of the ledger",
            "type": "string",
            "maxLength": 80
          },
          "voucherDeliveryCommitmentAccount": {
            "description": "voucher delivery commitment account of the ledger",
            "type": "string",
            "maxLength": 80
          },
          "revenueAccount": {
            "description": "revenue account of the ledger",
            "type": "string",
            "maxLength": 80
          },
          "bankAccountAmazonPay": {
            "description": "bank account for Amazon Pay of the ledger",
            "type": "string",
            "maxLength": 80
          },
          "bankAccountApplePay": {
            "description": "bank account for Apple Pay of the ledger",
            "type": "string",
            "maxLength": 80
          },
          "bankAccountBilling": {
            "description": "bank account for billing of the ledger",
            "type": "string",
            "maxLength": 80
          },
          "bankAccountCreditCard": {
            "description": "bank account for credit card of the ledger",
            "type": "string",
            "maxLength": 80
          },
          "bankAccountGooglePay": {
            "description": "bank account for Google Pay of the ledger",
            "type": "string",
            "maxLength": 80
          },
          "bankAccountPayPal": {
            "description": "bank account for PayPal of the ledger",
            "type": "string",
            "maxLength": 80
          },
          "bankAccountSepa": {
            "description": "bank account for sepa of the ledger",
            "type": "string",
            "maxLength": 80
          },
          "creditLossAccount": {
            "description": "credit loss account of the ledger",
            "type": "string",
            "maxLength": 80
          },
          "salesTax": {
            "description": "sales tax account of the ledger",
            "type": "string",
            "maxLength": 80
          },
          "b2bDeliveryCommitmentAccount": {
            "description": "b2b delivery commitment account of the ledger",
            "type": "string",
            "maxLength": 80
          },
          "b2bVoucherDeliveryCommitmentAccount": {
            "description": "b2b voucher delivery commitment account of the ledger",
            "type": "string",
            "maxLength": 80
          },
          "b2bRevenueAccount": {
            "description": "b2b revenue account of the ledger",
            "type": "string",
            "maxLength": 80
          },
          "b2bBankAccountAmazonPay": {
            "description": "b2b bank account for Amazon Pay of the ledger",
            "type": "string",
            "maxLength": 80
          },
          "b2bBankAccountApplePay": {
            "description": "b2b bank account for Apple Pay of the ledger",
            "type": "string",
            "maxLength": 80
          },
          "b2bBankAccountBilling": {
            "description": "b2b bank account for billing of the ledger",
            "type": "string",
            "maxLength": 80
          },
          "b2bBankAccountCreditCard": {
            "description": "b2b bank account for credit card of the ledger",
            "type": "string",
            "maxLength": 80
          },
          "b2bBankAccountGooglePay": {
            "description": "b2b bank account for Google Pay of the ledger",
            "type": "string",
            "maxLength": 80
          },
          "b2bBankAccountPayPal": {
            "description": "b2b bank account for PayPal of the ledger",
            "type": "string",
            "maxLength": 80
          },
          "b2bBankAccountSepa": {
            "description": "b2b bank account for sepa of the ledger",
            "type": "string",
            "maxLength": 80
          },
          "b2bCreditLossAccount": {
            "description": "b2b credit loss account of the ledger",
            "type": "string",
            "maxLength": 80
          },
          "b2bSalesTax": {
            "description": "b2b sales tax account of the ledger",
            "type": "string",
            "maxLength": 80
          },
          "customAccountings": {
            "description": "custom accountings of the ledger",
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "maxLength": 20
                },
                "value": {
                  "type": "string",
                  "maxLength": 80
                }
              }
            }
          }
        },
        "required": [
          "title"
        ]
      },
      "Ledger": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LedgerCreation"
          },
          {
            "$ref": "#/components/schemas/ApiBase"
          }
        ],
        "type": "object",
        "properties": {
          "ledgerId": {
            "description": "unique id of the ledger in the context of a company",
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "ledgerId",
          "title"
        ]
      },
      "Ledgers": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Ledger"
            }
          }
        }
      },
      "TaxCodeCreation": {
        "type": "object",
        "properties": {
          "countryType": {
            "description": "type of the country",
            "type": "string",
            "enum": [
              "EU",
              "EU_B2B",
              "SINGLE_COUNTRY",
              "WORLD"
            ]
          },
          "countries": {
            "description": "array of country codes formatted as <a href=\"https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\" target=\"_blank\">ISO 3166-1 alpha-2</a>",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tax": {
            "description": "tax percentage operated on this order item",
            "type": "number",
            "format": "double",
            "minimum": 0,
            "maximum": 100
          },
          "analogTag": {
            "description": "tag for the analog tax code",
            "type": "string",
            "maxLength": 80
          },
          "digitalTag": {
            "description": "tag for the digital tax code",
            "type": "string",
            "maxLength": 80
          },
          "description": {
            "description": "description of the tax code",
            "type": "string",
            "maxLength": 100
          }
        },
        "required": [
          "countryType",
          "countries",
          "tax",
          "analogTag",
          "digitalTag"
        ]
      },
      "TaxCode": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TaxCodeCreation"
          },
          {
            "$ref": "#/components/schemas/ApiBase"
          }
        ],
        "type": "object",
        "properties": {
          "taxCodeId": {
            "description": "unique id of the tax code in the context of a company",
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "taxCodeId",
          "countryType",
          "countries",
          "tax",
          "analogTag",
          "digitalTag",
          "changedDate"
        ]
      },
      "TaxCodes": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaxCode"
            }
          }
        }
      },
      "Activity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBase"
          }
        ],
        "type": "object",
        "properties": {
          "activityId": {
            "description": "unique id of the activity",
            "type": "integer",
            "format": "int64"
          },
          "customerId": {
            "description": "unique id of the customer the activity is related to",
            "type": "string",
            "pattern": "^[0-9]{1,18}$"
          },
          "activityType": {
            "description": "type of the activity. When activity type is COMMENTS, EMAIL, LETTER or PHONE then newObject will contain a activity message.",
            "type": "string",
            "enum": [
              "ACCESS_BLOCKED",
              "ACCESS_UNBLOCKED",
              "COMMENTS",
              "CUSTOMER_ACCESS_UNBLOCKED",
              "CUSTOMER_BLOCKED",
              "CUSTOMER_UNBLOCKED",
              "EMAIL",
              "LETTER",
              "PHONE",
              "SYSTEM",
              "SYSTEM_API",
              "SYSTEM_CUSTOMER",
              "SYSTEM_SUPPORTER",
              "SYSTEM_EMAIL",
              "SYSTEM_MIGRATION"
            ]
          },
          "jsonObjectType": {
            "description": "type of the json object",
            "type": "string",
            "enum": [
              "ACCESS_RIGHT_ITEM",
              "AMAZON_PAY",
              "BANK_ACCOUNT",
              "CREDIT_CARD",
              "CUSTOMER",
              "DELIVERY_ADDRESS",
              "INVOICE",
              "INVOICE_ADDRESS",
              "ORDER",
              "PAYPAL",
              "SUBSCRIPTION"
            ]
          },
          "jsonObjectIdentifier": {
            "description": "unique id of the owner object of this activity",
            "type": "string",
            "maxLength": 30
          },
          "oldObject": {
            "description": "json object with the old data",
            "type": "object"
          },
          "newObject": {
            "description": "json object with the new data",
            "type": "object"
          },
          "reason": {
            "description": "reason of the activity",
            "type": "string",
            "enum": [
              "DATA_CHANGED",
              "DATA_CREATED",
              "DATA_DELETED"
            ]
          }
        }
      },
      "Activities": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Activity"
            }
          }
        }
      },
      "AddressBase": {
        "type": "object",
        "properties": {
          "businessAddress": {
            "description": "flag indicating if address represents a private or a business address",
            "type": "boolean"
          },
          "salutation": {
            "description": "salutation to identify the correct designation of a customer",
            "type": "string",
            "enum": [
              "DIVERSE",
              "MR",
              "MRS",
              "NONE"
            ]
          },
          "title": {
            "description": "title of the customer",
            "type": "string",
            "maxLength": 100
          },
          "firstName": {
            "description": "first name of the customer - first name and last name or company name are required",
            "type": "string",
            "maxLength": 100
          },
          "lastName": {
            "description": "last name of the customer - first name and last name or company name are required",
            "type": "string",
            "maxLength": 100
          },
          "companyName": {
            "description": "company name - first name and last name or company name are required",
            "type": "string",
            "maxLength": 100
          },
          "additionalCompanyInfo": {
            "description": "additional information belonging to the company",
            "type": "string",
            "maxLength": 100
          },
          "street": {
            "description": "street name",
            "type": "string",
            "maxLength": 100
          },
          "streetNumber": {
            "description": "street number",
            "type": "string",
            "maxLength": 100
          },
          "additionalStreetInfo": {
            "description": "additional information describing address",
            "type": "string",
            "maxLength": 100
          },
          "postbox": {
            "description": "postbox id",
            "type": "string",
            "maxLength": 100
          },
          "postcode": {
            "description": "postcode",
            "type": "string",
            "maxLength": 100
          },
          "city": {
            "description": "city",
            "type": "string",
            "maxLength": 100
          },
          "state": {
            "description": "state",
            "type": "string",
            "maxLength": 2
          },
          "country": {
            "description": "country code formatted as <a href=\"https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\" target=\"_blank\">ISO 3166-1 alpha-2</a>",
            "type": "string",
            "minLength": 2,
            "maxLength": 2
          },
          "vatNumber": {
            "description": "VAT number of a member country of the European Union",
            "type": "string",
            "maxLength": 20
          },
          "phoneNumber": {
            "description": "phone number of the customer formatted as <a href=\"https://en.wikipedia.org/wiki/E.164\" target=\"_blank\">E.164</a>",
            "type": "string",
            "pattern": "^\\+?[1-9]\\d{1,14}$",
            "maxLength": 100
          },
          "deliveryInformation": {
            "description": "delivery information",
            "type": "string",
            "maxLength": 100
          },
          "academicTitle": {
            "description": "academic title",
            "type": "string",
            "maxLength": 100
          },
          "jobPosition": {
            "description": "job position",
            "type": "string",
            "maxLength": 100
          },
          "validationStatus": {
            "description": "validation status of the address",
            "type": "string",
            "enum": [
              "NONE",
              "VALID",
              "INVALID",
              "SUSPECT",
              "OVERRIDDEN"
            ]
          },
          "validationHash": {
            "description": "validation hash of a valid address",
            "type": "string"
          }
        }
      },
      "AddressChange": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AddressBase"
          }
        ],
        "type": "object",
        "properties": {
          "preferred": {
            "description": "flag indicating if address is default selection for address type",
            "type": "boolean"
          }
        }
      },
      "AddressCreation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AddressChange"
          }
        ],
        "type": "object",
        "properties": {
          "type": {
            "description": "address type",
            "type": "string",
            "enum": [
              "INVOICE",
              "DELIVERY"
            ]
          },
          "customerId": {
            "description": "unique id of the customer the address belongs to",
            "type": "string",
            "pattern": "^[0-9]{1,18}$"
          }
        },
        "required": [
          "customerId",
          "type"
        ]
      },
      "Address": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AddressCreation"
          },
          {
            "$ref": "#/components/schemas/ApiBase"
          }
        ],
        "type": "object",
        "properties": {
          "addressId": {
            "description": "unique id of the address in the context of a company",
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "Addresses": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Address"
            }
          }
        }
      },
      "FutureAddress": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AddressBase"
          }
        ],
        "type": "object",
        "properties": {
          "activationDate": {
            "description": "date the future address entity will get the active address with date notation as defined for example, 2017-07-21",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          }
        }
      },
      "FutureAddresses": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FutureAddress"
            }
          }
        }
      },
      "WbzAddressCreation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AddressBase"
          }
        ],
        "type": "object",
        "properties": {
          "customerId": {
            "description": "unique id of the customer the address belongs to",
            "type": "string",
            "pattern": "^[0-9]{1,18}$"
          }
        },
        "required": [
          "customerId",
          "type"
        ]
      },
      "AnalyticsCount": {
        "type": "object",
        "properties": {
          "time": {
            "description": "time the count is related to with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "amount": {
            "description": "amount of elements for the specified time",
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "AnalyticsCountResult": {
        "type": "object",
        "properties": {
          "counts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnalyticsCount"
            }
          }
        }
      },
      "AnalyticsPaymentMethod": {
        "type": "object",
        "properties": {
          "time": {
            "description": "time the count is related to with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "paymentMethod": {
            "description": "type of payment method",
            "type": "string",
            "enum": [
              "AMAZON_PAY",
              "APPLE_PAY",
              "BANK_ACCOUNT",
              "BILLING",
              "CREDIT_CARD",
              "GOOGLE_PAY",
              "IDEAL",
              "PAYPAL",
              "POSTFINANCE",
              "SOFORT",
              "TWINT",
              "ZERO"
            ]
          },
          "amount": {
            "description": "amount of elements for the specified time",
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "AnalyticsPaymentMethodResult": {
        "type": "object",
        "properties": {
          "counts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnalyticsPaymentMethod"
            }
          }
        }
      },
      "AnalyticsRevenue": {
        "type": "object",
        "properties": {
          "time": {
            "description": "time the count is related to with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "sum": {
            "description": "sum of revenues",
            "type": "number",
            "format": "double"
          },
          "currency": {
            "description": "currency of the subscription formatted as <a href=\"https://en.wikipedia.org/wiki/ISO_4217\" target=\"_blank\">ISO 4217, alphabetic code</a>",
            "type": "string"
          }
        }
      },
      "AnalyticsRevenueResult": {
        "type": "object",
        "properties": {
          "revenues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnalyticsRevenue"
            }
          }
        }
      },
      "AnalyticsGroupResult": {
        "type": "object",
        "properties": {
          "types": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string"
                },
                "value": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          }
        }
      },
      "AnalyticsPaymentPeriods": {
        "type": "object",
        "properties": {
          "time": {
            "description": "time the count is related to with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "amount": {
            "description": "amount of elements for the specified time",
            "type": "integer",
            "format": "int32"
          },
          "paymentMethod": {
            "description": "type of payment method",
            "type": "string",
            "enum": [
              "AMAZON_PAY",
              "APPLE_PAY",
              "BANK_ACCOUNT",
              "BILLING",
              "CREDIT_CARD",
              "GOOGLE_PAY",
              "IDEAL",
              "PAYPAL",
              "POSTFINANCE",
              "SOFORT",
              "TWINT",
              "ZERO"
            ]
          },
          "success": {
            "description": "flag indicating if transaction was a success or a failure",
            "type": "boolean"
          },
          "failureReason": {
            "description": "initial reason for the failed payment periods",
            "type": "string",
            "enum": [
              "CUSTOMER",
              "MERCHANT",
              "SYSTEM"
            ]
          }
        }
      },
      "AnalyticsPaymentPeriodsResult": {
        "type": "object",
        "properties": {
          "counts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnalyticsPaymentPeriods"
            }
          }
        }
      },
      "AnalyticsTransactions": {
        "type": "object",
        "properties": {
          "time": {
            "description": "time the count is related to with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "amount": {
            "description": "amount of elements for the specified time",
            "type": "integer",
            "format": "int32"
          },
          "paymentMethod": {
            "description": "type of payment method",
            "type": "string",
            "enum": [
              "AMAZON_PAY",
              "APPLE_PAY",
              "BANK_ACCOUNT",
              "BILLING",
              "CREDIT_CARD",
              "GOOGLE_PAY",
              "IDEAL",
              "PAYPAL",
              "POSTFINANCE",
              "SOFORT",
              "TWINT",
              "ZERO"
            ]
          },
          "paymentAction": {
            "description": "type of payment action",
            "type": "string",
            "enum": [
              "AMAZON_EXECUTE_PAYMENT",
              "AMAZON_EXECUTE_REFUND",
              "AMAZON_FINISH_CHECKOUT_SESSION",
              "AMAZON_PAY_INITIALIZATION",
              "BANK_FEES",
              "CREDIT_CARD_INITIALIZATION",
              "CREDIT_CARD_VERIFICATION",
              "CREDIT_CARD_AUTHORIZATION",
              "CREDIT_CARD_PRE_AUTHORIZATION",
              "CREDIT_CARD_REFUND",
              "CREDIT_CARD_PAYMENT",
              "CREDIT_CARD_CHARGEBACK",
              "IDEAL_INITIALIZATION",
              "IDEAL_DATA",
              "PAYPAL_PAYMENT",
              "PAYPAL_PAYOUT",
              "PAYPAL_PAYMENT_FAILED",
              "PAYPAL_REFERENCE_TRANSACTION",
              "PAYPAL_REFUND",
              "SEPA_DEBIT",
              "SEPA_DEBIT_RETURN",
              "SEPA_MANDATE_CREATION",
              "SEPA_VOID",
              "SOFORT_PAYMENT",
              "SOFORT_REFUND"
            ]
          },
          "paymentStatus": {
            "description": "state of the transaction",
            "type": "string",
            "enum": [
              "SUCCESS",
              "PENDING",
              "FAILURE"
            ]
          }
        }
      },
      "AnalyticsTransactionsResult": {
        "type": "object",
        "properties": {
          "counts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnalyticsTransactions"
            }
          }
        }
      },
      "AppleAppStoreReceiptItem": {
        "type": "object",
        "properties": {
          "quantity": {
            "description": "number of items purchased",
            "type": "string"
          },
          "productId": {
            "description": "product identifier of the item that was purchased",
            "type": "string"
          },
          "transactionId": {
            "description": "transaction identifier of the item that was purchased",
            "type": "string"
          },
          "originalTransactionId": {
            "description": "for a transaction that restores a previous transaction, the transaction identifier of the original transaction - otherwise, identical to the transaction identifier",
            "type": "string"
          },
          "webOrderLineItemId": {
            "description": "primary key for identifying subscription purchases",
            "type": "string"
          },
          "promotionalOfferId": {
            "description": "id of the promotional offer",
            "type": "string"
          },
          "subscriptionGroupIdentifier": {
            "description": "identifier for the subscription group",
            "type": "string"
          },
          "isTrialPeriod": {
            "description": "value for this key is \"true\" if the customer’s subscription is currently in the free trial period, or \"false\" if not",
            "type": "string"
          },
          "isInIntroOfferPeriod": {
            "description": "value for this key is \"true\" if the customer’s subscription is currently in an introductory price period, or \"false\" if not.",
            "type": "string"
          },
          "isUpgraded": {
            "description": "flag indicating if item is an upgrade of another item",
            "type": "string"
          },
          "expiresDate": {
            "description": "expiration date for the subscription with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "purchaseDate": {
            "description": "date and time that the item was purchased with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "originalPurchaseDate": {
            "description": "for a transaction that restores a previous transaction, the date of the original transaction with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "cancellationDate": {
            "description": "for a transaction that was canceled by Apple customer support, the time and date of the cancellation - for an auto-renewable subscription plan that was upgraded, the time and date of the upgrade transaction with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "cancellationReason": {
            "description": "for a transaction that was canceled, the reason for cancellation",
            "type": "string"
          }
        }
      },
      "AppleAppStoreReceipt": {
        "type": "object",
        "properties": {
          "receiptType": {
            "description": "type of receipt generated (e.g. Production, ProductionVPP, ProductionSandbox, ProductionVPPSandbox)",
            "type": "string"
          },
          "adamID": {
            "description": "generated by App Store Connect and used by the App Store to uniquely identify the app purchased",
            "type": "integer",
            "format": "int64"
          },
          "appItemID": {
            "description": "generated by App Store Connect and used by the App Store to uniquely identify the app purchased",
            "type": "string"
          },
          "bundleID": {
            "description": "bundle identifier for the app to which the receipt belongs",
            "type": "string"
          },
          "applicationVersion": {
            "description": "app’s version number",
            "type": "string"
          },
          "downloadID": {
            "description": "unique identifier for the app download transaction",
            "type": "integer",
            "format": "int64"
          },
          "versionExternalIdentifier": {
            "description": "arbitrary number that identifies a revision of your app",
            "type": "string"
          },
          "originalApplicationVersion": {
            "description": "version of the app that the user originally purchased",
            "type": "string"
          },
          "receiptCreationDate": {
            "description": "time the App Store generated the receipt, in the Pacific Time zone",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "requestDate": {
            "description": "time the request to the verifyReceipt endpoint was processed and the response was generated",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "originalPurchaseDate": {
            "description": "time of the original app purchase, in the Pacific Time zone",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AppleAppStoreReceiptItem"
            }
          }
        }
      },
      "AppleAppStorePurchase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBase"
          }
        ],
        "type": "object",
        "properties": {
          "appleAppStorePurchaseId": {
            "description": "unique id of the purchase",
            "type": "integer",
            "format": "int64"
          },
          "purchaseDate": {
            "description": "date of the purchase",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "token": {
            "description": "token for the purchase",
            "type": "string"
          },
          "valid": {
            "description": "flag indicating if purchase is valid",
            "type": "boolean"
          },
          "appStoreOrderId": {
            "description": "id of the app store order if mapped",
            "type": "integer",
            "format": "int64"
          },
          "receipt": {
            "$ref": "#/components/schemas/AppleAppStoreReceipt"
          }
        }
      },
      "AppleAppStorePurchases": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AppleAppStorePurchase"
            }
          }
        }
      },
      "AppleAppStorePurchaseAddition": {
        "type": "object",
        "properties": {
          "appIdentifier": {
            "description": "identifier of the application as defined in the plenigo backend to retrieve the according secret",
            "type": "string",
            "maxLength": 100
          },
          "receiptData": {
            "type": "array",
            "minItems": 1,
            "maxItems": 100,
            "items": {
              "description": "receipt data identifying the purchase",
              "type": "string",
              "maxLength": 10000
            }
          }
        }
      },
      "AppStoreAccessRight": {
        "type": "object",
        "properties": {
          "uniqueId": {
            "description": "access right unique id that will be associated with this app store purchase after association",
            "type": "string",
            "maxLength": 100
          },
          "additionalData": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "maxLength": 30
                },
                "value": {
                  "type": "string",
                  "maxLength": 200
                }
              }
            }
          }
        }
      },
      "AppStoreAccessRights": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AppStoreAccessRight"
            }
          }
        }
      },
      "AppStorePurchaseDetail": {
        "type": "object",
        "properties": {
          "purchaseDate": {
            "description": "date the product was purchased with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "valid": {
            "description": "flag indicating purchase is still valid",
            "type": "boolean"
          },
          "accessRightUniqueId": {
            "description": "access right unique id that will be associated with this app store purchase after association",
            "type": "string",
            "maxLength": 100
          },
          "appStoreProductId": {
            "description": "id of the product as set in the app store",
            "type": "string",
            "maxLength": 100
          },
          "accessRights": {
            "$ref": "#/components/schemas/AppStoreAccessRights"
          }
        }
      },
      "AppStorePurchase": {
        "type": "object",
        "properties": {
          "customerId": {
            "description": "id of the customer purchase is associated with - only set if purchase is already associated",
            "type": "string",
            "pattern": "^[0-9]{1,18}$"
          },
          "token": {
            "description": "token that uniquely identifies this purchase and is used for further API requests",
            "type": "string",
            "maxLength": 100
          },
          "hasOrders": {
            "description": "flag indicating if purchase has orders",
            "type": "boolean"
          },
          "orders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AppStorePurchaseDetail"
            }
          }
        }
      },
      "AppStorePurchaseList": {
        "type": "object",
        "properties": {
          "purchases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AppStorePurchase"
            }
          }
        }
      },
      "AppStoreAssociation": {
        "type": "object",
        "properties": {
          "customerId": {
            "description": "id of the customer to associate purchase with",
            "type": "string",
            "pattern": "^[0-9]{1,18}$"
          }
        }
      },
      "GooglePlaySubscriptionPurchase": {
        "type": "object",
        "properties": {
          "autoRenewing": {
            "description": "whether the subscription will automatically be renewed when it reaches its current expiry time",
            "type": "boolean"
          },
          "autoResumeTimeMillis": {
            "description": "time at which the subscription will be automatically resumed, in milliseconds since the Epoch - only present if the user has requested to pause the subscription",
            "type": "integer",
            "format": "int64"
          },
          "cancelReason": {
            "description": "the reason why a subscription was canceled or is not auto-renewing",
            "type": "integer",
            "format": "int64"
          },
          "cancelSurveyReason": {
            "description": "information provided by the user when they complete the subscription cancellation flow (cancellation reason survey)",
            "type": "integer",
            "format": "int64"
          },
          "userInputCancelReason": {
            "description": "customized input cancel reason from the user. Only present when cancelReason is 0",
            "type": "string"
          },
          "countryCode": {
            "description": "ISO 3166-1 alpha-2 billing country/region code of the user at the time the subscription was granted",
            "type": "string"
          },
          "developerPayload": {
            "description": "developer-specified string that contains supplemental information about an order",
            "type": "string"
          },
          "expiryTimeMillis": {
            "description": "time at which the subscription will expire, in milliseconds since the Epoch",
            "type": "integer",
            "format": "int64"
          },
          "kind": {
            "description": "kind represents a subscriptionPurchase object in the androidpublisher service",
            "type": "string"
          },
          "linkedPurchaseToken": {
            "description": "purchase token of the originating purchase if this subscription is one of the following - 0. Re-signup of a canceled but non-lapsed subscription 1. Upgrade/downgrade from a previous subscription",
            "type": "string"
          },
          "orderId": {
            "description": "order id of the latest recurring order associated with the purchase of the subscription",
            "type": "string"
          },
          "paymentState": {
            "description": "payment state of the subscription",
            "type": "integer",
            "format": "int64"
          },
          "priceAmountMicros": {
            "description": "price of the subscription, not including tax",
            "type": "integer",
            "format": "int64"
          },
          "priceCurrencyCode": {
            "description": "ISO 4217 currency code for the subscription price",
            "type": "string"
          },
          "profileId": {
            "description": "Google profile id of the user when the subscription was purchased",
            "type": "string"
          },
          "profileName": {
            "description": "profile name of the user when the subscription was purchased",
            "type": "string"
          },
          "purchaseType": {
            "description": "type of purchase of the subscription - this field is only set if this purchase was not made using the standard in-app billing flow",
            "type": "integer",
            "format": "int64"
          },
          "startTimeMillis": {
            "description": "time at which the subscription was granted, in milliseconds since the Epoch",
            "type": "integer",
            "format": "int64"
          },
          "userCancellationTimeMillis": {
            "description": "time at which the subscription was canceled by the user, in milliseconds since the epoch",
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "GooglePlayProductPurchase": {
        "type": "object",
        "properties": {
          "acknowledgementState": {
            "description": "acknowledgement state of the inapp product",
            "type": "integer",
            "format": "int64"
          },
          "consumptionState": {
            "description": "consumption state of the inapp product",
            "type": "integer",
            "format": "int64"
          },
          "developerPayload": {
            "description": "developer-specified string that contains supplemental information about an order",
            "type": "string"
          },
          "kind": {
            "description": "kind represents a subscriptionPurchase object in the androidpublisher service",
            "type": "string"
          },
          "orderId": {
            "description": "order id associated with the purchase of the inapp product",
            "type": "string"
          },
          "purchaseState": {
            "description": "purchase state of the order",
            "type": "integer",
            "format": "int64"
          },
          "purchaseTimeMillis": {
            "description": "time the product was purchased, in milliseconds since the epoch (Jan 1, 1970)",
            "type": "integer",
            "format": "int64"
          },
          "purchaseType": {
            "description": "type of purchase of the inapp product",
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "GooglePlayStorePurchase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBase"
          }
        ],
        "type": "object",
        "properties": {
          "googlePlayStorePurchaseId": {
            "description": "unique id of the purchase",
            "type": "integer",
            "format": "int64"
          },
          "purchaseDate": {
            "description": "date time the purchase was done with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "token": {
            "description": "token for the purchase",
            "type": "string"
          },
          "packageName": {
            "description": "package name of the application the inapp product was sold in",
            "type": "string"
          },
          "productId": {
            "description": "inapp product SKU (for example, 'com.some.thing.inapp1')",
            "type": "string"
          },
          "valid": {
            "description": "flag indicating if purchase is valid",
            "type": "boolean"
          },
          "subscription": {
            "description": "flag indicating if purchase represents a subscription",
            "type": "boolean"
          },
          "purchaseToken": {
            "description": "token provided to the user's device when the inapp product was purchased",
            "type": "string"
          },
          "appStoreOrderId": {
            "description": "id of the app store order if mapped",
            "type": "integer",
            "format": "int64"
          },
          "subscriptionPurchase": {
            "$ref": "#/components/schemas/GooglePlaySubscriptionPurchase"
          },
          "productPurchase": {
            "$ref": "#/components/schemas/GooglePlayProductPurchase"
          }
        }
      },
      "GooglePlayStorePurchases": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GooglePlayStorePurchase"
            }
          }
        }
      },
      "GooglePlayStorePurchaseAdditionElement": {
        "type": "object",
        "properties": {
          "productId": {
            "description": "the purchased ID (for example, 'monthly001').",
            "type": "string",
            "maxLength": 500
          },
          "subscription": {
            "description": "flag indicating if purchase is a subscription or a single product purchase",
            "type": "boolean"
          },
          "purchaseToken": {
            "description": "token provided to the customer's device when the purchase was done",
            "type": "string",
            "maxLength": 10000
          }
        }
      },
      "GooglePlayStorePurchaseAddition": {
        "type": "object",
        "properties": {
          "packageName": {
            "description": "package name of the application this purchase was done for (for example, 'com.some.thing').",
            "type": "string",
            "maxLength": 1000
          },
          "receiptData": {
            "type": "array",
            "minItems": 1,
            "maxItems": 100,
            "items": {
              "$ref": "#/components/schemas/GooglePlayStorePurchaseAdditionElement"
            }
          }
        }
      },
      "AppStoreOrderItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBaseDate"
          }
        ],
        "type": "object",
        "properties": {
          "position": {
            "description": "position of the app store order item inside the app store order - creates a unique app store order item id in combination with the appStoreOrderId",
            "type": "integer",
            "format": "int32"
          },
          "deliveryCustomerId": {
            "description": "id of the customer the delivery belongs to (also includes digital products)",
            "type": "string"
          },
          "productId": {
            "description": "product id",
            "type": "string"
          },
          "appStoreSubscriptionId": {
            "description": "unique identifier for the app store subscription that is associated with this item",
            "type": "integer",
            "format": "int64"
          },
          "accessRightUniqueId": {
            "description": "unique id of the access right this order item grants access to",
            "type": "string",
            "pattern": "^[0-9\\\\-a-zA-Z]{2,30}$"
          },
          "additionalStoreItemData": {
            "description": "contains the app receipt data",
            "oneOf": [
              {
                "$ref": "#/components/schemas/AppleAppStoreReceiptItem"
              },
              {
                "$ref": "#/components/schemas/GooglePlaySubscriptionPurchase"
              },
              {
                "$ref": "#/components/schemas/GooglePlayProductPurchase"
              }
            ]
          }
        }
      },
      "AppStoreOrder": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBase"
          }
        ],
        "type": "object",
        "properties": {
          "appStoreOrderId": {
            "description": "unique identifier for the app store order",
            "type": "integer",
            "format": "int64"
          },
          "orderDate": {
            "description": "date time the order was created with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "customerId": {
            "description": "id of the customer the order belongs to",
            "type": "string"
          },
          "storeType": {
            "description": "type of store",
            "type": "string",
            "enum": [
              "APPSTORE",
              "PLAYSTORE"
            ]
          },
          "additionalStoreData": {
            "description": "additional data of the app store",
            "oneOf": [
              {
                "$ref": "#/components/schemas/AppleAppStoreReceipt"
              },
              {
                "$ref": "#/components/schemas/GooglePlaySubscriptionPurchase"
              },
              {
                "$ref": "#/components/schemas/GooglePlayProductPurchase"
              }
            ]
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AppStoreOrderItem"
            }
          }
        }
      },
      "AppStoreOrders": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AppStoreOrder"
            }
          }
        }
      },
      "AppStoreSubscription": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBase"
          }
        ],
        "type": "object",
        "properties": {
          "appStoreSubscriptionId": {
            "description": "unique identifier for the app store subscription",
            "type": "integer",
            "format": "int64"
          },
          "chainId": {
            "description": "all subscriptions that are in one chain because of some rules or cross selling share a unique chain id in the context of a company that is identically with the first subscription within the chain",
            "type": "integer",
            "format": "int64"
          },
          "externalSystemId": {
            "description": "subscription id from app store",
            "type": "string"
          },
          "customerId": {
            "description": "id of the customer the subscription belongs to",
            "type": "string"
          },
          "startDate": {
            "description": "date time the subscription started with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "endDate": {
            "description": "date time the subscription ended with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "cancellationDate": {
            "description": "date time the subscription was cancelled with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "status": {
            "description": "date time the order was created with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": "string",
            "enum": [
              "ACTIVE",
              "PAUSED",
              "INACTIVE",
              "IGNORED"
            ]
          },
          "accessRightUniqueId": {
            "description": "unique id of the used access right",
            "type": "string"
          }
        }
      },
      "AppStoreSubscriptions": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AppStoreSubscription"
            }
          }
        }
      },
      "CallbackLogEntry": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBase"
          }
        ],
        "type": "object",
        "properties": {
          "callbackLogEntryId": {
            "description": "unique id of the callback log entry",
            "type": "integer",
            "format": "int64"
          },
          "entityType": {
            "description": "entity type to get entries for",
            "type": "string",
            "enum": [
              "APP_STORE_ORDER",
              "APP_STORE_SUBSCRIPTION",
              "CUSTOMER",
              "CUSTOMER_GDPR",
              "CUSTOMER_OPT_IN",
              "DOO_EVENT_ACCESS",
              "FAILED_PAYMENT",
              "INVOICE",
              "INVOICE_CANCELLATION",
              "INVOICE_CORRECTION",
              "ORDER",
              "PURCHASED_ADDON",
              "SUBSCRIPTION",
              "TRANSACTION",
              "VOUCHER_CAMPAIGN",
              "VOUCHER_CHANNEL"
            ]
          },
          "callbackType": {
            "description": "callback type to get entries for",
            "type": "string",
            "enum": [
              "CANCELLATION",
              "CHANGE",
              "CONDITIONS_FULFILLED",
              "CREATION",
              "DELETION",
              "ENDED",
              "FINISHED",
              "PAYMENT_FAILED",
              "PAYMENT_REVOKED",
              "UNDO_CANCELLATION"
            ]
          },
          "entityVersion": {
            "description": "version of the entity returned",
            "type": "string",
            "maxLength": 10
          },
          "entityId": {
            "description": "unique id inside a contract company of the entity that changed",
            "type": "string",
            "maxLength": 20
          },
          "success": {
            "description": "flag indicating if callback was successful",
            "type": "boolean"
          },
          "errorMsg": {
            "description": "description of the error occurred",
            "type": "string",
            "maxLength": 4000
          },
          "msg": {
            "description": "description",
            "type": "string",
            "maxLength": 4000
          }
        }
      },
      "CallbackLogEntries": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CallbackLogEntry"
            }
          }
        }
      },
      "Download": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBase"
          }
        ],
        "type": "object",
        "properties": {
          "downloadId": {
            "description": "unique id of the download",
            "type": "integer",
            "format": "int64"
          },
          "uploadedDate": {
            "description": "date time the download was uploaded with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "downloadType": {
            "description": "download type to get downloads for",
            "type": "string",
            "enum": [
              "ANALOG_INVOICE_LIST",
              "DELIVERY_LIST",
              "DELIVERY_NOTE_LIST",
              "IVW_LIST"
            ]
          },
          "fileType": {
            "description": "file type of the download",
            "type": "string",
            "enum": [
              "CSV",
              "PDF",
              "ZIP"
            ]
          },
          "fileSize": {
            "description": "file size of the download",
            "type": "integer",
            "format": "int64"
          },
          "fileName": {
            "description": "file name of the download",
            "type": "string"
          },
          "publishedToken": {
            "description": "published token contains the token to identify the password via the download",
            "type": "string"
          },
          "publishedEndDate": {
            "description": "date the publish of the download will end with date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "publishedBy": {
            "description": "id who published the download",
            "type": "string",
            "maxLength": 100
          },
          "publishedByType": {
            "description": "type of published by",
            "type": "string",
            "enum": [
              "API",
              "CUSTOMER",
              "MERCHANT",
              "SYSTEM"
            ]
          }
        }
      },
      "Downloads": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Download"
            }
          }
        }
      },
      "DownloadFile": {
        "type": "object",
        "properties": {
          "fileType": {
            "description": "file type of the download",
            "type": "string",
            "enum": [
              "CSV",
              "PDF",
              "ZIP"
            ]
          },
          "fileName": {
            "description": "file name of the download",
            "type": "string"
          },
          "file": {
            "description": "base64 string of the download",
            "type": "string"
          }
        }
      },
      "Utm": {
        "type": "object",
        "properties": {
          "source": {
            "description": "identify the source of the traffic",
            "type": "string",
            "maxLength": 100
          },
          "medium": {
            "description": "identify the medium the link was used on",
            "type": "string",
            "maxLength": 100
          },
          "campaign": {
            "description": "identify a strategic campaign (e.g. product launch, new feature, partnership, etc.) or specific promotion (e.g. a sale, a giveaway, etc.)",
            "type": "string",
            "maxLength": 100
          },
          "term": {
            "description": "suggested for paid search to identify keywords for your ad",
            "type": "string",
            "maxLength": 100
          },
          "content": {
            "description": "suggested for additional details for A/B testing and content-targeted ads",
            "type": "string",
            "maxLength": 100
          }
        }
      },
      "AdditionalOrderData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBaseDate"
          }
        ],
        "type": "object",
        "properties": {
          "affiliateId": {
            "description": "affiliate id associated",
            "type": "string",
            "maxLength": 100
          },
          "partnerId": {
            "description": "id of the partner",
            "type": "string",
            "maxLength": 100
          },
          "sourceId": {
            "description": "id (e.g. URI) to identify source",
            "type": "string",
            "maxLength": 500
          },
          "utm": {
            "$ref": "#/components/schemas/Utm"
          },
          "data": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "maxLength": 30
                },
                "value": {
                  "type": "string",
                  "maxLength": 200
                }
              }
            }
          }
        }
      },
      "VoucherPurchase": {
        "type": "object",
        "properties": {
          "customerId": {
            "description": "unique id of the customer the checkout is for",
            "type": "string",
            "pattern": "^[0-9]{1,18}$"
          },
          "customerSession": {
            "description": "active customer session - if a customer id is provided the customer id overrules the session",
            "type": "string",
            "maxLength": 10000
          },
          "invoiceAddressId": {
            "description": "unique id of the invoice address to use",
            "type": "integer",
            "format": "int64"
          },
          "deliveryAddressId": {
            "description": "unique id of the delivery address to use",
            "type": "integer",
            "format": "int64"
          },
          "customerIpAddress": {
            "description": "ip address of the customer",
            "type": "string",
            "maxLength": 45
          },
          "additionalData": {
            "$ref": "#/components/schemas/AdditionalOrderData"
          },
          "voucherCode": {
            "description": "voucher code to use",
            "type": "string",
            "maxLength": 20
          },
          "overwrittenProductId": {
            "description": "add a custom product id during the voucher checkout - this is only allowed for a single offer with one single purchase in it",
            "type": "string",
            "maxLength": 20
          }
        },
        "required": [
          "customerId",
          "customerIpAddress",
          "voucherCode"
        ]
      },
      "CheckoutOrderIdResult": {
        "type": "object",
        "properties": {
          "orderId": {
            "description": "unique id of the order",
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "CheckoutCustomProduct": {
        "type": "object",
        "properties": {
          "plenigoProductId": {
            "description": "id of the plenigo product to buy",
            "type": "string",
            "maxLength": 20
          },
          "productId": {
            "description": "external id of the product to buy",
            "type": "string",
            "maxLength": 20
          },
          "title": {
            "description": "translated title",
            "type": "string",
            "maxLength": 100
          },
          "description": {
            "description": "translated description",
            "type": "string",
            "maxLength": 5000
          },
          "legalText": {
            "description": "translated legal text",
            "type": "string",
            "maxLength": 5000
          },
          "summaryText": {
            "description": "translated summary text",
            "type": "string",
            "maxLength": 5000
          },
          "withdrawalInstruction": {
            "description": "translated withdrawal instruction",
            "type": "string",
            "maxLength": 5000
          },
          "logoUrl": {
            "description": "url to get image from",
            "type": "string",
            "maxLength": 500
          },
          "logoAltText": {
            "description": "image alt text",
            "type": "string",
            "maxLength": 200
          },
          "price": {
            "description": "price of the product",
            "type": "number",
            "format": "double",
            "minimum": 0,
            "maximum": 100000
          },
          "currency": {
            "description": "currency of the order formatted as <a href='https://en.wikipedia.org/wiki/ISO_4217' target='_blank'>ISO 4217, alphabetic code</a>",
            "type": "string",
            "minLength": 3,
            "maxLength": 3
          },
          "taxType": {
            "type": "string",
            "enum": [
              "ADVERTISEMENT",
              "BOOK",
              "DIGITALNEWSPAPER",
              "DIGITALOFFER",
              "DIGITALPRODUCT",
              "DONATION",
              "DOWNLOAD",
              "EBOOK",
              "EVENT",
              "FEE",
              "MAGAZINE",
              "MEMBERSHIP",
              "MUSIC",
              "NEWSPAPER",
              "PHYSICALPRODUCT",
              "VIDEO",
              "VOUCHER"
            ]
          },
          "costCenter": {
            "description": "cost center associated with this product at the time of checkout",
            "type": "string",
            "maxLength": 20
          },
          "discountPercentage": {
            "description": "discount offered to the order",
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 100
          },
          "shippingCosts": {
            "description": "shipping costs of the product",
            "type": "number",
            "format": "double",
            "minimum": 0,
            "maximum": 100000
          },
          "accessRightUniqueId": {
            "description": "unique id of the access right this order item grants access to",
            "type": "string",
            "pattern": "^[0-9\\\\-a-zA-Z]{2,30}$"
          }
        },
        "required": [
          "title",
          "offerId",
          "quantity",
          "price",
          "currency",
          "taxType",
          "accessRightUniqueId"
        ]
      },
      "CheckoutOffer": {
        "type": "object",
        "properties": {
          "plenigoOfferId": {
            "description": "if the product is based on a plenigo offer the plenigo product id is to provide here",
            "type": "string",
            "maxLength": 20
          },
          "plenigoBonusIds": {
            "description": "if the offer should contain bonuses the plenigo bonus id can be added here",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "quantity": {
            "description": "quantity of purchased entities",
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 10000
          },
          "title": {
            "description": "translated title",
            "type": "string",
            "maxLength": 100
          },
          "description": {
            "description": "translated description",
            "type": "string",
            "maxLength": 5000
          },
          "legalText": {
            "description": "translated legal text",
            "type": "string",
            "maxLength": 5000
          },
          "summaryText": {
            "description": "translated summary text",
            "type": "string",
            "maxLength": 5000
          },
          "withdrawalInstruction": {
            "description": "translated withdrawal instruction",
            "type": "string",
            "maxLength": 5000
          },
          "logoUrl": {
            "description": "url to get image from",
            "type": "string",
            "maxLength": 500
          },
          "logoAltText": {
            "description": "image alt text",
            "type": "string",
            "maxLength": 200
          },
          "products": {
            "description": "customized products to buy",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CheckoutCustomProduct"
            }
          }
        },
        "required": [
          "plenigoOfferId",
          "quantity",
          "title",
          "legalText",
          "summaryText",
          "products"
        ]
      },
      "FreeOrder": {
        "type": "object",
        "properties": {
          "customerId": {
            "description": "unique id of the customer the checkout is for",
            "type": "string",
            "pattern": "^[0-9]{1,18}$"
          },
          "customerSession": {
            "description": "active customer session - if a customer id is provided the customer id overrules the session",
            "type": "string",
            "maxLength": 10000
          },
          "invoiceAddressId": {
            "description": "unique id of the invoice address to use",
            "type": "integer",
            "format": "int64"
          },
          "deliveryAddressId": {
            "description": "unique id of the delivery address to use",
            "type": "integer",
            "format": "int64"
          },
          "customerIpAddress": {
            "description": "ip address of the customer",
            "type": "string",
            "maxLength": 45
          },
          "additionalData": {
            "$ref": "#/components/schemas/AdditionalOrderData"
          },
          "offer": {
            "$ref": "#/components/schemas/CheckoutOffer"
          }
        },
        "required": [
          "customerId",
          "customerIpAddress",
          "offer"
        ]
      },
      "CheckoutAddressSettings": {
        "type": "object",
        "properties": {
          "takeOver": {
            "description": "flag that controls the checkbox to automatically take over one address as another (e.g. invoice address as delivery address) and indirectly\ncontrols the flow of the checkout because if e.g. DELIVERY_ADDRESS_DEFAULT is selected the delivery address will be requested first if required -\nthe default value is INVOICE_ADDRESS_DEFAULT\n",
            "type": "string",
            "enum": [
              "INVOICE_ADDRESS_DEFAULT",
              "DELIVERY_ADDRESS_DEFAULT",
              "NO_ADDRESS_DEFAULT"
            ]
          },
          "invoiceAddressRequired": {
            "description": "is the invoice address required during the checkout",
            "type": "boolean"
          },
          "deliveryAddressRequired": {
            "description": "is the delivery address required during the checkout",
            "type": "boolean"
          }
        }
      },
      "ConnectedOfferRequest": {
        "type": "object",
        "properties": {
          "plenigoConnectedOfferId": {
            "description": "id of the connected offer to sell",
            "type": "string",
            "maxLength": 20
          },
          "connectedCompanyId": {
            "description": "id of the connected company id",
            "type": "string",
            "maxLength": 20
          }
        },
        "required": [
          "plenigoConnectedOfferId"
        ]
      },
      "CheckoutPreparation": {
        "type": "object",
        "properties": {
          "customerId": {
            "description": "unique id of the customer the checkout is for",
            "type": "string",
            "pattern": "^[0-9]{1,18}$"
          },
          "customerSession": {
            "description": "active customer session - if a customer id is provided the customer id overrules the session",
            "type": "string",
            "maxLength": 10000
          },
          "invoiceAddressId": {
            "description": "unique id of the invoice address to use",
            "type": "integer",
            "format": "int64"
          },
          "deliveryAddressId": {
            "description": "unique id of the delivery address to use",
            "type": "integer",
            "format": "int64"
          },
          "customerIpAddress": {
            "description": "ip address of the customer",
            "type": "string",
            "maxLength": 45
          },
          "showNetPrices": {
            "description": "flag indicating if net prices should be shown during checkout",
            "type": "boolean"
          },
          "paymentOnly": {
            "description": "flag indicating that the checkout should only show payment information",
            "type": "boolean"
          },
          "forcePaymentMethod": {
            "description": "force checkout to use a specific payment method",
            "type": "string",
            "enum": [
              "AMAZON_PAY",
              "APPLE_PAY",
              "BANK_ACCOUNT",
              "BILLING",
              "CREDIT_CARD",
              "GOOGLE_PAY",
              "IDEAL",
              "PAYPAL",
              "POSTFINANCE",
              "SOFORT",
              "TWINT",
              "ZERO"
            ]
          },
          "basketId": {
            "description": "unique id of the plenigo basket",
            "type": "string",
            "maxLength": 40
          },
          "allowMultiplePurchases": {
            "description": "flag indicating if product can be bought multiple times - a user will be able to pay the same product twice",
            "type": "boolean"
          },
          "startWithVoucherInput": {
            "description": "flag indicating if checkout process should start with a voucher input field - this field is only a hint for the visual representation\nand if you don't use the plenigo iFrame checkout the logic must be implemented on your side\n",
            "type": "boolean"
          },
          "hideVoucherInput": {
            "description": "flag indicating if checkout process should hide the voucher input field - this field is only a hint for the visual representation\nand if you don't use the plenigo iFrame checkout the logic must be implemented on your side\n",
            "type": "boolean"
          },
          "allowedPaymentMethods": {
            "description": "possibility for additional restrictions of payment methods - only payment methods provided here and configured in the backend are allowed during checkout\n",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "AMAZON_PAY",
                "APPLE_PAY",
                "BANK_ACCOUNT",
                "BILLING",
                "CREDIT_CARD",
                "GOOGLE_PAY",
                "IDEAL",
                "PAYPAL",
                "POSTFINANCE",
                "SOFORT",
                "TWINT",
                "ZERO"
              ]
            }
          },
          "language": {
            "description": "language to use during checkout - two letter language code according to <a href=\"https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes\" target=\"_blank\">ISO 639-1</a>",
            "type": "string",
            "maxLength": 2
          },
          "debugMode": {
            "description": "flag indicating if debug information should be shown during purchase process",
            "type": "boolean"
          },
          "subscriptionStartDate": {
            "description": "optional start date of subscriptions with date notation as defined for example, 2017-07-21",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "addressSettings": {
            "description": "additional address settings",
            "$ref": "#/components/schemas/CheckoutAddressSettings"
          },
          "giftOption": {
            "description": "flag that controls if the checkout should be run as a gift checkout, should show a gift checkout box or hide it - the default value is\nHIDE_GIFT_OPTION\n",
            "type": "string",
            "enum": [
              "FORCE_GIFT_OPTION",
              "HIDE_GIFT_OPTION",
              "SHOW_GIFT_OPTION",
              "PRESELECT_GIFT_OPTION"
            ]
          },
          "additionalData": {
            "description": "additional data associated with this order",
            "$ref": "#/components/schemas/AdditionalOrderData"
          },
          "voucherCode": {
            "description": "voucher code - if voucher code is provided no items must be provided",
            "type": "string"
          },
          "items": {
            "description": "offers that should be sold via checkout",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CheckoutOffer"
            }
          },
          "connectedOfferItems": {
            "description": "connected offers that should be sold via checkout",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConnectedOfferRequest"
            }
          }
        },
        "required": [
          "customerIpAddress"
        ]
      },
      "CheckoutPreparationResult": {
        "type": "object",
        "properties": {
          "purchaseId": {
            "description": "unique id of the purchase",
            "type": "string",
            "maxLength": 100
          }
        }
      },
      "CorporateAccountUserCreation": {
        "type": "object",
        "properties": {
          "email": {
            "description": "email address of the customer that should belong to this corporate account user",
            "type": "string",
            "format": "email",
            "maxLength": 100
          },
          "salutation": {
            "description": "salutation to identify the correct designation of a customer",
            "type": "string",
            "enum": [
              "DIVERSE",
              "MR",
              "MRS",
              "NONE"
            ]
          },
          "firstName": {
            "description": "first name of the customer - first name and last name or company name are required",
            "type": "string",
            "maxLength": 100
          },
          "lastName": {
            "description": "last name of the customer - first name and last name or company name are required",
            "type": "string",
            "maxLength": 100
          }
        },
        "required": [
          "email",
          "salutation",
          "firstName",
          "lastName"
        ]
      },
      "CorporateAccountUser": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CorporateAccountUserCreation"
          },
          {
            "$ref": "#/components/schemas/ApiBase"
          }
        ],
        "type": "object",
        "properties": {
          "corporateAccountUserId": {
            "description": "unique id of the corporate account user in the context of a company",
            "type": "integer",
            "format": "int64"
          },
          "status": {
            "description": "status of the corporate account user\n\n| Status    | Description                                                                                                                         |\n| --------- | ------------------------------------------------------------------------------------------------------------------------------------|\n| ACTIVE    | customer is active and has access to the corporate account product                                                                  |\n| INACTIVE  | customer is inactive and has no access to the corporate account product                                                             |\n| INVITED   | customer is invited to activate the corporate account user                                                                          |\n",
            "type": "string",
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "INVITED"
            ]
          },
          "customerId": {
            "description": "unique id of the customer the corporate account user belongs to",
            "type": "string",
            "pattern": "^[0-9]{1,18}$"
          },
          "corporateAccountCode": {
            "description": "the code to active this corporate account user for a customer",
            "type": "string"
          }
        },
        "required": [
          "corporateAccountUserId",
          "email",
          "salutation",
          "firstName",
          "lastName",
          "status",
          "corporateAccountCode"
        ]
      },
      "CorporateAccount": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBase"
          }
        ],
        "type": "object",
        "properties": {
          "corporateAccountId": {
            "description": "unique id of the corporate account in the context of a company",
            "type": "integer",
            "format": "int64"
          },
          "customerId": {
            "description": "unique id of the customer the corporate account belongs to",
            "type": "string",
            "pattern": "^[0-9]{1,18}$"
          },
          "title": {
            "description": "title of the corporate account",
            "type": "string"
          },
          "plenigoOfferId": {
            "description": "plenigo offer id of the corporate account",
            "type": "string"
          },
          "usersAmount": {
            "description": "max amount of users allowed in this corporate account",
            "type": "integer",
            "format": "int64"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CorporateAccountUser"
            }
          },
          "accessRightItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessRightItemData"
            }
          }
        },
        "required": [
          "corporateAccountId",
          "customerId",
          "title",
          "plenigoOfferId"
        ]
      },
      "CorporateAccounts": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CorporateAccount"
            }
          }
        }
      },
      "CorporateAccountUserCode": {
        "type": "object",
        "properties": {
          "code": {
            "description": "unique code for the corporate account user",
            "type": "string",
            "minLength": 16,
            "maxLength": 19
          }
        },
        "required": [
          "code"
        ]
      },
      "CorporateAccountUserStatus": {
        "type": "object",
        "properties": {
          "corporateAccountId": {
            "description": "unique id of the corporate account in the context of a company",
            "type": "integer",
            "format": "int64"
          },
          "plenigoOfferId": {
            "description": "plenigo offer id of the corporate account",
            "type": "string"
          },
          "status": {
            "description": "status of the corporate account user\n\n| Status    | Description                                                                                                                         |\n| --------- | ------------------------------------------------------------------------------------------------------------------------------------|\n| ACTIVE    | customer is active and has access to the corporate account product                                                                  |\n| INACTIVE  | customer is inactive and has no access to the corporate account product                                                             |\n| INVITED   | customer is invited to activate the corporate account user                                                                          |\n",
            "type": "string",
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "INVITED"
            ]
          }
        },
        "required": [
          "corporateAccountId",
          "plenigoOfferId",
          "status"
        ]
      },
      "CustomerMiscellaneousData": {
        "type": "object",
        "properties": {
          "leitwegId": {
            "description": "leitweg id used for xml invoices",
            "type": "string",
            "maxLength": 50
          }
        }
      },
      "CustomerBase": {
        "type": "object",
        "properties": {
          "username": {
            "description": "selected username of the customer that is unique for all users",
            "type": "string",
            "maxLength": 100
          },
          "email": {
            "description": "email address of the customer that is unique for all users",
            "type": "string",
            "format": "email",
            "maxLength": 100
          },
          "externalSystemId": {
            "description": "external system id - can only be set if not set yet",
            "type": "string",
            "maxLength": 100
          },
          "salutation": {
            "description": "salutation to identify the correct designation of a customer",
            "type": "string",
            "enum": [
              "DIVERSE",
              "MR",
              "MRS",
              "NONE"
            ]
          },
          "firstName": {
            "description": "first name of the customer - first name and last name or company name are required",
            "type": "string",
            "maxLength": 100
          },
          "lastName": {
            "description": "last name of the customer - first name and last name or company name are required",
            "type": "string",
            "maxLength": 100
          },
          "invoiceEmail": {
            "description": "email address of the customer where invoices should be sent to",
            "type": "string",
            "format": "email",
            "maxLength": 100
          },
          "language": {
            "description": "language of the customer - two letter language code according to <a href=\"https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes\" target=\"_blank\">ISO 639-1</a>",
            "type": "string",
            "minLength": 2,
            "maxLength": 2
          },
          "mobileNumber": {
            "description": "mobile number of the customer formatted as <a href=\"https://en.wikipedia.org/wiki/E.164\" target=\"_blank\">E.164</a>",
            "type": "string",
            "pattern": "^\\+?[1-9]\\d{1,14}$",
            "maxLength": 100
          },
          "birthday": {
            "description": "birthday of the customer with full-date notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-01",
            "type": [
              "null",
              "string"
            ],
            "format": "date"
          },
          "miscellaneousData": {
            "$ref": "#/components/schemas/CustomerMiscellaneousData"
          }
        }
      },
      "CustomerAcceptedTerm": {
        "type": "object",
        "properties": {
          "termId": {
            "description": "technical id of the term for relation to the merchant backend term id",
            "type": "integer",
            "format": "int64"
          },
          "uniqueId": {
            "description": "unique id of the last active term",
            "type": "string",
            "maxLength": 100
          },
          "acceptanceDate": {
            "description": "date time the term was accepted with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          }
        }
      },
      "Customer": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CustomerBase"
          },
          {
            "$ref": "#/components/schemas/ApiBase"
          }
        ],
        "type": "object",
        "properties": {
          "customerId": {
            "description": "unique id of the customer",
            "type": "string",
            "pattern": "^[0-9]{1,18}$"
          },
          "registrationSource": {
            "description": "source the user registration was started from",
            "type": "string",
            "maxLength": 100
          },
          "registrationDate": {
            "description": "date the customer was registered with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "ageVerificationPinEnabled": {
            "description": "flag indicating that age verification pin is set",
            "type": "boolean"
          },
          "status": {
            "description": "status of the customer\n\n| Status      | Description                                                                                                                                               |\n| ----------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------|\n| ACTIVATED   | customer is active and can log in and use full functionality                                                                                              |\n| BLOCKED     | customer is blocked and needs to reset his password to be able to log in again                                                                            |\n| DEACTIVATED | customer is deactivated and cannot log in - the customer cannot change this state by himself and a log in attempt is handled like a false password log in |\n| DISABLED    | customer is disabled by plenigo and cannot be used anymore - please contact plenigo for further information (this status is currently not actively used)  |\n",
            "type": "string",
            "enum": [
              "ACTIVATED",
              "BLOCKED",
              "DEACTIVATED",
              "DISABLED"
            ]
          },
          "acceptedTerms": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "minLength": 20,
                  "maxLength": 20,
                  "description": "id of the company opt in was accepted for"
                },
                "value": {
                  "$ref": "#/components/schemas/CustomerAcceptedTerm"
                }
              }
            }
          },
          "ssoLoginProviders": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "GOOGLE"
              ]
            }
          },
          "customerMarks": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "WBZ"
              ]
            }
          }
        },
        "required": [
          "customerId"
        ]
      },
      "Customers": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Customer"
            }
          }
        }
      },
      "CustomerChange": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CustomerBase"
          }
        ],
        "type": "object",
        "properties": {
          "pseudoEmail": {
            "description": "flag indicating that email should be a pseudo email",
            "type": "boolean"
          },
          "password": {
            "description": "new password of the user - if left empty the old password will be kept",
            "type": "string",
            "maxLength": 100
          },
          "processingBlocked": {
            "description": "Flag to indicate to third party systems that the customer is blocked for further processing and should not be used for advertisement, etc. Can be used in combination with the pseudoEmail flag to handle data protection requests without deletion of a customer.",
            "type": "boolean"
          }
        }
      },
      "CustomerAddressCreation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AddressChange"
          }
        ],
        "type": "object",
        "properties": {
          "type": {
            "description": "address type",
            "type": "string",
            "enum": [
              "INVOICE",
              "DELIVERY"
            ]
          }
        },
        "required": [
          "type"
        ]
      },
      "AdditionalCustomerData": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "maxLength": 30
                },
                "value": {
                  "type": "string",
                  "maxLength": 200
                }
              }
            }
          }
        }
      },
      "CustomerCreation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CustomerChange"
          }
        ],
        "type": "object",
        "properties": {
          "customerId": {
            "description": "unique id of the customer",
            "type": "string",
            "pattern": "^[0-9]{1,18}$"
          },
          "registrationSource": {
            "description": "domain, website, app or other source of the customer registration",
            "type": "string",
            "maxLength": 100
          },
          "password": {
            "description": "password the new customer should get",
            "type": "string",
            "maxLength": 100
          },
          "sendWelcomeMail": {
            "description": "flag indicating if welcome mail for customer should be sent",
            "type": "boolean"
          },
          "addresses": {
            "description": "addresses that should be directly associated with the customer",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerAddressCreation"
            }
          },
          "data": {
            "$ref": "#/components/schemas/AdditionalCustomerData"
          }
        },
        "required": [
          "email",
          "language"
        ]
      },
      "AdditionalCustomerDataList": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdditionalCustomerData"
            }
          }
        }
      },
      "CustomerEmail": {
        "type": "object",
        "properties": {
          "email": {
            "description": "email address",
            "type": "string",
            "format": "email",
            "maxLength": 100
          }
        }
      },
      "InvoiceAddress": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBaseDate"
          }
        ],
        "type": "object",
        "properties": {
          "businessAddress": {
            "description": "flag indicating if address represents a private or a business address",
            "type": "boolean"
          },
          "salutation": {
            "description": "salutation to identify the correct designation of a customer",
            "type": "string",
            "enum": [
              "DIVERSE",
              "MR",
              "MRS",
              "NONE"
            ]
          },
          "title": {
            "description": "title of the customer",
            "type": "string",
            "maxLength": 100
          },
          "firstName": {
            "description": "first name of the customer - first name and last name or company name are required",
            "type": "string",
            "maxLength": 100
          },
          "lastName": {
            "description": "last name of the customer - first name and last name or company name are required",
            "type": "string",
            "maxLength": 100
          },
          "companyName": {
            "description": "company name - first name and last name or company name are required",
            "type": "string",
            "maxLength": 100
          },
          "additionalCompanyInfo": {
            "description": "additional information belonging to the company",
            "type": "string",
            "maxLength": 100
          },
          "street": {
            "description": "street name",
            "type": "string",
            "maxLength": 100
          },
          "streetNumber": {
            "description": "street number",
            "type": "string",
            "maxLength": 100
          },
          "additionalStreetInfo": {
            "description": "additional information describing address",
            "type": "string",
            "maxLength": 100
          },
          "postbox": {
            "description": "postbox id",
            "type": "string",
            "maxLength": 100
          },
          "postcode": {
            "description": "post code",
            "type": "string",
            "maxLength": 100
          },
          "city": {
            "description": "city",
            "type": "string",
            "maxLength": 100
          },
          "state": {
            "description": "state",
            "type": "string",
            "maxLength": 2
          },
          "country": {
            "description": "country code formatted as <a href=\"https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\" target=\"_blank\">ISO 3166-1 alpha-2</a>",
            "type": "string",
            "minLength": 2,
            "maxLength": 2
          },
          "vatNumber": {
            "description": "VAT number of a member country of the European Union",
            "type": "string",
            "maxLength": 20
          },
          "phoneNumber": {
            "description": "phone number of the customer formatted as <a href=\"https://en.wikipedia.org/wiki/E.164\" target=\"_blank\">E.164</a>",
            "type": "string",
            "pattern": "^\\+?[1-9]\\d{1,14}$",
            "maxLength": 100
          }
        }
      },
      "InvoiceItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBaseDate"
          }
        ],
        "type": "object",
        "properties": {
          "position": {
            "description": "position of the invoice item inside the invoice - creates a unique invoice item id in combination with the invoiceId",
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "description": "title of the item",
            "type": "string",
            "maxLength": 200
          },
          "productId": {
            "description": "product id - will be identical with the plenigo product id if not overwritten during checkout",
            "type": "string",
            "maxLength": 100
          },
          "plenigoOfferId": {
            "description": "if the product is based on a plenigo offer the plenigo offer id is provided here",
            "type": "string",
            "minLength": 20,
            "maxLength": 20
          },
          "plenigoProductId": {
            "description": "if the product is based on a plenigo offer the plenigo product id is provided here",
            "type": "string",
            "maxLength": 100
          },
          "plenigoStepId": {
            "description": "if the product is based on a plenigo offer the plenigo step id is provided here",
            "type": "string",
            "minLength": 20,
            "maxLength": 20
          },
          "price": {
            "description": "price of the invoice item",
            "type": "number",
            "format": "double",
            "minimum": 0,
            "maximum": 100000
          },
          "tax": {
            "description": "tax percentage operated on this invoice item",
            "type": "number",
            "format": "double",
            "minimum": 0,
            "maximum": 100
          },
          "taxCountry": {
            "description": "country tax is based on formatted as <a href=\"https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\" target=\"_blank\">ISO 3166-1 alpha-2</a>",
            "type": "string",
            "minLength": 2,
            "maxLength": 2
          },
          "quantity": {
            "description": "purchase amount",
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 10000
          },
          "costCenter": {
            "description": "cost center associated with this product at the time of invoice creation",
            "type": "string",
            "maxLength": 20
          },
          "deliveryCustomerId": {
            "description": "id of the customer the delivery belongs to (also includes digital products)",
            "type": "string",
            "maxLength": 100
          },
          "deliveryAddress": {
            "$ref": "#/components/schemas/InvoiceAddress"
          },
          "subscriptionItemId": {
            "description": "if invoice item represents a subscription the id of the subscription item is provided here",
            "type": "integer",
            "format": "int64"
          },
          "periodStartDate": {
            "description": "if invoice item represents a subscription the period start date is the start date of the invoice period",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "periodEndDate": {
            "description": "if invoice item represents a subscription the period end date is the end date of the invoice period",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "orderItemId": {
            "description": "if invoice item represents an order the id of the order item is provided here",
            "type": "integer",
            "format": "int64"
          },
          "discountPercentage": {
            "description": "discount offered to the invoice item",
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 100
          }
        },
        "required": [
          "position",
          "title",
          "price",
          "tax",
          "taxCountry",
          "quantity",
          "deliveryCustomerId"
        ]
      },
      "Invoice": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBase"
          }
        ],
        "type": "object",
        "properties": {
          "invoiceId": {
            "description": "unique id of the invoice in the context of a company",
            "type": "integer",
            "format": "int64"
          },
          "invoiceDate": {
            "description": "invoice date time of the invoice with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "customerEmail": {
            "description": "email used for sending invoice",
            "type": "string",
            "maxLength": 100
          },
          "accumulatedPrice": {
            "description": "accumulated price of the invoice",
            "type": "number",
            "format": "double"
          },
          "currency": {
            "description": "currency of the invoice formatted as <a href=\"https://en.wikipedia.org/wiki/ISO_4217\" target=\"_blank\">ISO 4217, alphabetic code</a>",
            "type": "string",
            "minLength": 3,
            "maxLength": 3
          },
          "paymentMethod": {
            "description": "payment method used to pay for the invoice",
            "type": "string",
            "enum": [
              "AMAZON_PAY",
              "APPLE_PAY",
              "BANK_ACCOUNT",
              "BILLING",
              "CREDIT_CARD",
              "GOOGLE_PAY",
              "IDEAL",
              "PAYPAL",
              "POSTFINANCE",
              "SOFORT",
              "TWINT",
              "ZERO"
            ]
          },
          "paymentMethodId": {
            "description": "id of the payment method that is associated with this invoice",
            "type": "integer",
            "format": "int64"
          },
          "purchaseOrderIndicator": {
            "description": "purchase invoice indicator if provided by the customer",
            "type": "string",
            "maxLength": 50
          },
          "invoiceCustomerId": {
            "description": "id of the customer the invoice belongs to",
            "type": "string",
            "maxLength": 100
          },
          "invoiceAddress": {
            "$ref": "#/components/schemas/InvoiceAddress"
          },
          "transactionId": {
            "description": "id of the related transaction if payment was not done via invoice",
            "type": "string"
          },
          "type": {
            "description": "type of the invoice",
            "type": "string",
            "enum": [
              "CANCELLATION",
              "CANCELLATION_CORRECTION",
              "CORRECTION",
              "INVOICE"
            ]
          },
          "status": {
            "description": "payment status of the invoice",
            "type": "string",
            "enum": [
              "PAID",
              "NOT_PAID"
            ]
          },
          "paymentChangedToBilling": {
            "description": "flag indicating if invoice was created because of a failed payment process",
            "type": "boolean"
          },
          "precursorId": {
            "description": "invoice id which was corrected or cancelled",
            "type": "integer",
            "format": "int64"
          },
          "successorId": {
            "description": "invoice id of the corrected invoice",
            "type": "integer",
            "format": "int64"
          },
          "invoiceCancellationId": {
            "description": "invoice id of the cancellation invoice",
            "type": "integer",
            "format": "int64"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoiceItem"
            }
          }
        },
        "required": [
          "invoiceId",
          "invoiceDate",
          "accumulatedPrice",
          "currency",
          "paymentMethod",
          "invoiceCustomerId",
          "items"
        ]
      },
      "Invoices": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Invoice"
            }
          }
        }
      },
      "CustomerInvoiceEmail": {
        "type": "object",
        "properties": {
          "invoiceEmail": {
            "description": "invoice email address",
            "type": "string",
            "format": "email",
            "maxLength": 100
          }
        }
      },
      "PaymentMethodDetails": {
        "type": "object",
        "properties": {
          "brand": {
            "description": "optional brand of the payment method",
            "type": "string",
            "maxLength": 50
          },
          "issuer": {
            "description": "optional issuer of the payment method",
            "type": "string",
            "maxLength": 50
          }
        }
      },
      "GiftInfo": {
        "type": "object",
        "properties": {
          "notifyGiftee": {
            "description": "flag indicating if giftee should be notified about the gift",
            "type": "boolean"
          },
          "donorText": {
            "description": "personal text of the donor to the giftee",
            "type": "string",
            "maxLength": 350
          },
          "gifteeEmail": {
            "description": "email address of the giftee",
            "type": "string",
            "format": "email",
            "maxLength": 100
          }
        }
      },
      "OrderAddress": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBaseDate"
          }
        ],
        "type": "object",
        "properties": {
          "businessAddress": {
            "description": "flag indicating if address represents a private or a business address",
            "type": "boolean"
          },
          "salutation": {
            "description": "salutation to identify the correct designation of a customer",
            "type": "string",
            "enum": [
              "DIVERSE",
              "MR",
              "MRS",
              "NONE"
            ]
          },
          "title": {
            "description": "title of the order",
            "type": "string",
            "maxLength": 100
          },
          "firstName": {
            "description": "first name of the customer - first name and last name or company name are required",
            "type": "string",
            "maxLength": 100
          },
          "lastName": {
            "description": "last name of the customer - first name and last name or company name are required",
            "type": "string",
            "maxLength": 100
          },
          "companyName": {
            "description": "company name - first name and last name or company name are required",
            "type": "string",
            "maxLength": 100
          },
          "additionalCompanyInfo": {
            "description": "additional information belonging to the company",
            "type": "string",
            "maxLength": 100
          },
          "street": {
            "description": "street name",
            "type": "string",
            "maxLength": 100
          },
          "streetNumber": {
            "description": "street number",
            "type": "string",
            "maxLength": 100
          },
          "additionalStreetInfo": {
            "description": "additional information describing address",
            "type": "string",
            "maxLength": 100
          },
          "postbox": {
            "description": "postbox id",
            "type": "string",
            "maxLength": 100
          },
          "postcode": {
            "description": "post code",
            "type": "string",
            "maxLength": 100
          },
          "city": {
            "description": "city",
            "type": "string",
            "maxLength": 100
          },
          "state": {
            "description": "state",
            "type": "string",
            "maxLength": 2
          },
          "country": {
            "description": "country code formatted as <a href=\"https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\" target=\"_blank\">ISO 3166-1 alpha-2</a>",
            "type": "string",
            "minLength": 2,
            "maxLength": 2
          },
          "vatNumber": {
            "description": "VAT number of a member country of the European Union",
            "type": "string",
            "maxLength": 20
          },
          "phoneNumber": {
            "description": "phone number of the customer formatted as <a href=\"https://en.wikipedia.org/wiki/E.164\" target=\"_blank\">E.164</a>",
            "type": "string",
            "pattern": "^\\+?[1-9]\\d{1,14}$",
            "maxLength": 100
          }
        }
      },
      "VoucherPurchaseData": {
        "type": "object",
        "properties": {
          "voucherTemplateId": {
            "description": "id fo the voucher template associated with this voucher item purchase",
            "type": "integer",
            "format": "int64"
          },
          "voucherCode": {
            "description": "voucher code created with this voucher item purchase",
            "type": "string",
            "maxLength": 14
          },
          "voucherEndDate": {
            "description": "validity time of voucher with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          }
        },
        "required": [
          "voucherTemplateId",
          "voucherEndDate"
        ]
      },
      "VoucherUsageData": {
        "type": "object",
        "properties": {
          "purchaseOrderId": {
            "description": "id of the order voucher was purchased with",
            "type": "integer",
            "format": "int64"
          },
          "purchaseOrderItemPosition": {
            "description": "position of the order item inside the order voucher was purchased with",
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "OrderItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBaseDate"
          }
        ],
        "type": "object",
        "properties": {
          "position": {
            "description": "position of the order item inside the order - creates a unique order item id in combination with the orderId",
            "type": "integer",
            "format": "int32"
          },
          "productId": {
            "description": "id of the product bought",
            "type": "string",
            "maxLength": 100
          },
          "plenigoOfferId": {
            "description": "if the product is based on a plenigo offer the plenigo offer id is provided here",
            "type": "string",
            "minLength": 20,
            "maxLength": 20
          },
          "plenigoProductId": {
            "description": "if the product is based on a plenigo offer the plenigo product id is provided here - can be identically to the productId",
            "type": "string",
            "minLength": 20,
            "maxLength": 20
          },
          "plenigoStepId": {
            "description": "if the product is based on a plenigo offer the plenigo step id is provided here",
            "type": "string",
            "minLength": 20,
            "maxLength": 20
          },
          "accessRightUniqueId": {
            "description": "unique id of the access right this order item grants access to",
            "type": "string",
            "pattern": "^[0-9\\\\-a-zA-Z]{2,30}$"
          },
          "title": {
            "description": "product title presented to the customer",
            "type": "string",
            "maxLength": 100
          },
          "internalTitle": {
            "description": "if the product is based on a plenigo offer the product title for internal usage is provided here",
            "type": "string",
            "maxLength": 100
          },
          "taxType": {
            "description": "unique identification of the tax type the product represents - important for tax handling purposes",
            "type": "string",
            "enum": [
              "ADVERTISEMENT",
              "BOOK",
              "DIGITALNEWSPAPER",
              "DIGITALOFFER",
              "DIGITALPRODUCT",
              "DONATION",
              "DOWNLOAD",
              "EBOOK",
              "EVENT",
              "FEE",
              "MAGAZINE",
              "MEMBERSHIP",
              "MUSIC",
              "NEWSPAPER",
              "PHYSICALPRODUCT",
              "VIDEO",
              "VOUCHER"
            ]
          },
          "price": {
            "description": "price of the order item",
            "type": "number",
            "format": "double",
            "minimum": 0,
            "maximum": 100000
          },
          "tax": {
            "description": "tax percentage operated on this order item",
            "type": "number",
            "format": "double",
            "minimum": 0,
            "maximum": 100
          },
          "taxCountry": {
            "description": "country tax is based on formatted as <a href=\"https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\" target=\"_blank\">ISO 3166-1 alpha-2</a>",
            "type": "string",
            "minLength": 2,
            "maxLength": 2
          },
          "quantity": {
            "description": "purchase quantity",
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 10000
          },
          "discountPercentage": {
            "description": "discount offered to the order item",
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 100
          },
          "costCenter": {
            "description": "cost center associated with this product at the time of order creation",
            "type": "string",
            "maxLength": 20
          },
          "voucherCode": {
            "description": "voucher code to purchase this order item",
            "type": "string",
            "maxLength": 100
          },
          "deliveryCustomerId": {
            "description": "id of the customer the delivery belongs to (also includes digital products)",
            "type": "string",
            "maxLength": 100
          },
          "deliveryAddress": {
            "$ref": "#/components/schemas/OrderAddress"
          },
          "subscriptionItemId": {
            "description": "if order item represents a subscription the id of the subscription item is provided here",
            "type": "integer",
            "format": "int64"
          },
          "externalBilling": {
            "description": "indicates if payments are handled by plenigo or an external system",
            "type": "boolean"
          },
          "taxState": {
            "description": "country state used for taxes - only needed in USA and Brasil",
            "type": "string",
            "maxLength": 2
          },
          "purchasedAddonId": {
            "description": "unique id of the purchased addon",
            "type": "integer",
            "format": "int64"
          },
          "validityEndDate": {
            "description": "validity end date with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "voucherPurchase": {
            "$ref": "#/components/schemas/VoucherPurchaseData"
          },
          "voucherUsage": {
            "$ref": "#/components/schemas/VoucherUsageData"
          }
        },
        "required": [
          "position",
          "productId",
          "title",
          "taxType",
          "price",
          "tax",
          "taxCountry",
          "quantity",
          "discountPercentage",
          "deliveryCustomerId"
        ]
      },
      "Order": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBase"
          }
        ],
        "type": "object",
        "properties": {
          "orderId": {
            "description": "unique id of the order in the context of a company",
            "type": "integer",
            "format": "int64"
          },
          "externalSystemId": {
            "description": "if order was imported from another system this field contains the unique id of the other system",
            "type": "string",
            "maxLength": 100
          },
          "status": {
            "description": "current status of the order",
            "type": "string",
            "enum": [
              "ACTIVE",
              "DONE",
              "CANCELLED"
            ]
          },
          "type": {
            "description": "current type of the order",
            "type": "string",
            "enum": [
              "ORDER",
              "CROSS_SELLING"
            ]
          },
          "orderDate": {
            "description": "order date time of the order with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "accumulatedPrice": {
            "description": "accumulated price of the order",
            "type": "number",
            "format": "double"
          },
          "currency": {
            "description": "currency of the order formatted as <a href=\"https://en.wikipedia.org/wiki/ISO_4217\" target=\"_blank\">ISO 4217, alphabetic code</a>",
            "type": "string",
            "minLength": 3,
            "maxLength": 3
          },
          "paymentMethod": {
            "description": "payment method used to pay for the order (ZERO indicates a free subscription)",
            "type": "string",
            "enum": [
              "AMAZON_PAY",
              "APPLE_PAY",
              "BANK_ACCOUNT",
              "BILLING",
              "CREDIT_CARD",
              "GOOGLE_PAY",
              "IDEAL",
              "PAYPAL",
              "POSTFINANCE",
              "SOFORT",
              "TWINT",
              "ZERO"
            ]
          },
          "paymentMethodId": {
            "description": "id of the payment method that is associated with this order",
            "type": "integer",
            "format": "int64"
          },
          "paymentMethodDetails": {
            "description": "optional payment method details",
            "$ref": "#/components/schemas/PaymentMethodDetails"
          },
          "purchaseOrderIndicator": {
            "description": "purchase order indicator if provided by the customer",
            "type": "string",
            "maxLength": 50
          },
          "invoiceCustomerId": {
            "description": "id of the customer the invoice belongs to",
            "type": "string",
            "maxLength": 100
          },
          "analogInvoice": {
            "description": "flag indicating if order should produce analog invoices",
            "type": "boolean"
          },
          "managedExternal": {
            "description": "flag indicates if a subscription is not managed by plenigo",
            "type": "boolean"
          },
          "suppressInvoiceSending": {
            "description": "flag indicating if the subscription invoice sending is suppressed",
            "type": "boolean"
          },
          "giftInfo": {
            "$ref": "#/components/schemas/GiftInfo"
          },
          "invoiceAddress": {
            "$ref": "#/components/schemas/OrderAddress"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderItem"
            }
          }
        },
        "required": [
          "orderId",
          "orderDate",
          "accumulatedPrice",
          "currency",
          "paymentMethod",
          "invoiceCustomerId",
          "items"
        ]
      },
      "Orders": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Order"
            }
          }
        }
      },
      "OptIn": {
        "type": "object",
        "properties": {
          "optInId": {
            "description": "technical id of the opt in for relation to the merchant backend opt in id",
            "type": "integer",
            "format": "int64"
          },
          "uniqueId": {
            "description": "unique id of the last active opt in",
            "type": "string",
            "maxLength": 100
          },
          "changedDate": {
            "description": "date time the opt in was changed with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "status": {
            "description": "status of the opt in",
            "type": "string",
            "enum": [
              "NONE",
              "SINGLE_OPT_IN",
              "DOUBLE_OPT_IN",
              "OBJECTION_OPT_IN",
              "REVOKED_OPT_IN"
            ]
          }
        }
      },
      "OptIns": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBase"
          }
        ],
        "type": "object",
        "properties": {
          "customerId": {
            "description": "id of the customer the login attempt is done for",
            "type": "string",
            "pattern": "^[0-9]{1,18}$"
          },
          "optIns": {
            "type": "object",
            "properties": {
              "key": {
                "description": "opt in type",
                "type": "string",
                "enum": [
                  "EMAIL",
                  "MESSENGER",
                  "PHONE",
                  "POST"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/OptIn"
              }
            }
          }
        }
      },
      "OptInUpdate": {
        "type": "object",
        "properties": {
          "status": {
            "description": "status of the opt in",
            "type": "string",
            "enum": [
              "NONE",
              "SINGLE_OPT_IN",
              "DOUBLE_OPT_IN",
              "OBJECTION_OPT_IN",
              "REVOKED_OPT_IN"
            ]
          }
        }
      },
      "OptInsUpdate": {
        "type": "object",
        "properties": {
          "optIns": {
            "type": "object",
            "properties": {
              "key": {
                "description": "opt in type",
                "type": "string",
                "enum": [
                  "EMAIL",
                  "MESSENGER",
                  "PHONE",
                  "POST"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/OptInUpdate"
              }
            }
          }
        }
      },
      "AmazonPayAccount": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBase"
          }
        ],
        "type": "object",
        "properties": {
          "amazonPayAccountId": {
            "description": "unique id of the Amazon pay account",
            "type": "integer",
            "format": "int64"
          },
          "chargePermissionId": {
            "description": "charge permission id of the Amazon pay account",
            "type": "string",
            "maxLength": 30
          },
          "preferred": {
            "description": "flag indicating if Amazon pay account is the preferred Amazon pay account - only one Amazon pay account can be preferred.",
            "type": "boolean"
          },
          "customerId": {
            "description": "unique id of the customer the Amazon pay account belongs to",
            "type": "string",
            "pattern": "^[0-9]{1,18}$"
          },
          "active": {
            "description": "flag indicating if Amazon pay account is active - a bank account can become inactive by getting closed, etc.",
            "type": "boolean"
          }
        },
        "required": [
          "amazonPayAccountId",
          "chargePermissionId",
          "customerId",
          "changedDate"
        ]
      },
      "BankAccountChange": {
        "type": "object",
        "properties": {
          "owner": {
            "description": "name on bank account",
            "type": "string",
            "maxLength": 30
          },
          "iban": {
            "description": "<a href=\"https://en.wikipedia.org/wiki/International_Bank_Account_Number\" target=\"_blank\">IBAN</a>",
            "type": "string",
            "minLength": 18,
            "maxLength": 32
          },
          "bic": {
            "description": "<a href=\"https://en.wikipedia.org/wiki/ISO_9362\" target=\"_blank\">BIC</a> - only necessary for countries outside the EU",
            "type": "string",
            "minLength": 8,
            "maxLength": 11
          },
          "preferred": {
            "description": "flag indicating if bank account is the preferred bank account - only one bank account can be preferred.",
            "type": "boolean"
          },
          "invalid": {
            "description": "flag indicating if payment method should be handled as invalid",
            "type": "boolean"
          }
        },
        "required": [
          "owner",
          "iban"
        ]
      },
      "BankAccountCreation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BankAccountChange"
          }
        ],
        "type": "object",
        "properties": {
          "customerId": {
            "description": "unique id of the payment mandate - if not sent plenigo will generate a new one together with a mandate date",
            "type": "string",
            "pattern": "^[0-9]{1,18}$"
          },
          "mandateId": {
            "description": "unique id of the payment mandate",
            "type": "string"
          },
          "mandateDate": {
            "description": "date the payment mandate was created with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "null",
              "string"
            ],
            "format": "date"
          },
          "pspMandateId": {
            "description": "psp mandate id",
            "type": "string",
            "maxLength": 100
          }
        },
        "required": [
          "customerId"
        ]
      },
      "BankAccount": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BankAccountCreation"
          },
          {
            "$ref": "#/components/schemas/ApiBase"
          }
        ],
        "type": "object",
        "properties": {
          "bankAccountId": {
            "description": "unique id of the bank account",
            "type": "integer",
            "format": "int64"
          },
          "active": {
            "description": "flag indicating if bank account is active - a bank account can become inactive by getting closed, etc.",
            "type": "boolean"
          }
        },
        "required": [
          "bankAccountId",
          "mandateId",
          "mandateDate"
        ]
      },
      "BankAccounts": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BankAccount"
            }
          }
        }
      },
      "CreditCardChange": {
        "type": "object",
        "properties": {
          "owner": {
            "description": "name on credit card",
            "type": "string",
            "maxLength": 30
          },
          "cardType": {
            "description": "type of the credit card provided",
            "type": "string",
            "enum": [
              "VISA",
              "MASTERCARD",
              "AMERICAN_EXPRESS",
              "DISCOVER",
              "DINERS_CLUB",
              "JCB"
            ]
          },
          "providerToken": {
            "description": "unique credit card token provided by the payment service provider to identify credit card",
            "type": "string",
            "maxLength": 100
          },
          "obfuscatedNumber": {
            "description": "obfuscated credit card number",
            "type": "string",
            "maxLength": 30
          },
          "validTo": {
            "description": "date the credit card is valid to with full-date notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-01 - must be in the future",
            "type": [
              "null",
              "string"
            ],
            "format": "date"
          },
          "preferred": {
            "description": "flag indicating if credit card is the preferred credit card - only one credit card can be preferred.",
            "type": "boolean"
          },
          "invalid": {
            "description": "flag indicating if payment method should be handled as invalid",
            "type": "boolean"
          }
        },
        "required": [
          "owner",
          "providerToken",
          "obfuscatedNumber",
          "validTo"
        ]
      },
      "CreditCardCreation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CreditCardChange"
          }
        ],
        "type": "object",
        "properties": {
          "customerId": {
            "description": "unique id of the customer the credit card belongs to",
            "type": "string",
            "pattern": "^[0-9]{1,18}$"
          }
        },
        "required": [
          "validTo"
        ]
      },
      "CreditCard": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CreditCardCreation"
          },
          {
            "$ref": "#/components/schemas/ApiBase"
          }
        ],
        "type": "object",
        "properties": {
          "creditCardId": {
            "description": "unique id of the credit card",
            "type": "integer",
            "format": "int64"
          },
          "paymentProvider": {
            "description": "payment provider credit card is associated with",
            "type": "string",
            "maxLength": 30
          },
          "issuer": {
            "description": "describes the issuer of the field if available - this can be used to identify ApplePay, GooglePay, etc.",
            "type": "string",
            "maxLength": 100
          },
          "active": {
            "description": "flag indicating if credit card is active - a credit card can become inactive by a passed validity date, loss, etc.",
            "type": "boolean"
          }
        },
        "required": [
          "creditCardId",
          "active"
        ]
      },
      "CreditCards": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreditCard"
            }
          }
        }
      },
      "PayPalAccountChange": {
        "type": "object",
        "properties": {
          "billingAgreementId": {
            "description": "PayPal billing agreement",
            "type": "string",
            "maxLength": 30
          },
          "preferred": {
            "description": "flag indicating if PayPal account is the preferred PayPal account - only one PayPal account can be preferred.",
            "type": "boolean"
          },
          "invalid": {
            "description": "flag indicating if payment method should be handled as invalid",
            "type": "boolean"
          }
        },
        "required": [
          "billingAgreementId"
        ]
      },
      "PayPalAccountCreation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PayPalAccountChange"
          }
        ],
        "type": "object",
        "properties": {
          "customerId": {
            "description": "unique id of the customer the PayPal account belongs to",
            "type": "string",
            "pattern": "^[0-9]{1,18}$"
          }
        },
        "required": [
          "billingAgreementId"
        ]
      },
      "PayPalAccount": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PayPalAccountCreation"
          },
          {
            "$ref": "#/components/schemas/ApiBase"
          }
        ],
        "type": "object",
        "properties": {
          "payPalAccountId": {
            "description": "unique id of the PayPal account",
            "type": "integer",
            "format": "int64"
          },
          "active": {
            "description": "flag indicating if PayPal account is active - a PayPal account can become inactive by getting closed, etc.",
            "type": "boolean"
          }
        }
      },
      "PayPalAccounts": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PayPalAccount"
            }
          }
        }
      },
      "IDealAccountChange": {
        "type": "object",
        "properties": {
          "owner": {
            "description": "name on bank account",
            "type": "string",
            "maxLength": 30
          },
          "obfuscatedIban": {
            "description": "obfuscated IBAN",
            "type": "string",
            "maxLength": 32
          },
          "pspAccountId": {
            "description": "payment service provider iDeal account id",
            "type": "string",
            "maxLength": 100
          },
          "fingerprint": {
            "description": "fingerprint to check account uniqueness",
            "type": "string",
            "maxLength": 100
          },
          "preferred": {
            "description": "flag indicating if iDeal account is the preferred one",
            "type": "boolean"
          },
          "invalid": {
            "description": "flag indicating if payment method should be handled as invalid",
            "type": "boolean"
          }
        },
        "required": [
          "owner",
          "obfuscatedIban",
          "pspAccountId",
          "fingerprint",
          "preferred"
        ]
      },
      "IDealAccount": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IDealAccountChange"
          },
          {
            "$ref": "#/components/schemas/ApiBase"
          }
        ],
        "type": "object",
        "properties": {
          "iDealAccountId": {
            "description": "unique id of the iDeal account",
            "type": "integer",
            "format": "int64"
          },
          "active": {
            "description": "flag indicating if iDeal account is active - an iDeal account can become inactive by getting closed, etc.",
            "type": "boolean"
          }
        }
      },
      "IDealAccounts": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IDealAccount"
            }
          }
        }
      },
      "PaymentMethods": {
        "type": "object",
        "properties": {
          "amazonPayAccounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AmazonPayAccount"
            }
          },
          "bankAccounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BankAccounts"
            }
          },
          "creditCards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreditCards"
            }
          },
          "payPalAccounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PayPalAccounts"
            }
          },
          "iDealAccounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IDealAccounts"
            }
          }
        }
      },
      "CustomerStatusChange": {
        "type": "object",
        "properties": {
          "status": {
            "description": "new status the customer should become\n\n| Status      | Description                                                                                                                                               |\n| ----------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------|\n| ACTIVATED   | customer is active and can log in and use full functionality                                                                                              |\n| BLOCKED     | customer is blocked and needs to reset his password to be able to log in again                                                                            |\n| DEACTIVATED | customer is deactivated and cannot log in - the customer cannot change this state by himself and a log in attempt is handled like a false password log in |\n",
            "type": "string",
            "enum": [
              "ACTIVATED",
              "BLOCKED",
              "DEACTIVATED"
            ]
          }
        }
      },
      "CustomerStatus": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBaseDate"
          }
        ],
        "type": "object",
        "properties": {
          "statusChangeId": {
            "description": "unique id of the customer status in the context of a contract company",
            "type": "integer",
            "format": "int64"
          },
          "customerId": {
            "description": "unique id of the customer",
            "type": "string",
            "pattern": "^[0-9]{1,18}$"
          },
          "startTime": {
            "description": "time the status started with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "endTime": {
            "description": "time this status ended with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "oldStatus": {
            "description": "old status",
            "type": "string",
            "enum": [
              "ACTIVATED",
              "BLOCKED",
              "DEACTIVATED"
            ]
          },
          "newStatus": {
            "description": "current status",
            "type": "string",
            "enum": [
              "ACTIVATED",
              "BLOCKED",
              "DEACTIVATED"
            ]
          }
        }
      },
      "SubscriptionConnectedOfferInfo": {
        "type": "object",
        "properties": {
          "contractCompanyId": {
            "description": "id of the contract company the subscription is connected to",
            "type": "string",
            "maxLength": 100
          },
          "companyId": {
            "description": "id of the company the subscription is connected to",
            "type": "string",
            "maxLength": 100
          },
          "customerId": {
            "description": "id of the customer the subscription is connected to",
            "type": "string",
            "maxLength": 100
          },
          "plenigoOfferId": {
            "description": "the connected plenigo offer id the subscription is connected to",
            "type": "string",
            "minLength": 20,
            "maxLength": 20
          }
        },
        "required": [
          "contractCompanyId",
          "companyId",
          "plenigoOfferId"
        ]
      },
      "SubscriptionPauseAt": {
        "type": "object",
        "properties": {
          "startPauseDate": {
            "description": "date subscription pause should be start with full-date notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21",
            "type": [
              "null",
              "string"
            ],
            "format": "date"
          },
          "endPauseDate": {
            "description": "date subscription pause should be end with full-date notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21",
            "type": [
              "null",
              "string"
            ],
            "format": "date"
          },
          "pauseType": {
            "description": "type of the pause",
            "type": "string",
            "enum": [
              "PAYMENT_ONLY",
              "STANDARD"
            ]
          }
        },
        "required": [
          "startPauseDate",
          "endPauseDate"
        ]
      },
      "SubscriptionItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBase"
          }
        ],
        "type": "object",
        "properties": {
          "subscriptionItemId": {
            "description": "unique id of the subscription item in the context of a company",
            "type": "integer",
            "format": "int64"
          },
          "productId": {
            "description": "id of the product bought",
            "type": "string",
            "maxLength": 100
          },
          "plenigoProductId": {
            "description": "if the product is based on a plenigo offer the plenigo product id is provided here - can be identically to the productId",
            "type": "string",
            "minLength": 20,
            "maxLength": 20
          },
          "plenigoStepId": {
            "description": "if the product is based on a plenigo offer the plenigo step id is provided here",
            "type": "string",
            "minLength": 20,
            "maxLength": 20
          },
          "accessRightUniqueId": {
            "description": "unique id of the access right this subscription item grants access to",
            "type": "string",
            "pattern": "^[0-9\\\\-a-zA-Z]{2,30}$"
          },
          "title": {
            "description": "product title presented to the customer",
            "type": "string",
            "maxLength": 100
          },
          "internalTitle": {
            "description": "if the product is based on a plenigo offer the product title for internal usage is provided here",
            "type": "string",
            "maxLength": 100
          },
          "taxType": {
            "description": "unique identification of tax type the product represents - important for tax handling purposes",
            "type": "string",
            "enum": [
              "ADVERTISEMENT",
              "BOOK",
              "DIGITALNEWSPAPER",
              "DIGITALOFFER",
              "DIGITALPRODUCT",
              "DONATION",
              "DOWNLOAD",
              "EBOOK",
              "EVENT",
              "FEE",
              "MAGAZINE",
              "MEMBERSHIP",
              "MUSIC",
              "NEWSPAPER",
              "PHYSICALPRODUCT",
              "VIDEO",
              "VOUCHER"
            ]
          },
          "packageTitle": {
            "description": "if subscription item is correlated to another subscription item in a way that both items are presented as one (bundle) this field contains the correlation title",
            "type": "string",
            "maxLength": 100
          },
          "packageId": {
            "description": "if subscription item is correlated to another subscription item in a way that both items are presented as one (bundle) this field contains the correlation id - the id is only unique within a subscription",
            "type": "string",
            "maxLength": 100
          },
          "packageCancellationLocked": {
            "description": "flag indicating if package elements can only be cancelled together",
            "type": "boolean"
          },
          "price": {
            "description": "price of the subscription",
            "type": "number",
            "format": "double",
            "minimum": 0,
            "maximum": 100000
          },
          "priceIssueId": {
            "description": "id of the price issue the subscription item's price is based on",
            "type": "integer",
            "format": "int64"
          },
          "discountPercentage": {
            "description": "discount offered to the subscription",
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 100
          },
          "quantity": {
            "description": "quantity of purchased entities",
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 10000
          },
          "creditCount": {
            "description": "available credit count to use",
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "maximum": 100000000
          },
          "creditWalletUniqueId": {
            "description": "the credit wallet unique id",
            "type": "string",
            "maxLength": 50
          },
          "status": {
            "description": "current status of the subscription item",
            "type": "string",
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "CANCELLED"
            ]
          },
          "costCenter": {
            "description": "cost center associated with this subscription item",
            "type": "string",
            "maxLength": 20
          }
        },
        "required": [
          "subscriptionItemId",
          "productId",
          "title",
          "price",
          "discountPercentage",
          "quantity"
        ]
      },
      "Subscription": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBase"
          }
        ],
        "type": "object",
        "properties": {
          "subscriptionId": {
            "description": "unique id of the subscription in the context of a company",
            "type": "integer",
            "format": "int64"
          },
          "analogInvoice": {
            "description": "flag indicating if the subscription is a analog invoice",
            "type": "boolean"
          },
          "externalSystemId": {
            "description": "if subscription was imported from another system this field contains the unique id of the other system",
            "type": "string",
            "maxLength": 100
          },
          "chainId": {
            "description": "all subscriptions that are in one chain because of some rules or cross selling share a unique chain id in the context of a company that is identically with the first subscription within the chain",
            "type": "integer",
            "format": "int64"
          },
          "plenigoOfferId": {
            "description": "if the product is based on a plenigo offer the plenigo offer id is provided here",
            "type": "string",
            "minLength": 20,
            "maxLength": 20
          },
          "invoiceCustomerId": {
            "description": "id of the customer the invoice belongs to",
            "type": "string",
            "maxLength": 100
          },
          "invoiceAddressId": {
            "description": "id of the invoice address that is associated with this subscription",
            "type": "integer",
            "format": "int64"
          },
          "deliveryCustomerId": {
            "description": "id of the customer the delivery belongs to (also includes digital products)",
            "type": "string",
            "maxLength": 100
          },
          "deliveryAddressId": {
            "description": "id of the delivery address that is associated with this subscription",
            "type": "integer",
            "format": "int64"
          },
          "term": {
            "description": "term of the subscription",
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 100
          },
          "termTimeSpan": {
            "description": "represents the time span that is represented by the term",
            "type": "string",
            "enum": [
              "DAY",
              "MONTH",
              "NONE",
              "WEEK",
              "YEAR"
            ]
          },
          "accountingPeriod": {
            "description": "accounting period of the subscription",
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 100
          },
          "accountingPeriodTimeSpan": {
            "description": "represents the time span that is represented by the accounting period",
            "type": "string",
            "enum": [
              "DAY",
              "MONTH",
              "NONE",
              "WEEK",
              "YEAR"
            ]
          },
          "cancellationPeriod": {
            "description": "cancellation period of the subscription",
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 100
          },
          "cancellationPeriodTimeSpan": {
            "description": "represents the time span that is represented by the cancellation period",
            "type": "string",
            "enum": [
              "DAY",
              "MONTH",
              "NONE",
              "WEEK",
              "YEAR"
            ]
          },
          "cancellationType": {
            "description": "represents the cancellation type of the subscription",
            "type": "string",
            "enum": [
              "CREDIT_BASED",
              "ISSUE_BASED",
              "ISSUE_BASED_REGULAR",
              "TIME_BASED"
            ]
          },
          "startDate": {
            "description": "start date time of the subscription with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "referenceStartDate": {
            "description": "reference start date time of the subscription with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "endDate": {
            "description": "end date time of the subscription with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "cancellationDate": {
            "description": "cancellation date time of the subscription with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "status": {
            "description": "current status of the subscription",
            "type": "string",
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "IGNORED"
            ]
          },
          "currency": {
            "description": "currency of the subscription formatted as <a href=\"https://en.wikipedia.org/wiki/ISO_4217\" target=\"_blank\">ISO 4217, alphabetic code</a>",
            "type": "string",
            "minLength": 3,
            "maxLength": 3
          },
          "paymentMethod": {
            "description": "payment method used to pay for the subscription (ZERO indicates a free subscription)",
            "type": "string",
            "enum": [
              "AMAZON_PAY",
              "APPLE_PAY",
              "BANK_ACCOUNT",
              "BILLING",
              "CREDIT_CARD",
              "GOOGLE_PAY",
              "IDEAL",
              "PAYPAL",
              "POSTFINANCE",
              "SOFORT",
              "TWINT",
              "ZERO"
            ]
          },
          "paymentMethodId": {
            "description": "id of the payment method that is associated with this subscription",
            "type": "integer",
            "format": "int64"
          },
          "paymentMethodDetails": {
            "description": "optional payment method details",
            "$ref": "#/components/schemas/PaymentMethodDetails"
          },
          "accessBlocked": {
            "description": "flag indicating if subscription is blocked and delivery customer cannot access products related to subscription, for example because of payment failed",
            "type": "boolean"
          },
          "firstBookingDate": {
            "description": "date the first booking was executed for this subscription with full-date notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21",
            "type": [
              "null",
              "string"
            ],
            "format": "date"
          },
          "lastBookingDate": {
            "description": "date the last booking was executed for this subscription with full-date notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21",
            "type": [
              "null",
              "string"
            ],
            "format": "date"
          },
          "nextBookingDate": {
            "description": "date the next booking is going to be executed for this subscription with full-date notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21",
            "type": [
              "null",
              "string"
            ],
            "format": "date"
          },
          "precursorId": {
            "description": "if there is another subscription preceding this subscription the id of the preceding subscription is provided here",
            "type": "integer",
            "format": "int64"
          },
          "precursorReason": {
            "description": "reason for changing the subscription from the precursor",
            "type": "string",
            "enum": [
              "ACTION",
              "AGE",
              "CANCELLATION",
              "CROSS_SELLING",
              "PRICE_PERIOD",
              "PRODUCT_EOL",
              "RELATION_RULE"
            ]
          },
          "precursorReasonDetail": {
            "description": "reason detail for changing the subscription from the precursor",
            "type": "string"
          },
          "successorId": {
            "description": "if there is another subscription following up this subscription the id of the next subscription is provided here",
            "type": "integer",
            "format": "int64"
          },
          "successorReason": {
            "description": "reason for changing the subscription to the successor",
            "type": "string",
            "enum": [
              "ACTION",
              "AGE",
              "CANCELLATION",
              "CROSS_SELLING",
              "PRICE_PERIOD",
              "PRODUCT_EOL",
              "RELATION_RULE"
            ]
          },
          "successorReasonDetail": {
            "description": "reason detail for changing the subscription to the successor",
            "type": "string"
          },
          "externalBilling": {
            "description": "indicates if payments are handled by plenigo or an external system",
            "type": "boolean"
          },
          "customerCancellationBlocked": {
            "description": "indicates if a subscription cannot be cancelled by a customer",
            "type": "boolean"
          },
          "cancellationReasonUniqueId": {
            "description": "if a subscription was cancelled and a cancellation reason was added the unique id of the cancellation reason is set here",
            "type": "string"
          },
          "customerCancellationReasonId": {
            "description": "id of the customer cancellation reason that is associated with this subscription",
            "type": "integer",
            "format": "int64"
          },
          "durationPeriod": {
            "description": "duration period of the subscription till it ends in the successor subscription",
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 100
          },
          "durationPeriodTimeSpan": {
            "description": "represents the time span that is represented by the duration period",
            "type": "string",
            "enum": [
              "DAY",
              "MONTH",
              "NONE",
              "WEEK",
              "YEAR"
            ]
          },
          "managedExternal": {
            "description": "flag indicates if a subscription is not managed by plenigo",
            "type": "boolean"
          },
          "managedBy": {
            "description": "managed by of the given subscription.",
            "type": "string",
            "enum": [
              "PLENIGO",
              "EXTERNAL",
              "WBZ"
            ]
          },
          "paymentTriesDone": {
            "description": "amount of payment tries done in the current accounting period",
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 100
          },
          "subscriptionType": {
            "description": "represents the type of the subscription",
            "type": "string",
            "enum": [
              "CREDIT_BASED",
              "CREDIT_TIME_BASED",
              "CREDIT_TRIGGER_BASED",
              "CROSS_COMPANY_TIME_BASED",
              "ISSUE_BASED",
              "TIME_BASED",
              "TIME_CREDIT_BASED",
              "VOUCHER_CREDIT_BASED",
              "VOUCHER_CREDIT_TIME_BASED",
              "VOUCHER_CREDIT_TRIGGER_BASED",
              "VOUCHER_ISSUE_BASED",
              "VOUCHER_TIME_BASED",
              "VOUCHER_TIME_CREDIT_BASED"
            ]
          },
          "suppressInvoiceSending": {
            "description": "flag indicating if the subscription invoice sending is suppressed",
            "type": "boolean"
          },
          "purchaseOrderIndicator": {
            "description": "purchase order indicator to set",
            "type": "string",
            "maxLength": 50
          },
          "connectedOffer": {
            "description": "flag indicates if a subscription is a connected offer",
            "type": "boolean"
          },
          "connectedOfferInfo": {
            "description": "optional payment method details",
            "$ref": "#/components/schemas/SubscriptionConnectedOfferInfo"
          },
          "finishedDeliveries": {
            "description": "the current amount of finished deliveries",
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "openDeliveries": {
            "description": "the current amount of open deliveries",
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "deliveries": {
            "description": "the amount of deliveries",
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "chargeableDeliveries": {
            "description": "the amount of chargeable deliveries",
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "recurringDeliveries": {
            "description": "the amount of recurring deliveries",
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "activePartners": {
            "description": "the active partners",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "deliveryPaused": {
            "description": "the subscription delivery paused data",
            "$ref": "#/components/schemas/SubscriptionPauseAt"
          },
          "paused": {
            "description": "the subscription paused data",
            "$ref": "#/components/schemas/SubscriptionPauseAt"
          },
          "paymentPaused": {
            "description": "the subscription payment paused data",
            "$ref": "#/components/schemas/SubscriptionPauseAt"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubscriptionItem"
            }
          }
        },
        "required": [
          "subscriptionId",
          "invoiceCustomerId",
          "deliveryCustomerId",
          "startDate",
          "term",
          "termTimeSpan",
          "accountingPeriod",
          "accountingPeriodTimeSpan",
          "cancellationPeriod",
          "cancellationPeriodTimeSpan",
          "currency",
          "paymentMethod"
        ]
      },
      "Subscriptions": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Subscription"
            }
          }
        }
      },
      "Transaction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBaseDate"
          }
        ],
        "type": "object",
        "properties": {
          "transactionId": {
            "description": "unique id of the transaction also used for pagination",
            "type": "integer",
            "format": "int64"
          },
          "plenigoTransactionId": {
            "description": "unique plenigo transaction id used to communicate with payment provider",
            "type": "string",
            "maxLength": 32
          },
          "transactionDate": {
            "description": "date the transaction was done with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "fulfillmentDate": {
            "description": "date the transaction was fulfilled with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "amount": {
            "description": "amount of the transaction",
            "type": "number",
            "format": "double"
          },
          "currency": {
            "description": "currency of the transaction formatted as <a href=\"https://en.wikipedia.org/wiki/ISO_4217\" target=\"_blank\">ISO 4217, alphabetic code</a>",
            "type": "string",
            "minLength": 3,
            "maxLength": 3
          },
          "paymentProvider": {
            "description": "payment provider used for transaction execution",
            "type": "string",
            "enum": [
              "AMAZON",
              "APPLE",
              "DATATRANS",
              "GOOGLE",
              "PAYONE",
              "PAYPAL",
              "STRIPE",
              "WIRECARD_LEGACY"
            ]
          },
          "paymentMethod": {
            "description": "payment method used",
            "type": "string",
            "enum": [
              "AMAZON_PAY",
              "APPLE_PAY",
              "BANK_ACCOUNT",
              "BILLING",
              "CREDIT_CARD",
              "GOOGLE_PAY",
              "IDEAL",
              "PAYPAL",
              "POSTFINANCE",
              "SOFORT",
              "TWINT",
              "ZERO"
            ]
          },
          "paymentAction": {
            "description": "payment action executed",
            "type": "string",
            "enum": [
              "AMAZON_EXECUTE_PAYMENT",
              "AMAZON_EXECUTE_REFUND",
              "AMAZON_FINISH_CHECKOUT_SESSION",
              "AMAZON_PAY_INITIALIZATION",
              "BANK_FEES",
              "CREDIT_CARD_INITIALIZATION",
              "CREDIT_CARD_VERIFICATION",
              "CREDIT_CARD_AUTHORIZATION",
              "CREDIT_CARD_PRE_AUTHORIZATION",
              "CREDIT_CARD_REFUND",
              "CREDIT_CARD_PAYMENT",
              "CREDIT_CARD_CHARGEBACK",
              "IDEAL_INITIALIZATION",
              "IDEAL_DATA",
              "PAYPAL_PAYMENT",
              "PAYPAL_PAYOUT",
              "PAYPAL_PAYMENT_FAILED",
              "PAYPAL_REFERENCE_TRANSACTION",
              "PAYPAL_REFUND",
              "PAYPAL_PAYOUT",
              "SEPA_CREATION",
              "SEPA_DEBIT",
              "SEPA_DEBIT_RETURN",
              "SEPA_MANDATE_CREATION",
              "SEPA_VOID",
              "SOFORT_PAYMENT",
              "SOFORT_REFUND"
            ]
          },
          "paymentStatus": {
            "description": "status of the transaction",
            "type": "string",
            "enum": [
              "FAILURE",
              "PENDING",
              "SUCCESS"
            ]
          },
          "customerId": {
            "description": "unique id of the customer the transaction is related to",
            "type": "string",
            "pattern": "^[0-9]{1,18}$"
          },
          "pspTransactionId": {
            "description": "id of the payment service provider if one was provided",
            "type": "string",
            "maxLength": 80
          },
          "description": {
            "description": "description describing the transaction reason",
            "type": "string",
            "maxLength": 500
          },
          "errorCode": {
            "description": "error code for transaction failure",
            "type": "string",
            "maxLength": 100
          },
          "errorMessage": {
            "description": "description of the error",
            "type": "string",
            "maxLength": 500
          }
        },
        "required": [
          "transactionId",
          "plenigoTransactionId",
          "amount",
          "currency",
          "paymentProvider",
          "paymentMethod",
          "paymentAction",
          "paymentStatus",
          "customerId"
        ]
      },
      "Transactions": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Transaction"
            }
          }
        }
      },
      "CustomerCreditWallet": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBase"
          }
        ],
        "type": "object",
        "properties": {
          "uniqueId": {
            "description": "unique id of the wallet for identification",
            "type": "string",
            "pattern": "^[0-9\\\\-a-zA-Z]{2,30}$"
          },
          "title": {
            "description": "title of the customer wallet",
            "type": "string",
            "maxLength": 100
          },
          "availableCreditCount": {
            "description": "available credit count to use",
            "type": "integer",
            "format": "int64",
            "minimum": 1,
            "maximum": 100000000
          },
          "creditCountInvalidation": {
            "description": "flag indicating if credit counts will be invalidated after a time if no active subscription is associated",
            "type": "boolean"
          },
          "creditValidityTime": {
            "description": "time credits are invalidated if credit count invalidation is active",
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 36
          },
          "creditValidityTimespan": {
            "description": "time credit validity timespan",
            "type": "string",
            "enum": [
              "DAY",
              "MONTH",
              "NONE",
              "WEEK",
              "YEAR"
            ]
          },
          "creditValidityTimeStart": {
            "description": "date time the credit validity starts in date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "customerCreditWalletId": {
            "description": "unique id of a customer credit wallet within a contract company",
            "type": "integer",
            "format": "int64"
          },
          "customerId": {
            "description": "unique id of the customer the credit wallet belongs to",
            "type": "string",
            "pattern": "^[0-9]{1,18}$"
          }
        }
      },
      "CustomerCreditWalletList": {
        "type": "object",
        "properties": {
          "items": {
            "description": "customer wallet list",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerCreditWallet"
            }
          }
        }
      },
      "CustomerLogInAttemptBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBase"
          }
        ],
        "type": "object",
        "properties": {
          "customerId": {
            "description": "id of the customer the login attempt is done for",
            "type": "string",
            "pattern": "^[0-9]{1,18}$"
          },
          "loginDate": {
            "description": "date time the login attempt happened with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "browser": {
            "description": "browser used for log in attempt if available",
            "type": "string",
            "maxLength": 100
          },
          "os": {
            "description": "os used for log in attempt if available",
            "type": "string",
            "maxLength": 100
          },
          "source": {
            "description": "login source of the user for log in attempt if available",
            "type": "string",
            "maxLength": 100
          },
          "sourceUrl": {
            "description": "source url for log in attempt if available",
            "type": "string",
            "maxLength": 5000
          },
          "country": {
            "description": "country of log in attempt if available",
            "type": "string",
            "maxLength": 100
          }
        }
      },
      "FailedCustomerLogInAttempt": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CustomerLogInAttemptBase"
          }
        ],
        "type": "object",
        "properties": {
          "failedCustomerLogInId": {
            "description": "technical id of the customer log in",
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "CustomerLogInAttempt": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CustomerLogInAttemptBase"
          }
        ],
        "type": "object",
        "properties": {
          "customerLogInId": {
            "description": "technical id of the customer log in",
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "StripeCustomerCreation": {
        "type": "object",
        "properties": {
          "stripeId": {
            "description": "Stripe id of the customer",
            "type": "string",
            "maxLength": 20
          }
        }
      },
      "StripeCustomer": {
        "type": "object",
        "properties": {
          "stripeId": {
            "description": "Stripe id of the customer",
            "type": "string",
            "maxLength": 20
          },
          "customerId": {
            "description": "unique id of the customer",
            "type": "string",
            "pattern": "^[0-9]{1,18}$"
          }
        }
      },
      "CustomerUsername": {
        "type": "object",
        "properties": {
          "username": {
            "description": "username",
            "type": "string",
            "maxLength": 100
          }
        }
      },
      "WbzCustomerMarkBase": {
        "type": "object",
        "properties": {
          "dealerGroup": {
            "description": "wbz dealer group",
            "type": "string",
            "maxLength": 200
          },
          "dealerNumber": {
            "description": "wbz dealer number",
            "type": "string",
            "maxLength": 200
          },
          "agencyPrice": {
            "description": "the agency price",
            "type": "number",
            "format": "double"
          },
          "basePrice": {
            "description": "the base price",
            "type": "number",
            "format": "double"
          },
          "exitLiability": {
            "description": "exitLiability",
            "type": "integer",
            "format": "int32"
          },
          "startWkzA": {
            "description": "start WKZ-A price",
            "type": "number",
            "format": "double"
          },
          "startWkzB": {
            "description": "start WKZ-B price",
            "type": "number",
            "format": "double"
          },
          "startWkzC": {
            "description": "start WKZ-C price",
            "type": "number",
            "format": "double"
          },
          "scaleWkzA": {
            "description": "scale WKZ-A price",
            "type": "number",
            "format": "double"
          },
          "scaleWkzB": {
            "description": "scale WKZ-B price",
            "type": "number",
            "format": "double"
          },
          "scaleWkzC": {
            "description": "scale WKZ-C price",
            "type": "number",
            "format": "double"
          },
          "data": {
            "type": "object",
            "properties": {
              "key": {
                "description": "customer tags",
                "type": "string",
                "maxLength": 100
              },
              "value": {
                "type": "string",
                "maxLength": 2000
              }
            }
          }
        },
        "required": [
          "dealerGroup",
          "dealerNumber"
        ]
      },
      "WbzCustomerMark": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBase"
          },
          {
            "$ref": "#/components/schemas/WbzCustomerMarkBase"
          }
        ],
        "type": "object",
        "required": [
          "dealerGroup",
          "dealerNumber"
        ]
      },
      "CustomerMarksData": {
        "type": "object",
        "properties": {
          "customerId": {
            "description": "unique id of the customer",
            "type": "string",
            "pattern": "^[0-9]{1,18}$"
          },
          "tags": {
            "type": "object",
            "properties": {
              "key": {
                "description": "customer tags",
                "type": "string",
                "enum": [
                  "WBZ"
                ]
              },
              "value": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/WbzCustomerMark"
                  }
                ]
              }
            }
          }
        },
        "required": [
          "customerId"
        ]
      },
      "CustomerId": {
        "type": "object",
        "properties": {
          "customerId": {
            "description": "unique id of the customer",
            "type": "string",
            "pattern": "^[0-9]{1,18}$"
          }
        },
        "required": [
          "customerId"
        ]
      },
      "OptInsList": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OptIns"
            }
          }
        }
      },
      "OrderImport": {
        "type": "object",
        "properties": {
          "externalSystemId": {
            "description": "external system id of the order import",
            "type": "string",
            "maxLength": 100
          },
          "plenigoOfferId": {
            "description": "unique id of the offer within a company",
            "type": "string",
            "minLength": 20,
            "maxLength": 20
          },
          "invoiceCustomerId": {
            "description": "id of the customer the order belongs to",
            "type": "string",
            "maxLength": 50
          },
          "invoiceAddressId": {
            "description": "unique id of the invoice address to use for this order",
            "type": "integer",
            "format": "int64"
          },
          "variantDeliveryAddressId": {
            "description": "variant delivery address for deliveries",
            "type": "integer",
            "format": "int64"
          },
          "deliveryCustomerId": {
            "description": "id of the delivery customer the order belongs to",
            "type": "string",
            "maxLength": 50
          },
          "deliveryAddressId": {
            "description": "unique id of the delivery address to use for this order",
            "type": "integer",
            "format": "int64"
          },
          "quantity": {
            "description": "purchase quantity",
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 10000
          },
          "discountPercentage": {
            "description": "discount offered to the order item",
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 100
          },
          "orderDate": {
            "description": "date time the order was done if differs from start date with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "startDate": {
            "description": "date time the order was created and also the start date of the subscription with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "endDate": {
            "description": "date time the subscriptions ends with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "referenceStartDate": {
            "description": "date time that should be used as reference for bookings and cancellations with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z - must not be before the start date and not more than one year in the past",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "nextBookingDate": {
            "description": "date time the subscription should be booked with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "paymentMethod": {
            "description": "payment method used to pay for the order (ZERO indicates a free subscription)",
            "type": "string",
            "enum": [
              "AMAZON_PAY",
              "APPLE_PAY",
              "BANK_ACCOUNT",
              "BILLING",
              "CREDIT_CARD",
              "GOOGLE_PAY",
              "IDEAL",
              "PAYPAL",
              "POSTFINANCE",
              "SOFORT",
              "TWINT",
              "ZERO"
            ]
          },
          "paymentMethodId": {
            "description": "id of the payment method that is associated with this order",
            "type": "integer",
            "format": "int64"
          },
          "plenigoBonusIds": {
            "description": "if the offer should contain bonuses the plenigo bonus id can be added here",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "managedBy": {
            "description": "managed by of the given order.",
            "type": "string",
            "enum": [
              "EXTERNAL",
              "WBZ"
            ]
          }
        },
        "required": [
          "externalSystemId",
          "plenigoOfferId",
          "invoiceCustomerId",
          "quantity",
          "startDate",
          "paymentMethod"
        ]
      },
      "OrderImports": {
        "type": "object",
        "properties": {
          "purchase": {
            "description": "flag indicating if import should be handled as a purchase",
            "type": "boolean"
          },
          "suppressMail": {
            "description": "flag indicating if the sending of mails should be suppressed",
            "type": "boolean"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderImport"
            }
          }
        }
      },
      "OrderImportLogEntry": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBaseDate"
          }
        ],
        "type": "object",
        "properties": {
          "orderImportLogEntryId": {
            "description": "unique id of the order import log entry",
            "type": "integer",
            "format": "int64"
          },
          "externalSystemId": {
            "description": "external system id of the order import",
            "type": "string",
            "maxLength": 100
          },
          "plenigoOfferId": {
            "description": "unique id of the offer within a company",
            "type": "string",
            "minLength": 20,
            "maxLength": 20
          },
          "purchaseOrderIndicator": {
            "description": "purchase order indicator to set",
            "type": "string",
            "maxLength": 50
          },
          "success": {
            "description": "success state of the order import",
            "type": "boolean"
          },
          "orderId": {
            "description": "unique id of the order if success is true which was created by this import",
            "type": "integer",
            "format": "int64"
          },
          "errorReason": {
            "description": "reason for failure if success is false",
            "type": "string",
            "maxLength": 1000
          },
          "errorDetail": {
            "description": "string or json object with error details",
            "type": "object"
          }
        }
      },
      "OrderImportLogEntries": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderImportLogEntry"
            }
          }
        }
      },
      "InvoiceFile": {
        "type": "object",
        "properties": {
          "pdf": {
            "description": "base64 encoded invoice file pdf",
            "type": "string"
          }
        },
        "required": [
          "pdf"
        ]
      },
      "InvoicePaymentStatusChange": {
        "type": "object",
        "properties": {
          "status": {
            "description": "payment status of the invoice",
            "type": "string",
            "enum": [
              "PAID",
              "NOT_PAID"
            ]
          }
        },
        "required": [
          "status"
        ]
      },
      "InvoiceXml": {
        "type": "object",
        "properties": {
          "xml": {
            "description": "xml formatted invoice file",
            "type": "string"
          }
        },
        "required": [
          "xml"
        ]
      },
      "MailLogEntry": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBaseDate"
          }
        ],
        "type": "object",
        "properties": {
          "mailLogEntryId": {
            "description": "unique id of the mail log entry",
            "type": "integer",
            "format": "int64"
          },
          "customerId": {
            "description": "id of the customer the mail was sent to",
            "type": "string",
            "pattern": "^[0-9]{1,18}$"
          },
          "mailSettingsType": {
            "description": "mail settings type configured",
            "type": "string",
            "enum": [
              "INTERN",
              "EXTERNAL",
              "DELEGATION"
            ]
          },
          "mailTemplateType": {
            "description": "mail template type of the mail sent",
            "type": "string",
            "enum": [
              "CHANGE_EMAIL",
              "CROSS_SELLING",
              "INVOICE",
              "ORDER",
              "ORDER_ITEM_VOUCHER",
              "PAYMENT_FAILED",
              "PAYMENT_METHOD_CHANGED",
              "RECURRING_PAYMENT_FAILED",
              "RECURRING_PAYMENT_TRY_FAILED",
              "REGISTRATION_ALREADY_FINISHED",
              "REGISTRATION_COMPLETION",
              "REGISTRATION_FINISHED",
              "RESET_PASSWORD",
              "RESET_PASSWORD_FINISHED",
              "SUBSCRIPTION_CANCELED",
              "SUBSCRIPTION_DELIVERY_PAUSED",
              "SUBSCRIPTION_DELIVERY_PAUSED_CANCELED",
              "SUBSCRIPTION_PAUSED",
              "SUBSCRIPTION_PAUSED_CANCELED",
              "SUBSCRIPTION_CANCELLATION_TERMINATION",
              "SUBSCRIPTION_RELATION_RULE",
              "WELCOME_MAIL"
            ]
          },
          "to": {
            "description": "mail receiver email address",
            "type": "string",
            "format": "email",
            "maxLength": 100
          },
          "from": {
            "description": "mail sender email address",
            "type": "string",
            "format": "email",
            "maxLength": 100
          },
          "bcc": {
            "description": "comma separated list of bcc receivers is there are any",
            "type": "string",
            "maxLength": 1000
          },
          "replyTo": {
            "description": "reply to email address",
            "type": "string",
            "format": "email",
            "maxLength": 100
          },
          "subject": {
            "description": "Subject of the email sent",
            "type": "string",
            "maxLength": 200
          },
          "success": {
            "description": "success state of the email delivery",
            "type": "boolean"
          },
          "errorReason": {
            "description": "reason for failure if success is false",
            "type": "string",
            "maxLength": 1000
          },
          "errorDetail": {
            "description": "string or json object with error details",
            "type": "object"
          }
        }
      },
      "MailLogEntries": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MailLogEntry"
            }
          }
        }
      },
      "AdditionalOrderDataList": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdditionalOrderData"
            }
          }
        }
      },
      "ApiUsedByOffer": {
        "type": "object",
        "properties": {
          "plenigoOfferId": {
            "description": "if the product is based on a plenigo offer the plenigo offer id is provided here",
            "type": "string",
            "minLength": 20,
            "maxLength": 20
          },
          "internalTitle": {
            "description": "if the product is based on a plenigo offer the product title for internal usage is provided here",
            "type": "string",
            "maxLength": 100
          }
        },
        "required": [
          "plenigoOfferId",
          "internalTitle"
        ]
      },
      "ApiUsedByObject": {
        "type": "object",
        "properties": {
          "id": {
            "description": "id of the object related",
            "type": "integer",
            "format": "int64"
          },
          "internalTitle": {
            "description": "if the product is based on a plenigo offer the product title for internal usage is provided here",
            "type": "string",
            "maxLength": 100
          }
        },
        "required": [
          "id",
          "internalTitle"
        ]
      },
      "ApiUsedBy": {
        "type": "object",
        "properties": {
          "voucherPurchases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiUsedByOffer"
            }
          },
          "relationRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiUsedByObject"
            }
          },
          "ageRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiUsedByObject"
            }
          }
        }
      },
      "EnhancedOrder": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Order"
          }
        ],
        "type": "object",
        "properties": {
          "usedBy": {
            "$ref": "#/components/schemas/ApiUsedBy"
          }
        }
      },
      "PdfFile": {
        "type": "object",
        "properties": {
          "pdf": {
            "description": "base64 encoded pdf file",
            "type": "string"
          }
        },
        "required": [
          "pdf"
        ]
      },
      "AddonTrackingData": {
        "type": "object",
        "properties": {
          "trackingId": {
            "description": "tracking id of the transportation service provider",
            "type": "string",
            "maxLength": 50
          },
          "trackingUrl": {
            "description": "tracking url to track delivery",
            "type": "string",
            "maxLength": 400
          },
          "serviceProvider": {
            "description": "transportation service provider",
            "type": "string",
            "maxLength": 100
          },
          "sendingDate": {
            "description": "date the sending was starting with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "arrivalDate": {
            "description": "date the delivery arrived with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "additionalData": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "maxLength": 30
                },
                "value": {
                  "type": "string",
                  "maxLength": 200
                }
              }
            }
          }
        }
      },
      "PurchasedAddon": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBase"
          }
        ],
        "type": "object",
        "properties": {
          "purchasedAddonId": {
            "description": "unique id of the purchased addon",
            "type": "integer",
            "format": "int64"
          },
          "deliveryCustomerId": {
            "description": "id of the delivery customer",
            "type": "string"
          },
          "addonType": {
            "description": "type of the addon",
            "type": "string",
            "enum": [
              "BONUS"
            ]
          },
          "plenigoAddonId": {
            "description": "plenigo addon product id",
            "type": "string",
            "minLength": 20,
            "maxLength": 20
          },
          "accessRightUniqueId": {
            "description": "unique id of the access right this order item grants access to",
            "type": "string",
            "pattern": "^[0-9\\\\-a-zA-Z]{2,30}$"
          },
          "orderId": {
            "description": "unique id of the order in the context of a company",
            "type": "integer",
            "format": "int64"
          },
          "orderItemPosition": {
            "description": "position of the order item inside the order - creates a unique order item id in combination with the orderId",
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "description": "status of the purchased addon",
            "type": "string",
            "enum": [
              "CANCELLED",
              "DELIVERED",
              "IN_DELIVERY",
              "OPEN",
              "CONDITIONS_FULFILLED",
              "READY_FOR_DELIVERY"
            ]
          },
          "deliveryCondition": {
            "description": "delivery condition of the purchased addon",
            "type": "string",
            "enum": [
              "AFTER_PAYMENT",
              "IMMEDIATELY"
            ]
          },
          "deliveryDate": {
            "description": "date the delivery was done with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "trackingData": {
            "$ref": "#/components/schemas/AddonTrackingData"
          }
        },
        "required": [
          "purchasedAddonId",
          "deliveryCustomerId",
          "addonType",
          "plenigoAddonId",
          "accessRightUniqueId",
          "orderId",
          "orderItemPosition",
          "status",
          "deliveryCondition"
        ]
      },
      "PurchasedAddons": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PurchasedAddon"
            }
          }
        }
      },
      "UpdateAddonTrackingData": {
        "type": "object",
        "properties": {
          "status": {
            "description": "delivery status of the purchased addon",
            "type": "string",
            "enum": [
              "CANCELLED",
              "DELIVERED",
              "IN_DELIVERY",
              "OPEN",
              "CONDITIONS_FULFILLED",
              "READY_FOR_DELIVERY"
            ]
          },
          "trackingData": {
            "$ref": "#/components/schemas/AddonTrackingData"
          }
        },
        "required": [
          "status"
        ]
      },
      "CrossClientTransaction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBase"
          }
        ],
        "type": "object",
        "properties": {
          "crossClientTransactionId": {
            "description": "unique id of the cross client transaction",
            "type": "integer",
            "format": "int64"
          },
          "sourceCompanyId": {
            "description": "source company id",
            "type": "string",
            "maxLength": 20
          },
          "connectedCompanyId": {
            "description": "connected company id",
            "type": "string",
            "maxLength": 20
          },
          "orderId": {
            "description": "unique id of the order in the context of a company",
            "type": "integer",
            "format": "int64"
          },
          "subscriptionId": {
            "description": "unique id of the subscription in the context of a company",
            "type": "integer",
            "format": "int64"
          },
          "invoiceId": {
            "description": "unique id of the invoice in the context of a company",
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "description": "type of the transaction",
            "type": "string",
            "enum": [
              "LOSS",
              "REFUND",
              "PAYMENT"
            ]
          },
          "paidStatus": {
            "description": "paid status update",
            "type": "string",
            "enum": [
              "OPEN",
              "PAID"
            ]
          },
          "paymentMethod": {
            "description": "payment method used to pay for the order (ZERO indicates a free subscription)",
            "type": "string",
            "enum": [
              "AMAZON_PAY",
              "APPLE_PAY",
              "BANK_ACCOUNT",
              "BILLING",
              "CREDIT_CARD",
              "GOOGLE_PAY",
              "IDEAL",
              "PAYPAL",
              "POSTFINANCE",
              "SOFORT",
              "TWINT",
              "ZERO"
            ]
          },
          "amount": {
            "description": "amount to pay",
            "type": "number",
            "format": "double"
          },
          "currency": {
            "description": "currency of the order formatted as <a href=\"https://en.wikipedia.org/wiki/ISO_4217\" target=\"_blank\">ISO 4217, alphabetic code</a>",
            "type": "string",
            "minLength": 3,
            "maxLength": 3
          }
        }
      },
      "CrossClientTransactions": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CrossClientTransaction"
            }
          }
        }
      },
      "CrossClientTransactionPaidStatusUpdate": {
        "type": "object",
        "properties": {
          "paidStatus": {
            "description": "paid status update",
            "type": "string",
            "enum": [
              "OPEN",
              "PAID"
            ]
          }
        }
      },
      "AmazonPayAccountChange": {
        "type": "object",
        "properties": {
          "chargePermissionId": {
            "description": "the amazon pay charge permission id",
            "type": "string",
            "maxLength": 50
          },
          "preferred": {
            "description": "flag indicating if amazon pay account is the preferred amazon pay account - only one amazon pay account can be preferred.",
            "type": "boolean"
          },
          "invalid": {
            "description": "flag indicating if payment method should be handled as invalid",
            "type": "boolean"
          }
        },
        "required": [
          "chargePermissionId"
        ]
      },
      "schemas-AmazonPayAccount": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AmazonPayAccountChange"
          },
          {
            "$ref": "#/components/schemas/ApiBase"
          }
        ],
        "type": "object",
        "properties": {
          "amazonPayAccountId": {
            "description": "unique id of the amazon pay account",
            "type": "integer",
            "format": "int64"
          },
          "customerId": {
            "description": "unique id of the customer the amazon pay account belongs to",
            "type": "string",
            "pattern": "^[0-9]{1,18}$"
          },
          "active": {
            "description": "flag indicating if amazon pay account is active - a amazon pay account can become inactive by getting closed, etc.",
            "type": "boolean"
          }
        },
        "required": [
          "amazonPayAccountId",
          "customerId",
          "chargePermissionId",
          "changedDate"
        ]
      },
      "AmazonPayAccounts": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/schemas-AmazonPayAccount"
            }
          }
        }
      },
      "AmazonPayAccountCreation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AmazonPayAccountChange"
          }
        ],
        "type": "object",
        "properties": {
          "customerId": {
            "description": "unique id of the customer the amazon pay account belongs to",
            "type": "string",
            "pattern": "^[0-9]{1,18}$"
          },
          "createdAt": {
            "description": "date time the amazon pay account entity was created with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "updatedAt": {
            "description": "date time the amazon pay account entity was changed with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          }
        },
        "required": [
          "customerId",
          "chargePermissionId"
        ]
      },
      "PostFinanceAccountChange": {
        "type": "object",
        "properties": {
          "chargePermissionId": {
            "description": "the PostFinance charge permission id",
            "type": "string",
            "maxLength": 50
          },
          "preferred": {
            "description": "flag indicating if PostFinance account is the preferred PostFinance account - only one PostFinance account can be preferred.",
            "type": "boolean"
          },
          "invalid": {
            "description": "flag indicating if payment method should be handled as invalid",
            "type": "boolean"
          }
        },
        "required": [
          "chargePermissionId"
        ]
      },
      "PostFinanceAccount": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PostFinanceAccountChange"
          },
          {
            "$ref": "#/components/schemas/ApiBase"
          }
        ],
        "type": "object",
        "properties": {
          "postFinanceAccountId": {
            "description": "unique id of the PostFinance account",
            "type": "integer",
            "format": "int64"
          },
          "customerId": {
            "description": "unique id of the customer the PostFinance account belongs to",
            "type": "string",
            "pattern": "^[0-9]{1,18}$"
          },
          "active": {
            "description": "flag indicating if PostFinance account is active - a PostFinance account can become inactive by getting closed, etc.",
            "type": "boolean"
          }
        },
        "required": [
          "postFinanceAccountId",
          "customerId",
          "chargePermissionId"
        ]
      },
      "PostFinanceAccounts": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PostFinanceAccount"
            }
          }
        }
      },
      "PostFinanceAccountCreation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PostFinanceAccountChange"
          }
        ],
        "type": "object",
        "properties": {
          "customerId": {
            "description": "unique id of the customer the PostFinance account belongs to",
            "type": "string",
            "pattern": "^[0-9]{1,18}$"
          },
          "createdAt": {
            "description": "date time the PostFinance account entity was created with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "updatedAt": {
            "description": "date time the PostFinance account entity was changed with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          }
        },
        "required": [
          "customerId",
          "chargePermissionId"
        ]
      },
      "TwintAccountChange": {
        "type": "object",
        "properties": {
          "chargePermissionId": {
            "description": "the Twint charge permission id",
            "type": "string",
            "maxLength": 50
          },
          "preferred": {
            "description": "flag indicating if Twint account is the preferred Twint account - only one Twint account can be preferred.",
            "type": "boolean"
          },
          "invalid": {
            "description": "flag indicating if payment method should be handled as invalid",
            "type": "boolean"
          }
        },
        "required": [
          "chargePermissionId"
        ]
      },
      "TwintAccount": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TwintAccountChange"
          },
          {
            "$ref": "#/components/schemas/ApiBase"
          }
        ],
        "type": "object",
        "properties": {
          "twintAccountId": {
            "description": "unique id of the Twint account",
            "type": "integer",
            "format": "int64"
          },
          "customerId": {
            "description": "unique id of the customer the Twint account belongs to",
            "type": "string",
            "pattern": "^[0-9]{1,18}$"
          },
          "active": {
            "description": "flag indicating if Twint account is active - a Twint account can become inactive by getting closed, etc.",
            "type": "boolean"
          }
        },
        "required": [
          "twintAccountId",
          "customerId",
          "chargePermissionId"
        ]
      },
      "TwintAccounts": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TwintAccount"
            }
          }
        }
      },
      "TwintAccountCreation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TwintAccountChange"
          }
        ],
        "type": "object",
        "properties": {
          "customerId": {
            "description": "unique id of the customer the Twint account belongs to",
            "type": "string",
            "pattern": "^[0-9]{1,18}$"
          },
          "createdAt": {
            "description": "date time the Twint account entity was created with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "updatedAt": {
            "description": "date time the Twint account entity was changed with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          }
        },
        "required": [
          "customerId",
          "chargePermissionId"
        ]
      },
      "ProcessDesigns": {
        "type": "object",
        "properties": {
          "checkoutLogo": {
            "description": "logo to show in the iframe",
            "type": "string",
            "maxLength": 200
          },
          "backgroundColor": {
            "description": "background color for the iframe",
            "type": "string",
            "maxLength": 10
          },
          "firstColor": {
            "description": "first color for the iframe",
            "type": "string",
            "maxLength": 10
          },
          "secondColor": {
            "description": "second color for the iframe",
            "type": "string",
            "maxLength": 10
          },
          "font": {
            "description": "font for the iframe",
            "type": "string",
            "maxLength": 20
          },
          "fontColor": {
            "description": "font color for the iframe",
            "type": "string",
            "maxLength": 10
          },
          "linkColor": {
            "description": "link color for the iframe",
            "type": "string",
            "maxLength": 10
          },
          "checkoutCss": {
            "description": "checkout css for the iframe",
            "type": "string",
            "maxLength": 100000
          },
          "checkoutJavaScript": {
            "description": "checkout JavaScript for the iframe",
            "type": "string",
            "maxLength": 100000
          }
        }
      },
      "GoogleSsoSettings": {
        "type": "object",
        "properties": {
          "active": {
            "description": "flag indicating if the google SSO provider is active",
            "type": "boolean"
          },
          "googleClientId": {
            "description": "the google client id to use",
            "type": "string",
            "maxLength": 200
          }
        },
        "required": [
          "active",
          "googleClientId"
        ]
      },
      "SsoProviderSettings": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBase"
          }
        ],
        "type": "object",
        "properties": {
          "active": {
            "description": "flag indicating if the SSO providers are active",
            "type": "boolean"
          },
          "googleSettings": {
            "description": "google SSO settings",
            "type": "object",
            "$ref": "#/components/schemas/GoogleSsoSettings"
          }
        },
        "required": [
          "active"
        ]
      },
      "ProcessSettings": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBase"
          }
        ],
        "type": "object",
        "properties": {
          "tokenType": {
            "description": "type of verification token",
            "type": "string",
            "enum": [
              "EMAIL",
              "SMS"
            ]
          },
          "tokenSmsCountries": {
            "description": "if SMS is selected for verification token it can be restricted to specific countries",
            "type": "array",
            "items": {
              "description": "country code formatted as <a href=\"https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\" target=\"_blank\">ISO 3166-1 alpha-2</a>",
              "type": "string",
              "minLength": 2,
              "maxLength": 2
            }
          },
          "allowedDomains": {
            "description": "comma separated list of domains to be allowed for including the iframe",
            "type": "string",
            "maxLength": 1000
          },
          "ssoName": {
            "description": "indicating if first and last name are required, optional or not needed at all",
            "type": "string",
            "enum": [
              "REQUIRED",
              "OPTIONAL",
              "NONE",
              "REGISTRATION_REQUIRED",
              "REGISTRATION_OPTIONAL",
              "REGISTRATION_OPTIONAL_LOGIN_REQUIRED",
              "REGISTRATION_REQUIRED_LOGIN_OPTIONAL",
              "LOGIN_REQUIRED",
              "LOGIN_OPTIONAL"
            ]
          },
          "ssoRecheckTerms": {
            "description": "flag indicating if terms should be recheck during login",
            "type": "boolean"
          },
          "ssoOptIn": {
            "description": "flag indicating if opt in should be requested during registration",
            "type": "boolean"
          },
          "checkoutOptIn": {
            "description": "flag indicating if opt in should be requested during checkout",
            "type": "boolean"
          },
          "invoiceAddressRequired": {
            "description": "flag indicating if invoice address should be requested during checkout",
            "type": "boolean"
          },
          "deliveryAddressRequired": {
            "description": "flag indicating if delivery address should be requested during checkout",
            "type": "boolean"
          },
          "overrideForceUsername": {
            "description": "flag indicating if username required is determined by the sub company",
            "type": "boolean"
          },
          "forceUsername": {
            "description": "flag indicating if username is required",
            "type": "boolean"
          },
          "maxSessions": {
            "description": "maximum allowed parallel sessions for a customer",
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 100
          },
          "additionalCheckoutText": {
            "description": "additional text to show during checkout",
            "type": "string",
            "maxLength": 2000
          },
          "contractorText": {
            "description": "contractor to show during checkout",
            "type": "string",
            "maxLength": 2000
          },
          "ssoOptInText": {
            "description": "opt in text to show during SSO",
            "type": "string",
            "maxLength": 2000
          },
          "checkoutOptInText": {
            "description": "opt in text to show during checkout",
            "type": "string",
            "maxLength": 2000
          },
          "ssoTermText": {
            "description": "term text to show during SSO",
            "type": "string",
            "maxLength": 2000
          },
          "checkoutTermText": {
            "description": "term text to show during checkout",
            "type": "string",
            "maxLength": 2000
          },
          "emergencyMode": {
            "description": "indication if emergency mode is active",
            "type": "string",
            "enum": [
              "NONE",
              "CONTRACT_COMPANY_MODE",
              "PLENIGO_MODE"
            ]
          },
          "disableSsoFunctionality": {
            "description": "flag indicating if sso functionality is disabled",
            "type": "boolean"
          },
          "ssoProviders": {
            "type": "object",
            "$ref": "#/components/schemas/SsoProviderSettings"
          }
        }
      },
      "ProcessData": {
        "type": "object",
        "properties": {
          "designs": {
            "type": "object",
            "$ref": "#/components/schemas/ProcessDesigns"
          },
          "settings": {
            "type": "object",
            "$ref": "#/components/schemas/ProcessSettings"
          }
        }
      },
      "CustomerRegistrationCreation": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "maxLength": 100,
            "description": "username of the new customer"
          },
          "email": {
            "type": "string",
            "maxLength": 100,
            "description": "email of the new customer"
          },
          "password": {
            "type": "string",
            "maxLength": 100,
            "description": "password of the new customer"
          },
          "language": {
            "type": "string",
            "maxLength": 2,
            "description": "language of the new customer"
          },
          "mobileNumber": {
            "type": "string",
            "maxLength": 100,
            "description": "mobile number of the new customer"
          },
          "ipAddress": {
            "type": "string",
            "maxLength": 100,
            "description": "IP address of the new customer"
          },
          "customerNotification": {
            "type": "boolean",
            "description": "flag indicating if a mail or SMS should be send to the customer."
          },
          "firstName": {
            "type": "string",
            "maxLength": 100,
            "description": "first name of the new customer"
          },
          "lastName": {
            "type": "string",
            "maxLength": 100,
            "description": "last name of the new customer"
          },
          "verificationUrl": {
            "description": "url to verify registration - if provided two parameters are added to the url (token and step) and it is passed to the registration mail.\nThis way the application that embeds the plenigo registration from can handle a user verification via link instead of a token process.\n",
            "type": "string",
            "maxLength": 500
          },
          "invoiceAddress": {
            "type": "object",
            "$ref": "#/components/schemas/AddressChange"
          },
          "deliveryAddress": {
            "type": "object",
            "$ref": "#/components/schemas/AddressChange"
          }
        },
        "required": [
          "email",
          "language",
          "password"
        ]
      },
      "StepToken": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "The token to validate the step."
          }
        },
        "required": [
          "token"
        ]
      },
      "NextStep": {
        "allOf": [
          {
            "$ref": "#/components/schemas/StepToken"
          }
        ],
        "type": "object",
        "properties": {
          "companyId": {
            "type": "string",
            "maxLength": 20,
            "description": "Id of the company the process is running for."
          },
          "nextStep": {
            "type": "string",
            "enum": [
              "ADDITIONAL_DATA",
              "RESET_PASSWORD",
              "TWO_FACTOR"
            ],
            "description": "The next step the process should go to."
          },
          "twoFactorBarCodeImage": {
            "type": "string",
            "description": "base64 encoded bar code image to show to the user if step is two factor verification"
          },
          "verificationToken": {
            "type": "string",
            "description": "verification token sent to user via email if next step requires a verification"
          },
          "additionalInformation": {
            "type": "object",
            "description": "additional information depending on the next step"
          }
        },
        "required": [
          "companyId"
        ]
      },
      "LoggingData": {
        "type": "object",
        "properties": {
          "os": {
            "description": "operating system session was created on",
            "type": "string",
            "maxLength": 100
          },
          "browser": {
            "description": "browser session was created in",
            "type": "string",
            "maxLength": 200
          },
          "source": {
            "description": "source domain or app name",
            "type": "string",
            "maxLength": 200
          },
          "sourceUrl": {
            "description": "source url",
            "type": "string",
            "maxLength": 2000
          },
          "ipAddress": {
            "description": "ip address",
            "type": "string",
            "maxLength": 45
          },
          "country": {
            "description": "country code formatted as <a href=\"https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\" target=\"_blank\">ISO 3166-1 alpha-2</a>",
            "type": "string",
            "maxLength": 2
          }
        }
      },
      "RegistrationVerification": {
        "allOf": [
          {
            "$ref": "#/components/schemas/StepToken"
          },
          {
            "$ref": "#/components/schemas/LoggingData"
          }
        ],
        "type": "object",
        "properties": {
          "verificationToken": {
            "type": "string",
            "maxLength": 6,
            "description": "token to verify registration"
          }
        },
        "required": [
          "verificationToken"
        ]
      },
      "CustomerSessionToken": {
        "type": "object",
        "properties": {
          "customerSession": {
            "description": "customer session string to be provided for all functionality that needs an active customer session - the string size can be very long so don't\nset any length restrictions if saved within a database or something similar\n",
            "type": "string"
          }
        }
      },
      "CustomerLoginIdentifierRegistration": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "maxLength": 100,
            "description": "username of the new customer"
          },
          "email": {
            "type": "string",
            "maxLength": 100,
            "description": "email of the new customer"
          },
          "password": {
            "type": "string",
            "maxLength": 100,
            "description": "password of the new customer"
          },
          "language": {
            "type": "string",
            "maxLength": 2,
            "description": "language of the new customer"
          },
          "mobileNumber": {
            "type": "string",
            "maxLength": 100,
            "description": "mobile number of the new customer"
          },
          "ipAddress": {
            "type": "string",
            "maxLength": 100,
            "description": "IP address of the new customer"
          },
          "customerNotification": {
            "type": "boolean",
            "description": "flag indicating if a mail or SMS should be send to the customer"
          },
          "firstName": {
            "type": "string",
            "maxLength": 100,
            "description": "first name of the new customer"
          },
          "lastName": {
            "type": "string",
            "maxLength": 100,
            "description": "last name of the new customer"
          },
          "invoiceAddress": {
            "type": "object",
            "$ref": "#/components/schemas/AddressChange"
          },
          "deliveryAddress": {
            "type": "object",
            "$ref": "#/components/schemas/AddressChange"
          },
          "customerId": {
            "description": "customer id of the existing customer",
            "type": "string",
            "pattern": "^[0-9]{1,18}$"
          },
          "subscriptionId": {
            "description": "subscription id of the existing subscription - if also a customer id is provided the customer id must match the invoice customer\nid of the subscription\n",
            "type": "integer",
            "format": "int64"
          },
          "postcode": {
            "description": "postcode of a customer's address - if multiple address information are requested all must belong to one address",
            "type": "string",
            "maxLength": 100
          },
          "street": {
            "description": "street of a customer's address - if multiple address information are requested all must belong to one address",
            "type": "string",
            "maxLength": 100
          },
          "streetNumber": {
            "description": "street number of a customer's address - if multiple address information are requested all must belong to one address",
            "type": "string",
            "maxLength": 100
          },
          "city": {
            "description": "city of a customer's address - if multiple address information are requested all must belong to one address",
            "type": "string",
            "maxLength": 100
          }
        }
      },
      "CustomerPasswordAuthentication": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LoggingData"
          }
        ],
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "maxLength": 100,
            "description": "username of the customer"
          },
          "email": {
            "type": "string",
            "maxLength": 100,
            "description": "email of the customer"
          },
          "password": {
            "type": "string",
            "maxLength": 100,
            "description": "password of the customer"
          }
        },
        "required": [
          "password"
        ]
      },
      "SessionInformation": {
        "type": "object",
        "properties": {
          "sessionId": {
            "description": "unique id of the session",
            "type": "string",
            "maxLength": 40
          },
          "os": {
            "description": "operating system session was created on",
            "type": "string",
            "maxLength": 100
          },
          "browser": {
            "description": "browser session was created in",
            "type": "string",
            "maxLength": 200
          },
          "createdAt": {
            "description": "creation date of the session with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          }
        }
      },
      "ActiveSessions": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SessionInformation"
            }
          }
        }
      },
      "SessionLimitReached": {
        "type": "object",
        "properties": {
          "activeSessions": {
            "$ref": "#/components/schemas/ActiveSessions"
          },
          "removalToken": {
            "description": "temporary session for removing active session",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          }
        }
      },
      "CustomerTwoFactorAuthentication": {
        "allOf": [
          {
            "$ref": "#/components/schemas/StepToken"
          },
          {
            "$ref": "#/components/schemas/LoggingData"
          }
        ],
        "type": "object",
        "properties": {
          "twoFactorToken": {
            "type": "string",
            "maxLength": 6,
            "description": "two factor token to verify login"
          }
        },
        "required": [
          "twoFactorToken"
        ]
      },
      "CustomerResetPassword": {
        "allOf": [
          {
            "$ref": "#/components/schemas/StepToken"
          },
          {
            "$ref": "#/components/schemas/LoggingData"
          }
        ],
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "maxLength": 100,
            "description": "new password of the customer"
          }
        },
        "required": [
          "password"
        ]
      },
      "GoogleSsoAuthentication": {
        "type": "object",
        "properties": {
          "idToken": {
            "type": "string",
            "maxLength": 4000,
            "description": "id token of the google user to login"
          }
        },
        "required": [
          "idToken"
        ]
      },
      "CustomerGoogleSsoAuthentication": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LoggingData"
          }
        ],
        "type": "object",
        "properties": {
          "language": {
            "type": "string",
            "maxLength": 2,
            "description": "language of the customer"
          },
          "ssoProvider": {
            "type": "string",
            "enum": [
              "GOOGLE"
            ],
            "description": "sso provider name"
          },
          "authenticationData": {
            "$ref": "#/components/schemas/GoogleSsoAuthentication"
          }
        },
        "required": [
          "ssoProvider",
          "authenticationData"
        ]
      },
      "CustomerPasswordForgotten": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LoggingData"
          }
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "maxLength": 100,
            "description": "email of the customer - required if username is not provided"
          },
          "username": {
            "type": "string",
            "maxLength": 100,
            "description": "username of the customer - required if email is not provided"
          },
          "language": {
            "type": "string",
            "maxLength": 2,
            "description": "language of the customer"
          },
          "verificationUrl": {
            "description": "url to verify registration - if provided two parameters are added to the url (token and step) and it is passed to the registration mail.\nThis way the application that embeds the plenigo registration from can handle a user verification via link instead of a token process.\n",
            "type": "string",
            "maxLength": 500
          }
        },
        "required": [
          "language"
        ]
      },
      "CustomerPasswordForgottenResend": {
        "allOf": [
          {
            "$ref": "#/components/schemas/StepToken"
          },
          {
            "$ref": "#/components/schemas/LoggingData"
          }
        ],
        "type": "object"
      },
      "CustomerPasswordForgottenToken": {
        "allOf": [
          {
            "$ref": "#/components/schemas/StepToken"
          }
        ],
        "type": "object",
        "properties": {
          "verificationToken": {
            "type": "string",
            "maxLength": 6,
            "description": "email verification token"
          }
        },
        "required": [
          "verificationToken"
        ]
      },
      "CustomerPasswordForgottenReset": {
        "allOf": [
          {
            "$ref": "#/components/schemas/StepToken"
          },
          {
            "$ref": "#/components/schemas/LoggingData"
          }
        ],
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "maxLength": 100,
            "description": "new password of the customer"
          }
        },
        "required": [
          "password"
        ]
      },
      "CustomerPasswordForgottenTwoFactor": {
        "allOf": [
          {
            "$ref": "#/components/schemas/StepToken"
          }
        ],
        "type": "object",
        "properties": {
          "twoFactorToken": {
            "type": "string",
            "maxLength": 6,
            "description": "two factor token to verify the customer"
          }
        },
        "required": [
          "twoFactorToken"
        ]
      },
      "CustomerData": {
        "type": "object",
        "properties": {
          "stepToken": {
            "type": "object",
            "$ref": "#/components/schemas/StepToken"
          },
          "username": {
            "type": "string",
            "maxLength": 100,
            "description": "username of the new customer"
          },
          "firstName": {
            "type": "string",
            "maxLength": 100,
            "description": "first name of the new customer"
          },
          "lastName": {
            "type": "string",
            "maxLength": 100,
            "description": "last name of the new customer"
          },
          "loggingData": {
            "type": "object",
            "$ref": "#/components/schemas/LoggingData"
          }
        }
      },
      "ProductAccessRightCreation": {
        "type": "object",
        "properties": {
          "title": {
            "description": "title of the access right",
            "type": "string",
            "maximum": 100
          },
          "uniqueId": {
            "description": "unique id of the access right within in the company",
            "type": "string",
            "pattern": "^[0-9\\\\-a-zA-Z]{2,30}$"
          },
          "description": {
            "description": "internal description of the access right",
            "type": "string",
            "maximum": 2000
          },
          "additionalData": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "maxLength": 30
                },
                "value": {
                  "type": "string",
                  "maxLength": 200
                }
              }
            }
          }
        },
        "required": [
          "title",
          "uniqueId"
        ]
      },
      "ProductAccessRight": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ProductAccessRightCreation"
          },
          {
            "$ref": "#/components/schemas/ApiBase"
          }
        ],
        "type": "object",
        "properties": {
          "accessRightId": {
            "description": "unique id of the access right within a contract company",
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "accessRightId"
        ]
      },
      "ProductAccessRights": {
        "type": "object",
        "properties": {
          "items": {
            "description": "product access rights",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductAccessRight"
            }
          }
        }
      },
      "RuleTranslation": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBaseDate"
          }
        ],
        "properties": {
          "language": {
            "description": "two letter language code according to <a href=\"https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes\" target=\"_blank\">ISO 639-1</a> - every language code can only be used once per translation",
            "type": "string",
            "minLength": 2,
            "maxLength": 2
          },
          "title": {
            "description": "translated title",
            "type": "string",
            "maxLength": 100
          },
          "preDescription": {
            "description": "text to show to the customer before rule starts",
            "type": "string",
            "maxLength": 5000
          },
          "successDescription": {
            "description": "text to show to the customer if rule was successful",
            "type": "string",
            "maxLength": 5000
          },
          "failureDescription": {
            "description": "text to show to the customer if rule failed",
            "type": "string",
            "maxLength": 5000
          },
          "preferred": {
            "description": "flag indicating if language is default fallback language if no suitable language is found",
            "type": "boolean"
          }
        },
        "required": [
          "language",
          "title"
        ]
      },
      "AgeRuleCreation": {
        "type": "object",
        "properties": {
          "internalTitle": {
            "description": "internal title of the age rule",
            "type": "string",
            "maxLength": 100
          },
          "description": {
            "description": "internal description of the age rule",
            "type": "string",
            "maxLength": 5000
          },
          "relationalOperator": {
            "description": "relational operator to use",
            "type": "string",
            "enum": [
              "ABOVE",
              "BELOW",
              "EQUAL"
            ]
          },
          "age": {
            "description": "age the rule relies on",
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 150
          },
          "protectedPlenigoOfferId": {
            "description": "plenigo offer id that is protected by the age rule",
            "type": "string"
          },
          "followUpPlenigoOfferId": {
            "description": "optional follow up plenigo offer id to change subscriptions to if age rule is no longer fulfilled",
            "type": "string"
          },
          "replacementPlenigoOfferId": {
            "description": "plenigo offer id that is used if rule is not fulfilled",
            "type": "string"
          },
          "stopOnFail": {
            "description": "flag indicating if age verification is a must have",
            "type": "boolean"
          },
          "translations": {
            "description": "translations for customer texts",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RuleTranslation"
            }
          }
        },
        "required": [
          "internalTitle",
          "relationalOperator",
          "age",
          "protectedPlenigoOfferId"
        ]
      },
      "AgeRule": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AgeRuleCreation"
          },
          {
            "$ref": "#/components/schemas/ApiBase"
          }
        ],
        "type": "object",
        "properties": {
          "ageRuleId": {
            "description": "unique id of the age rule within a contract company",
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "internalTitle",
          "relationalOperator",
          "age",
          "protectedPlenigoOfferId"
        ]
      },
      "AgeRules": {
        "type": "object",
        "properties": {
          "items": {
            "description": "age rules",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AgeRule"
            }
          }
        }
      },
      "AppStoreOfferUpdate": {
        "type": "object",
        "properties": {
          "internalTitle": {
            "description": "internal title of the app store offer",
            "type": "string",
            "maximum": 100
          },
          "description": {
            "description": "description of the app store offer",
            "type": "string",
            "maximum": 2000
          },
          "productId": {
            "description": "unique id of the product as defined by the app store in use - the kind of product is not important (subscription vs. purchase)",
            "type": "string",
            "maximum": 500
          },
          "fallback": {
            "description": "flag indicating if product should be used as fallback if no offer for a given product id can be found",
            "type": "boolean"
          },
          "accessRightId": {
            "description": "id of the access right associated with this offer",
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "internalTitle",
          "productId",
          "accessRightId"
        ]
      },
      "AppStoreOffer": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AppStoreOfferUpdate"
          },
          {
            "$ref": "#/components/schemas/ApiBase"
          }
        ],
        "type": "object",
        "properties": {
          "appStoreOfferId": {
            "description": "unique id of the app store offer within a contract company",
            "type": "integer",
            "format": "int64"
          },
          "archived": {
            "description": "flag indicating if app store offer is archived",
            "type": "boolean"
          }
        },
        "required": [
          "appStoreOfferId"
        ]
      },
      "AppStoreOffers": {
        "type": "object",
        "properties": {
          "items": {
            "description": "app store offers",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AppStoreOffer"
            }
          }
        }
      },
      "AddonTranslationImage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBaseDate"
          }
        ],
        "properties": {
          "addonTranslationImageId": {
            "description": "unique id of the image within the contract company",
            "example": 100324,
            "type": "integer"
          },
          "altText": {
            "description": "alt text of the image",
            "example": "A very nice promotion",
            "maxLength": 200,
            "type": "string"
          },
          "image": {
            "description": "image as byte array",
            "items": {
              "minimum": 0,
              "type": "integer"
            },
            "maxLength": 1048576,
            "type": "array"
          },
          "metaData": {
            "description": "additional meta data"
          },
          "name": {
            "description": "description of the image",
            "example": "Promotion image",
            "maxLength": 100,
            "type": "string"
          },
          "url": {
            "description": "url to the image",
            "example": "https://example.com/test.jpg",
            "format": "uri",
            "maxLength": 500,
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "AddonTranslation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBaseDate"
          }
        ],
        "properties": {
          "conditions": {
            "description": "condition of the addon",
            "example": "You have to be a customer for at least three days.",
            "maxLength": 5000,
            "type": "string"
          },
          "description": {
            "description": "description of the addon",
            "example": "A modern high quality teacup.",
            "maxLength": 5000,
            "type": "string"
          },
          "images": {
            "description": "images that belong to the translation",
            "items": {
              "$ref": "#/components/schemas/AddonTranslationImage"
            },
            "type": "array"
          },
          "language": {
            "description": "language code formatted two letter language code according to <a href=\"https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes\" target=\"_blank\">ISO 639-1</a>",
            "example": "en",
            "pattern": "^[a-z]{2}$",
            "type": "string"
          },
          "preferred": {
            "description": "flag if the translation is the preferred translation",
            "example": true,
            "type": "boolean"
          },
          "title": {
            "description": "title of the addon",
            "example": "Teacup",
            "maxLength": 100,
            "type": "string"
          }
        },
        "required": [
          "language",
          "title"
        ],
        "type": "object"
      },
      "Bonus": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBase"
          }
        ],
        "properties": {
          "accessRightId": {
            "description": "optional access right associated with the bonus",
            "example": 223001,
            "type": "integer"
          },
          "archived": {
            "description": "flag indicating if bonus is archived",
            "example": true,
            "type": "boolean"
          },
          "availability": {
            "description": "availability of the bonus",
            "enum": [
              "AVAILABLE",
              "LIMITED",
              "SOLD_OUT",
              "WHEN_AVAILABLE"
            ],
            "example": "AVAILABLE",
            "type": "string"
          },
          "taxType": {
            "type": "string",
            "enum": [
              "ADVERTISEMENT",
              "BOOK",
              "DIGITALNEWSPAPER",
              "DIGITALOFFER",
              "DIGITALPRODUCT",
              "DONATION",
              "DOWNLOAD",
              "EBOOK",
              "EVENT",
              "FEE",
              "MAGAZINE",
              "MEMBERSHIP",
              "MUSIC",
              "NEWSPAPER",
              "PHYSICALPRODUCT",
              "VIDEO",
              "VOUCHER"
            ]
          },
          "bonusId": {
            "description": "unique id of the image within the contract company",
            "example": 123400,
            "type": "integer"
          },
          "costCenterId": {
            "description": "optional cost center associated with the bonus",
            "example": 123001,
            "type": "integer"
          },
          "deliveryAddressMandatory": {
            "description": "flag indicating if delivery address is required",
            "example": true,
            "type": "boolean"
          },
          "deliveryAmount": {
            "description": "delivery amount",
            "example": 1,
            "type": "integer"
          },
          "deliveryCondition": {
            "description": "delivery condition for the bonus",
            "enum": [
              "AFTER_PAYMENT",
              "IMMEDIATELY"
            ],
            "example": "AFTER_PAYMENT",
            "type": "string"
          },
          "description": {
            "description": "description of the bonus",
            "example": "The cheapest teacup we have in stock.",
            "maxLength": 2000,
            "type": "string"
          },
          "internalTitle": {
            "description": "internal title of the bonus",
            "example": "Teacup",
            "maxLength": 100,
            "type": "string"
          },
          "invoiceAddressMandatory": {
            "description": "flag indicating if invoice address is required",
            "example": true,
            "type": "boolean"
          },
          "plenigoBonusId": {
            "description": "plenigo bonus id to identify the bonus during checkout",
            "example": "BO_12345678901234567",
            "pattern": "^PO_[0-9a-zA-Z]{17}$",
            "type": "string"
          },
          "priceIssueId": {
            "description": "optional price issue associated with the bonus",
            "example": 323001,
            "type": "integer"
          },
          "shippingCostPriceIssueId": {
            "description": "optional shipping cost price issue associated with the bonus",
            "example": 323002,
            "type": "integer"
          },
          "receiver": {
            "description": "receiver of the bonus",
            "enum": [
              "PAYER",
              "RECIPIENT"
            ],
            "example": "PAYER",
            "type": "string"
          },
          "translations": {
            "description": "translations of the bonus",
            "items": {
              "$ref": "#/components/schemas/AddonTranslation"
            },
            "type": "array"
          }
        },
        "required": [
          "internalTitle",
          "deliveryCondition",
          "availability"
        ],
        "type": "object"
      },
      "Bonuses": {
        "type": "object",
        "properties": {
          "items": {
            "description": "list of bonuses requested",
            "items": {
              "$ref": "#/components/schemas/Bonus"
            },
            "type": "array"
          }
        }
      },
      "CreditWalletTranslation": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBaseDate"
          }
        ],
        "properties": {
          "language": {
            "description": "two letter language code according to <a href=\"https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes\" target=\"_blank\">ISO 639-1</a> - every language code can only be used once per translation",
            "type": "string",
            "minLength": 2,
            "maxLength": 2
          },
          "title": {
            "description": "translated title",
            "type": "string",
            "maxLength": 100
          },
          "description": {
            "description": "translated description",
            "type": "string",
            "maxLength": 5000
          },
          "preferred": {
            "description": "flag indicating if language is default fallback language if no suitable language is found",
            "type": "boolean"
          }
        },
        "required": [
          "language",
          "title"
        ]
      },
      "CreditWalletUpdate": {
        "type": "object",
        "properties": {
          "internalTitle": {
            "description": "internal title of the wallet",
            "type": "string",
            "maxLength": 100
          },
          "creditCountInvalidation": {
            "description": "flag indicating if credit counts will be invalidated after a time if no active subscription is associated",
            "type": "boolean"
          },
          "creditValidityTime": {
            "description": "time credits are invalidated if credit count invalidation is active",
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 36
          },
          "creditValidityTimespan": {
            "description": "time credit validity timespan",
            "type": "string",
            "enum": [
              "DAY",
              "MONTH",
              "NONE",
              "WEEK",
              "YEAR"
            ]
          },
          "eventListId": {
            "description": "id of the associated event list",
            "type": "integer",
            "format": "int64"
          },
          "translations": {
            "description": "translations associated with this customer wallet",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreditWalletTranslation"
            }
          }
        }
      },
      "CreditWalletCreation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CreditWalletUpdate"
          }
        ],
        "type": "object",
        "properties": {
          "uniqueId": {
            "description": "unique id of the wallet for identification",
            "type": "string",
            "maxLength": 50
          }
        }
      },
      "CreditWallet": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CreditWalletCreation"
          },
          {
            "$ref": "#/components/schemas/ApiBase"
          }
        ],
        "type": "object",
        "properties": {
          "creditWalletId": {
            "description": "unique id of a wallet within a contract company",
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "CreditWallets": {
        "type": "object",
        "properties": {
          "items": {
            "description": "credit wallets",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreditWallet"
            }
          }
        }
      },
      "CrossSellingTranslation": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBaseDate"
          }
        ],
        "properties": {
          "language": {
            "description": "two letter language code according to <a href=\"https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes\" target=\"_blank\">ISO 639-1</a> - every language code can only be used once per translation",
            "type": "string",
            "minLength": 2,
            "maxLength": 2
          },
          "title": {
            "description": "translated title",
            "type": "string",
            "maxLength": 100
          },
          "description": {
            "description": "translated description",
            "type": "string",
            "maxLength": 5000
          },
          "submitText": {
            "description": "text shown on submit page",
            "type": "string",
            "maxLength": 5000
          },
          "preferred": {
            "description": "flag indicating if language is default fallback language if no suitable language is found",
            "type": "boolean"
          }
        },
        "required": [
          "language",
          "title"
        ]
      },
      "ProductTagCreation": {
        "type": "object",
        "properties": {
          "name": {
            "description": "a name that is unique in combination with a category",
            "type": "string",
            "maximum": 20
          },
          "description": {
            "description": "internal description of the product tag",
            "type": "string",
            "maximum": 500
          },
          "category": {
            "description": "category that reflects the usage of the tag",
            "type": "string",
            "enum": [
              "ANALYTICS",
              "FLOW",
              "CUSTOM",
              "RULE"
            ]
          }
        },
        "required": [
          "title",
          "category"
        ]
      },
      "ProductTag": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ProductTagCreation"
          },
          {
            "$ref": "#/components/schemas/ApiBase"
          }
        ],
        "type": "object",
        "properties": {
          "productTagId": {
            "description": "unique id of the product tag within a contract company",
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "productTagId"
        ]
      },
      "CrossSelling": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBase"
          }
        ],
        "properties": {
          "crossSellingId": {
            "description": "unique id of the cross selling within a contract company",
            "type": "integer",
            "format": "int64"
          },
          "internalTitle": {
            "description": "internal title",
            "type": "string",
            "maximum": 100
          },
          "description": {
            "description": "internal description of the cross selling",
            "type": "string",
            "maximum": 2000
          },
          "accessStart": {
            "description": "indicates when the access to the new product should start",
            "type": "string",
            "enum": [
              "END_OF_TERM",
              "LAST_BOOKING",
              "NOW",
              "NOW_WITH_INVOICING",
              "NEXT_BOOKING"
            ]
          },
          "optional": {
            "description": "flag indicating if cross selling can be skipped",
            "type": "boolean"
          },
          "translations": {
            "description": "translations associated with this cross selling",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CrossSellingTranslation"
            }
          },
          "sourceProductTags": {
            "description": "tags associated as source for this cross selling",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductTag"
            }
          },
          "targetProductTags": {
            "description": "tags associated as target for this cross selling",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductTag"
            }
          }
        },
        "required": [
          "crossSellingId",
          "internalTitle",
          "translations",
          "sourceProductTags",
          "targetProductTags"
        ]
      },
      "CrossSellings": {
        "type": "object",
        "properties": {
          "items": {
            "description": "cross sellings",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CrossSelling"
            }
          }
        }
      },
      "DeliveryListChange": {
        "type": "object",
        "properties": {
          "title": {
            "description": "title of the delivery list",
            "type": "string",
            "maxLength": 100
          },
          "description": {
            "description": "description of the delivery list",
            "type": "string",
            "maxLength": 100
          },
          "fileNamePart": {
            "description": "file name part of the delivery list",
            "type": "string",
            "maxLength": 100
          },
          "checkReminderReceivers": {
            "description": "comma separated list of email receivers for reminders if not enough delivery dates are inserted",
            "type": "string",
            "maxLength": 100
          },
          "checkDateIntervalWeeks": {
            "description": "interval in weeks to inform merchant that there are not enough delivery dates",
            "type": "integer",
            "format": "int32"
          },
          "exportConfigurationId": {
            "description": "id of the export configuration that should be used with the delivery list",
            "type": "integer",
            "format": "int64"
          },
          "goodwillOfferId": {
            "description": "id of the goodwill offer that should be used with the delivery list. The offer must be a single product with a zero price issue.",
            "type": "integer",
            "format": "int64"
          },
          "enabled": {
            "description": "flag indicating if delivery list is enabled",
            "type": "boolean"
          },
          "additionalData": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "maxLength": 30
                },
                "value": {
                  "type": "string",
                  "maxLength": 200
                }
              }
            }
          }
        },
        "required": [
          "title",
          "fileNamePart"
        ]
      },
      "DeliveryList": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DeliveryListChange"
          },
          {
            "$ref": "#/components/schemas/ApiBase"
          }
        ],
        "type": "object",
        "properties": {
          "type": {
            "description": "type of the delivery list",
            "type": "string",
            "enum": [
              "ANALOG",
              "DIGITAL"
            ]
          },
          "deliveryListId": {
            "description": "id of the delivery list the delivery date belongs to",
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "DeliveryLists": {
        "type": "object",
        "properties": {
          "items": {
            "description": "delivery lists",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeliveryList"
            }
          }
        }
      },
      "DeliveryListDateTranslation": {
        "type": "object",
        "properties": {
          "language": {
            "description": "two letter language code according to <a href=\"https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes\" target=\"_blank\">ISO 639-1</a> - every language code can only be used once per translation",
            "type": "string",
            "minLength": 2,
            "maxLength": 2
          },
          "title": {
            "description": "translated title",
            "type": "string",
            "maxLength": 100
          },
          "description": {
            "description": "translated description",
            "type": "string",
            "maxLength": 5000
          },
          "preferred": {
            "description": "flag indicating if language is default fallback language if no suitable language is found",
            "type": "boolean"
          }
        },
        "required": [
          "language",
          "title"
        ]
      },
      "DeliveryListDatesCreation": {
        "type": "object",
        "properties": {
          "title": {
            "description": "title of the delivery list date",
            "type": "string",
            "maxLength": 100
          },
          "costCenter": {
            "description": "Cost center of the delivery date",
            "type": "string",
            "maxLength": 10
          },
          "purchaseNumber": {
            "description": "Purchase number to use",
            "type": "string",
            "maxLength": 20
          },
          "publishingDate": {
            "description": "date the item associated with the delivery list is published",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "deliveryDate": {
            "description": "date the delivery list should be created at with full-date notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "redeliveryDate": {
            "description": "date the redelivery list should be created at with full-date notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "additionalData": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "maxLength": 30
                },
                "value": {
                  "type": "string",
                  "maxLength": 200
                }
              }
            }
          },
          "translations": {
            "description": "translations for the end user",
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DeliveryListDateTranslation"
              }
            }
          }
        },
        "required": [
          "title",
          "publishingDate"
        ]
      },
      "DeliveryListDatesChange": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DeliveryListDatesCreation"
          }
        ],
        "type": "object",
        "properties": {
          "deliveryListDateId": {
            "description": "id of the delivery date",
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "DeliveryListDates": {
        "type": "object",
        "properties": {
          "items": {
            "description": "delivery dates",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeliveryListDatesChange"
            }
          }
        }
      },
      "DeliveryListDateStatusUpdate": {
        "type": "object",
        "properties": {
          "status": {
            "description": "status of a delivery list date",
            "type": "string",
            "enum": [
              "AVAILABLE",
              "SOLD_OUT"
            ]
          }
        },
        "required": [
          "status"
        ]
      },
      "DeliveryListDate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DeliveryListDatesChange"
          },
          {
            "$ref": "#/components/schemas/ApiBase"
          }
        ],
        "type": "object",
        "properties": {
          "deliveryListCreatedAt": {
            "description": "creation date of the delivery list with full-date notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "redeliveryListCreatedAt": {
            "description": "creation date of the redelivery list with full-date notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          }
        },
        "required": [
          "deliveryListDateId"
        ]
      },
      "ProductAnalogIvwRule": {
        "type": "object",
        "properties": {
          "ivwType": {
            "description": "the ivw type which should be used for this rule",
            "type": "string",
            "enum": [
              "ABONNEMENT",
              "STUDENTENABONNEMENT",
              "EINZELVERKAUF"
            ]
          },
          "ivwPriceType": {
            "description": "the ivw price type which should be used for this rule",
            "type": "string",
            "enum": [
              "PERIOD_BASED",
              "ISSUE_BASED"
            ]
          },
          "fullPriceDivergenceUp": {
            "description": "the divergence up to the price to be the specified ivw type",
            "type": "number",
            "format": "double",
            "minimum": 0,
            "maximum": 100
          },
          "fullPriceDivergenceDown": {
            "description": "the divergence down to the price to be the specified ivw type",
            "type": "number",
            "format": "double",
            "minimum": 0,
            "maximum": 100
          },
          "fullPriceIssueId": {
            "description": "id of the price issue associated with this ivw rule",
            "type": "integer",
            "format": "int64"
          },
          "otherSalePriceDivergenceDown": {
            "description": "the divergence down to the price to be the specified ivw type",
            "type": "number",
            "format": "double",
            "minimum": 0,
            "maximum": 100
          },
          "otherSalePriceIssueId": {
            "description": "id of the price issue associated with this ivw rule",
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "ivwType",
          "ivwPriceType",
          "fullPriceDivergenceUp",
          "fullPriceDivergenceDown",
          "fullPriceIssueId",
          "otherSalePriceDivergenceDown",
          "otherSalePriceIssueId"
        ]
      },
      "ProductDigitalIvwRule": {
        "type": "object",
        "properties": {
          "priceCorridor": {
            "description": "the ivw price corridors which should be used for this rule, starting with the lowest value.",
            "type": "object",
            "properties": {
              "key": {
                "type": "string",
                "format": "date",
                "description": "date the price corridor is valid from in full-date notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21"
              },
              "value": {
                "type": "array",
                "items": {
                  "type": "number",
                  "format": "double",
                  "minItems": 2
                }
              }
            }
          }
        },
        "required": [
          "priceCorridor"
        ]
      },
      "ProductIvwRuleCreation": {
        "type": "object",
        "properties": {
          "title": {
            "description": "title of the ivw rule",
            "type": "string",
            "maximum": 100
          },
          "internalTitle": {
            "description": "internal title of the ivw rule",
            "type": "string",
            "maximum": 100
          },
          "description": {
            "description": "Internal description of the ivw rule",
            "type": "string",
            "maximum": 2000
          },
          "type": {
            "description": "the type for this rule",
            "type": "string",
            "enum": [
              "ANALOG",
              "DIGITAL"
            ]
          },
          "rule": {
            "description": "the object depends on the type of this rule.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ProductAnalogIvwRule"
              },
              {
                "$ref": "#/components/schemas/ProductDigitalIvwRule"
              }
            ]
          },
          "ivwType": {
            "deprecated": true,
            "description": "the ivw type which should be used for this rule",
            "type": "string",
            "enum": [
              "ABONNEMENT",
              "STUDENTENABONNEMENT",
              "EINZELVERKAUF"
            ]
          },
          "ivwPriceType": {
            "deprecated": true,
            "description": "the ivw price type which should be used for this rule",
            "type": "string",
            "enum": [
              "PERIOD_BASED",
              "ISSUE_BASED"
            ]
          },
          "fullPriceDivergenceUp": {
            "deprecated": true,
            "description": "the divergence up to the price to be the specified ivw type",
            "type": "number",
            "format": "double",
            "minimum": 0,
            "maximum": 100
          },
          "fullPriceDivergenceDown": {
            "deprecated": true,
            "description": "the divergence down to the price to be the specified ivw type",
            "type": "number",
            "format": "double",
            "minimum": 0,
            "maximum": 100
          },
          "fullPriceIssueId": {
            "deprecated": true,
            "description": "id of the price issue associated with this ivw rule",
            "type": "integer",
            "format": "int64"
          },
          "otherSalePriceDivergenceDown": {
            "deprecated": true,
            "description": "the divergence down to the price to be the specified ivw type",
            "type": "number",
            "format": "double",
            "minimum": 0,
            "maximum": 100
          },
          "otherSalePriceIssueId": {
            "deprecated": true,
            "description": "id of the price issue associated with this ivw rule",
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "title",
          "internalTitle",
          "type",
          "rule"
        ]
      },
      "ProductIvwRule": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ProductIvwRuleCreation"
          },
          {
            "$ref": "#/components/schemas/ApiBase"
          }
        ],
        "type": "object",
        "properties": {
          "ivwRuleId": {
            "description": "unique id of this ivw rule",
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "ivwRuleId",
          "title",
          "internalTitle",
          "type",
          "rule"
        ]
      },
      "ProductIvwRules": {
        "type": "object",
        "properties": {
          "items": {
            "description": "product ivw rules",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductIvwRule"
            }
          }
        }
      },
      "MisuseRuleTranslation": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBaseDate"
          }
        ],
        "properties": {
          "language": {
            "description": "two letter language code according to <a href=\"https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes\" target=\"_blank\">ISO 639-1</a> - every language code can only be used once per translation",
            "type": "string",
            "minLength": 2,
            "maxLength": 2
          },
          "title": {
            "description": "translated title",
            "type": "string",
            "maxLength": 100
          },
          "description": {
            "description": "translated description",
            "type": "string",
            "maxLength": 5000
          },
          "preferred": {
            "description": "flag indicating if language is default fallback language if no suitable language is found",
            "type": "boolean"
          }
        },
        "required": [
          "language",
          "title"
        ]
      },
      "ProductMisuseRuleCreation": {
        "type": "object",
        "properties": {
          "internalTitle": {
            "description": "internal title of the misuse rule",
            "type": "string",
            "maximum": 100
          },
          "description": {
            "description": "Internal description of the misuse rule",
            "type": "string",
            "maximum": 2000
          },
          "duration": {
            "description": "time duration the customer must wait to be able to buy the offer again - zero means forever",
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 100
          },
          "durationTimespan": {
            "description": "timespan that the duration is related to",
            "type": "string",
            "enum": [
              "DAY",
              "MONTH",
              "NONE",
              "WEEK",
              "YEAR"
            ]
          },
          "alternativePlenigoOfferId": {
            "description": "plenigo offer id of the offer to sell if product is already bought",
            "type": "string"
          },
          "translations": {
            "description": "translations associated with this misuse rule",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MisuseRuleTranslation"
            }
          }
        },
        "required": [
          "internalTitle",
          "alternativePlenigoOfferId"
        ]
      },
      "ProductMisuseRule": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ProductMisuseRuleCreation"
          },
          {
            "$ref": "#/components/schemas/ApiBase"
          }
        ],
        "type": "object",
        "properties": {
          "misuseRuleId": {
            "description": "unique id of the misuse rule within a contract company",
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "misuseRuleId"
        ]
      },
      "ProductMisuseRules": {
        "type": "object",
        "properties": {
          "items": {
            "description": "product misuse rules",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductMisuseRule"
            }
          }
        }
      },
      "OfferConnectionInfo": {
        "type": "object",
        "properties": {
          "companyId": {
            "description": "companyId of connected company",
            "type": "string"
          }
        },
        "required": [
          "companyId"
        ]
      },
      "OfferConnectedCompanySettings": {
        "type": "object",
        "properties": {
          "connectionInfo": {
            "description": "connected company settings",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferConnectionInfo"
            }
          }
        }
      },
      "OfferTranslationImage": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBaseDate"
          }
        ],
        "properties": {
          "imageType": {
            "description": "type of the image - there can only be one image of each type per translation",
            "type": "string",
            "enum": [
              "PRODUCT_CHECKOUT",
              "PRODUCT_PRESENTATION"
            ]
          },
          "name": {
            "description": "name of the image",
            "type": "string",
            "maxLength": 100
          },
          "url": {
            "description": "url to get image from",
            "type": "string",
            "maxLength": 500
          },
          "altText": {
            "description": "image alt text",
            "type": "string",
            "maxLength": 200
          }
        },
        "required": [
          "imageType",
          "name",
          "url"
        ]
      },
      "OfferTranslation": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBaseDate"
          }
        ],
        "properties": {
          "language": {
            "description": "two letter language code according to <a href=\"https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes\" target=\"_blank\">ISO 639-1</a> - every language code can only be used once per translation",
            "type": "string",
            "minLength": 2,
            "maxLength": 2
          },
          "title": {
            "description": "translated title",
            "type": "string",
            "maxLength": 100
          },
          "titleAdditions": {
            "description": "translated additional title information",
            "type": "string",
            "maxLength": 5000
          },
          "description": {
            "description": "translated description",
            "type": "string",
            "maxLength": 5000
          },
          "legalText": {
            "description": "translated legal text",
            "type": "string",
            "maxLength": 5000
          },
          "summaryText": {
            "description": "translated summary text",
            "type": "string",
            "maxLength": 5000
          },
          "withdrawalInstruction": {
            "description": "translated withdrawal instruction",
            "type": "string",
            "maxLength": 5000
          },
          "preferred": {
            "description": "flag indicating if language is default fallback language if no suitable language is found",
            "type": "boolean"
          },
          "images": {
            "description": "images associated with translation",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferTranslationImage"
            }
          }
        },
        "required": [
          "language",
          "title"
        ]
      },
      "OfferDooSettings": {
        "type": "object",
        "properties": {
          "enabled": {
            "description": "flag indicating if doo settings are enabled",
            "type": "boolean"
          }
        }
      },
      "OfferPartnerSettings": {
        "type": "object",
        "properties": {
          "dooSettings": {
            "$ref": "#/components/schemas/OfferDooSettings"
          }
        }
      },
      "OfferBase": {
        "type": "object",
        "properties": {
          "internalTitle": {
            "description": "internal title of the product group",
            "type": "string",
            "maxLength": 100
          },
          "pauseAble": {
            "description": "flag indicating if subscription is pause able",
            "type": "boolean"
          },
          "invoiceAddressMandatory": {
            "description": "flag indicating if invoice address must be provided by the customer",
            "type": "boolean"
          },
          "deliveryAddressMandatory": {
            "description": "flag indicating if delivery address must be provided by the customer",
            "type": "boolean"
          },
          "multiplePurchases": {
            "description": "flag indicating if offer can be bought multiple times from the same customer",
            "type": "boolean"
          },
          "misuseRuleId": {
            "description": "id of the misuse rule to apply",
            "type": "integer",
            "format": "int64"
          },
          "fixedStartDate": {
            "description": "fixed date the offer starts with",
            "type": [
              "null",
              "string"
            ],
            "format": "date"
          },
          "issuesInPast": {
            "description": "amount of issues that the user can select in the past - cannot be selected with fixed start date",
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 30
          },
          "issuesInFuture": {
            "description": "amount of issues that the user can select in the future - cannot be selected with fixed start date",
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 30
          },
          "archived": {
            "description": "flag indicating if offer is archived",
            "type": "boolean"
          },
          "allowedPaymentMethods": {
            "description": "additional constraints to the payment methods if some of the selected payment methods cannot be used for this offer - there can be no more payment methods than selected in the global payment settings section",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "AMAZON_PAY",
                "APPLE_PAY",
                "BANK_ACCOUNT",
                "BILLING",
                "CREDIT_CARD",
                "GOOGLE_PAY",
                "IDEAL",
                "PAYPAL",
                "POSTFINANCE",
                "SOFORT",
                "TWINT",
                "ZERO"
              ]
            }
          },
          "connectedCompanySettings": {
            "$ref": "#/components/schemas/OfferConnectedCompanySettings"
          },
          "leafId": {
            "description": "id of the tree leaf this offer should be associated with",
            "type": "integer",
            "format": "int64"
          },
          "externalBilling": {
            "description": "indicates if payments are handled by plenigo or an external system",
            "type": "boolean"
          },
          "customerCancellationBlocked": {
            "description": "indicates if a subscription cannot be cancelled by a customer",
            "type": "boolean"
          },
          "corporateAccountUsers": {
            "description": "count of allowed corporate account users",
            "type": "integer",
            "format": "int64"
          },
          "corporateAccountInvitationUrl": {
            "description": "corporate account invitation url",
            "type": "string"
          },
          "bonusId": {
            "description": "id of the bonus associated with this offer",
            "type": "integer",
            "format": "int64"
          },
          "selfServiceHintTmId": {
            "description": "id of the text module used as self service hint",
            "type": "integer",
            "format": "int64"
          },
          "managedBy": {
            "description": "managed by of the given offer.",
            "type": "string",
            "enum": [
              "PLENIGO",
              "EXTERNAL",
              "WBZ"
            ]
          },
          "translations": {
            "description": "translations associated with this product",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferTranslation"
            }
          },
          "pdfTemplateUsage": {
            "description": "contains the pdf template to use with this offer",
            "type": "string",
            "enum": [
              "B2B",
              "B2C",
              "EVENT_B2B",
              "EVENT_B2C"
            ]
          },
          "partnerSettings": {
            "$ref": "#/components/schemas/OfferPartnerSettings"
          }
        },
        "required": [
          "internalTitle",
          "translations"
        ]
      },
      "OfferProductBase": {
        "type": "object",
        "properties": {
          "internalTitle": {
            "description": "internal title of the product",
            "type": "string",
            "maxLength": 100
          },
          "position": {
            "description": "order position within the offer - must start with one and be in order",
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 50
          },
          "taxType": {
            "description": "tax type product is associated with",
            "type": "string",
            "enum": [
              "ADVERTISEMENT",
              "BOOK",
              "DIGITALNEWSPAPER",
              "DIGITALOFFER",
              "DIGITALPRODUCT",
              "DONATION",
              "DOWNLOAD",
              "EBOOK",
              "EVENT",
              "FEE",
              "MAGAZINE",
              "MEMBERSHIP",
              "MUSIC",
              "NEWSPAPER",
              "PHYSICALPRODUCT",
              "VIDEO",
              "VOUCHER"
            ]
          },
          "productType": {
            "description": "defines the type of product",
            "type": "string",
            "enum": [
              "CROSS_CLIENT_SUBSCRIPTION_TIME_BASED",
              "SINGLE_PRODUCT",
              "SINGLE_PRODUCT_CREDIT_BASED",
              "SUBSCRIPTION_CREDIT_BASED",
              "SUBSCRIPTION_CREDIT_TIME_BASED",
              "SUBSCRIPTION_CREDIT_TRIGGER_BASED",
              "SUBSCRIPTION_ISSUE_BASED",
              "SUBSCRIPTION_TIME_BASED",
              "SUBSCRIPTION_TIME_CREDIT_BASED",
              "VOUCHER_SALE"
            ]
          },
          "subscription": {
            "description": "flag indicating if product represents a subscription",
            "type": "boolean"
          },
          "amount": {
            "description": "amount of goods represented by this product",
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 100000
          },
          "deliveryListId": {
            "description": "id of the delivery list to use",
            "type": "integer",
            "format": "int64"
          },
          "validityTime": {
            "description": "validity time of this product in days",
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 365
          },
          "validityEndTime": {
            "description": "date the this product validity will be end",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "accessRightId": {
            "description": "id of the access right associated with this product",
            "type": "integer",
            "format": "int64"
          },
          "costCenterId": {
            "description": "id of the cost center associated with this product",
            "type": "integer",
            "format": "int64"
          },
          "ledgerId": {
            "description": "id of the ledger associated with this product",
            "type": "integer",
            "format": "int64"
          },
          "ivwRuleId": {
            "description": "id of the ivw rule associated with this product",
            "type": "integer",
            "format": "int64"
          },
          "voucherTargetPlenigoOfferId": {
            "description": "plenigo offer id of the target offer - required with product type VOUCHER_SALE",
            "type": "string"
          },
          "voucherTemplateId": {
            "description": "id of the voucher template to use - required with product type VOUCHER_SALE",
            "type": "integer",
            "format": "int64"
          },
          "voucherValidityTime": {
            "description": "validity time of the voucher based on timespan",
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 100
          },
          "voucherValidityTimespan": {
            "description": "date the this product validity will be end",
            "type": "string",
            "enum": [
              "DAY",
              "MONTH",
              "NONE",
              "WEEK",
              "YEAR"
            ]
          },
          "additionalData": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "maxLength": 30
                },
                "value": {
                  "type": "string",
                  "maxLength": 200
                }
              }
            }
          },
          "data": {
            "description": "additional data field",
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "maxLength": 200
            }
          },
          "priceIssueId": {
            "description": "id of the price issue associated with this product",
            "type": "integer",
            "format": "int64"
          },
          "shippingCostPriceIssueId": {
            "description": "id of the shipping cost price issue associated with this product",
            "type": "integer",
            "format": "int64"
          },
          "creditCountWalledId": {
            "description": "id of the credit card wallet associated with this credit count wallet",
            "type": "integer",
            "format": "int64"
          },
          "creditCount": {
            "description": "credit count added with this product",
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "maximum": 1000000000
          },
          "option": {
            "description": "flag indicating if product is an option in a basket",
            "type": "boolean"
          },
          "translations": {
            "description": "translations associated with this product",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferTranslation"
            }
          }
        },
        "required": [
          "position",
          "taxType",
          "amount",
          "accessRightId",
          "translations",
          "productType"
        ]
      },
      "OfferProductStepBase": {
        "type": "object",
        "properties": {
          "position": {
            "description": "position inside the product",
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 50
          },
          "productContractId": {
            "description": "id of the product contract associated with this step",
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "position",
          "productContractId"
        ]
      },
      "OfferProductStepCreation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/OfferProductStepBase"
          }
        ],
        "type": "object",
        "properties": {
          "translations": {
            "description": "translations associated with this product",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferTranslation"
            }
          },
          "productTagIds": {
            "description": "tags associated with this product",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "additionalProductContractIds": {
            "description": "additioanl product contract ids with this product",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "TimeBasedProductContractCondition": {
        "type": "object",
        "properties": {
          "termPeriod": {
            "description": "term time period",
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 100
          },
          "termTimespan": {
            "description": "term timespan",
            "type": "string",
            "enum": [
              "DAY",
              "MONTH",
              "NONE",
              "WEEK",
              "YEAR"
            ]
          },
          "durationPeriod": {
            "description": "duration period of the product step - can be 0 for no end time",
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 100
          },
          "durationTimespan": {
            "description": "duration timespan",
            "type": "string",
            "enum": [
              "DAY",
              "MONTH",
              "NONE",
              "WEEK",
              "YEAR"
            ]
          },
          "accountingPeriod": {
            "description": "accounting period of the product step",
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 100
          },
          "accountingTimespan": {
            "description": "accounting timespan",
            "type": "string",
            "enum": [
              "DAY",
              "MONTH",
              "NONE",
              "WEEK",
              "YEAR"
            ]
          },
          "cancellationPeriod": {
            "description": "cancellation period of the product step",
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 100
          },
          "cancellationTimespan": {
            "description": "cancellation timespan",
            "type": "string",
            "enum": [
              "DAY",
              "MONTH",
              "NONE",
              "WEEK",
              "YEAR"
            ]
          }
        }
      },
      "IssueBasedProductContractCondition": {
        "type": "object",
        "properties": {
          "deliveries": {
            "description": "amount of issues included in payment period",
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 100
          },
          "chargeableDeliveries": {
            "description": "amount of paid issues included in payment period",
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 100
          },
          "cancellationType": {
            "description": "cancellation type",
            "type": "string",
            "enum": [
              "ISSUE_BASED",
              "ISSUE_BASED_REGULAR"
            ]
          },
          "cancellationPeriod": {
            "description": "issue based cancellation period of the contract",
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 100
          },
          "cancellationPeriodTimespan": {
            "description": "issue based cancellation timespan of the contract",
            "type": "string",
            "enum": [
              "DAY",
              "MONTH",
              "NONE",
              "WEEK",
              "YEAR"
            ]
          },
          "autoRenewalDelivery": {
            "description": "flag indicating if last step of an offer should be auto renewal",
            "type": "boolean"
          }
        },
        "required": [
          "deliveries",
          "chargeableDeliveries",
          "cancellationType",
          "cancellationPeriod",
          "cancellationPeriodTimespan"
        ]
      },
      "CreditBasedProductContractCondition": {
        "type": "object",
        "properties": {
          "termPeriod": {
            "description": "term time period",
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 100
          },
          "termTimespan": {
            "description": "term timespan",
            "type": "string",
            "enum": [
              "DAY",
              "MONTH",
              "NONE",
              "WEEK",
              "YEAR"
            ]
          },
          "durationPeriod": {
            "description": "duration period of the product step - can be 0 for no end time",
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 100
          },
          "durationTimespan": {
            "description": "duration timespan",
            "type": "string",
            "enum": [
              "DAY",
              "MONTH",
              "NONE",
              "WEEK",
              "YEAR"
            ]
          },
          "accountingPeriod": {
            "description": "accounting period of the product step",
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 100
          },
          "accountingTimespan": {
            "description": "accounting timespan",
            "type": "string",
            "enum": [
              "DAY",
              "MONTH",
              "NONE",
              "WEEK",
              "YEAR"
            ]
          },
          "cancellationPeriod": {
            "description": "cancellation period of the product step",
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 100
          },
          "cancellationTimespan": {
            "description": "cancellation timespan",
            "type": "string",
            "enum": [
              "DAY",
              "MONTH",
              "NONE",
              "WEEK",
              "YEAR"
            ]
          },
          "creditCount": {
            "description": "credit count to add",
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ProductContractBase": {
        "type": "object",
        "properties": {
          "title": {
            "description": "title of the product contract",
            "type": "string",
            "maximum": 100
          },
          "leafId": {
            "description": "id of the leaf the contract is related to",
            "type": "integer",
            "format": "int64"
          },
          "description": {
            "description": "description of the product contract",
            "type": "string",
            "maximum": 2000
          },
          "contractType": {
            "description": "contract type",
            "type": "string",
            "enum": [
              "CREDIT_BASED",
              "ISSUE_BASED",
              "TIME_BASED"
            ]
          },
          "productTagIds": {
            "description": "tags associated with this product",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "ivwRuleId": {
            "description": "unique id of this ivw rule",
            "type": "integer",
            "format": "int6"
          },
          "timeBasedCondition": {
            "$ref": "#/components/schemas/TimeBasedProductContractCondition"
          },
          "issueBasedCondition": {
            "$ref": "#/components/schemas/IssueBasedProductContractCondition"
          },
          "creditBasedCondition": {
            "$ref": "#/components/schemas/CreditBasedProductContractCondition"
          }
        },
        "required": [
          "title",
          "contractType"
        ]
      },
      "ProductContractCreation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ProductContractBase"
          }
        ],
        "type": "object",
        "properties": {
          "priceIssueId": {
            "description": "price issue to use",
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "priceIssueId"
        ]
      },
      "ProductContract": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBase"
          },
          {
            "$ref": "#/components/schemas/ProductContractCreation"
          }
        ],
        "type": "object",
        "properties": {
          "productContractId": {
            "description": "unique id of the product contract within a contract company",
            "type": "integer",
            "format": "int64"
          },
          "archived": {
            "description": "flag indicating if price country segment is archived",
            "type": "boolean"
          }
        },
        "required": [
          "productContractId",
          "archived"
        ]
      },
      "OfferProductStep": {
        "allOf": [
          {
            "$ref": "#/components/schemas/OfferProductStepCreation"
          },
          {
            "$ref": "#/components/schemas/ApiBaseDate"
          }
        ],
        "type": "object",
        "properties": {
          "plenigoStepId": {
            "description": "unique id of the step within the product",
            "type": "string",
            "minLength": 20,
            "maxLength": 20
          },
          "amount": {
            "description": "amount of issues",
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 100
          },
          "chargeableAmount": {
            "description": "amount of paid issues",
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 100
          },
          "issueBasedCancellationPeriod": {
            "description": "issue based cancellation period",
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 100
          },
          "issueBasedCancellationTimespan": {
            "description": "issue based cancellation timespan",
            "type": "string",
            "enum": [
              "DAY",
              "MONTH",
              "NONE",
              "WEEK",
              "YEAR"
            ]
          },
          "regularBasedCancellationPeriod": {
            "description": "regular based cancellation period",
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 100
          },
          "regularBasedCancellationTimespan": {
            "description": "regular based cancellation timespan",
            "type": "string",
            "enum": [
              "DAY",
              "MONTH",
              "NONE",
              "WEEK",
              "YEAR"
            ]
          },
          "termPeriod": {
            "description": "term time period",
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 100
          },
          "termTimespan": {
            "description": "term timespan",
            "type": "string",
            "enum": [
              "DAY",
              "MONTH",
              "NONE",
              "WEEK",
              "YEAR"
            ]
          },
          "durationPeriod": {
            "description": "duration period of the product step - can be 0 for no end time",
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 100
          },
          "durationTimespan": {
            "description": "duration timespan",
            "type": "string",
            "enum": [
              "DAY",
              "MONTH",
              "NONE",
              "WEEK",
              "YEAR"
            ]
          },
          "accountingPeriod": {
            "description": "accounting period of the product step",
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 100
          },
          "accountingTimespan": {
            "description": "accounting timespan",
            "type": "string",
            "enum": [
              "DAY",
              "MONTH",
              "NONE",
              "WEEK",
              "YEAR"
            ]
          },
          "cancellationPeriod": {
            "description": "cancellation period of the product step",
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 100
          },
          "cancellationTimespan": {
            "description": "cancellation timespan",
            "type": "string",
            "enum": [
              "DAY",
              "MONTH",
              "NONE",
              "WEEK",
              "YEAR"
            ]
          },
          "productContractId": {
            "description": "id of the product contract associated with this step",
            "type": "integer",
            "format": "int64"
          },
          "priceIssueId": {
            "description": "id of the price issue associated with this step",
            "type": "integer",
            "format": "int64"
          },
          "ivwRuleId": {
            "description": "id of the ivw rule associated with this product step",
            "type": "integer",
            "format": "int64"
          },
          "creditCount": {
            "description": "credit count added with this step",
            "type": "integer",
            "format": "int64",
            "minimum": 0,
            "maximum": 1000000000
          },
          "productTags": {
            "description": "tags associated with this product",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductTag"
            }
          },
          "additionalProductContracts": {
            "description": "additioanl product contract ids with this product",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductContract"
            }
          }
        },
        "required": [
          "productContractId",
          "priceIssueId"
        ]
      },
      "OfferProduct": {
        "allOf": [
          {
            "$ref": "#/components/schemas/OfferProductBase"
          },
          {
            "$ref": "#/components/schemas/ApiBaseDate"
          }
        ],
        "type": "object",
        "properties": {
          "plenigoProductId": {
            "description": "unique id of the product within the offer",
            "type": "string",
            "minLength": 20,
            "maxLength": 20
          },
          "steps": {
            "description": "steps associated with this product - mandatory field for subscriptions",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferProductStep"
            }
          },
          "productTags": {
            "description": "tags associated with this product",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductTag"
            }
          }
        },
        "required": [
          "plenigoProductId"
        ]
      },
      "OfferProductGroupBase": {
        "type": "object",
        "properties": {
          "internalTitle": {
            "description": "internal title of the product group",
            "type": "string",
            "maxLength": 100
          },
          "translations": {
            "description": "translations associated with this product",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferTranslation"
            }
          }
        },
        "required": [
          "internalTitle",
          "translations"
        ]
      },
      "OfferProductGroup": {
        "allOf": [
          {
            "$ref": "#/components/schemas/OfferProductGroupBase"
          },
          {
            "$ref": "#/components/schemas/ApiBaseDate"
          }
        ],
        "type": "object",
        "properties": {
          "plenigoProductGroupId": {
            "description": "unique id of the product group within the offer",
            "type": "string",
            "minLength": 20,
            "maxLength": 20
          },
          "products": {
            "description": "products associated with this product group",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferProduct"
            }
          }
        },
        "required": [
          "plenigoProductGroupId",
          "products"
        ]
      },
      "Offer": {
        "allOf": [
          {
            "$ref": "#/components/schemas/OfferBase"
          },
          {
            "$ref": "#/components/schemas/ApiBase"
          }
        ],
        "type": "object",
        "properties": {
          "plenigoOfferId": {
            "description": "unique id of the offer within a company",
            "type": "string",
            "minLength": 20,
            "maxLength": 20
          },
          "managedExternal": {
            "description": "flag indicating if offer is managed externally",
            "type": "boolean"
          },
          "products": {
            "description": "products associated with this offer",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferProduct"
            }
          },
          "productGroups": {
            "description": "product groups associated with this offer",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferProductGroup"
            }
          },
          "productTags": {
            "description": "tags associated with this product",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductTag"
            }
          }
        },
        "required": [
          "plenigoOfferId"
        ]
      },
      "Offers": {
        "type": "object",
        "properties": {
          "items": {
            "description": "offers",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Offer"
            }
          }
        }
      },
      "PriceIssueBase": {
        "type": "object",
        "properties": {
          "title": {
            "description": "title of the price issue",
            "type": "string",
            "maximum": 100
          },
          "leafId": {
            "description": "id of the tree leaf this price issue should be associated with",
            "type": "integer",
            "format": "int64"
          },
          "description": {
            "description": "Internal description of the price issue",
            "type": "string",
            "maximum": 2000
          }
        },
        "required": [
          "title"
        ]
      },
      "PriceSegmentBase": {
        "type": "object",
        "properties": {
          "price": {
            "description": "price of the product",
            "type": "number",
            "format": "double",
            "minimum": 0,
            "maximum": 100000
          },
          "currency": {
            "description": "currency of the order formatted as <a href='https://en.wikipedia.org/wiki/ISO_4217' target='_blank'>ISO 4217, alphabetic code</a>",
            "type": "string",
            "minLength": 3,
            "maxLength": 3
          },
          "validFrom": {
            "description": "date price segment is valid from in full-date notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21",
            "type": [
              "null",
              "string"
            ],
            "format": "date"
          },
          "validFromExistingSubscription": {
            "description": "date price segment is valid for exisiting subscriptions from in full-date notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21",
            "type": [
              "null",
              "string"
            ],
            "format": "date"
          },
          "worldSegment": {
            "description": "flag indicating if price is valid for the complete world if no other price segments are provided - must be set if price country segment id is not provided",
            "type": "boolean"
          }
        },
        "required": [
          "price",
          "currency",
          "validFrom"
        ]
      },
      "PriceSegmentCreation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PriceSegmentBase"
          }
        ],
        "type": "object",
        "properties": {
          "priceCountrySegmentId": {
            "description": "id of the price country segment to associate with this price segment - can be empty if world segment flag is set",
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "PriceIssueCreation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PriceIssueBase"
          }
        ],
        "type": "object",
        "properties": {
          "priceSegments": {
            "$ref": "#/components/schemas/PriceSegmentCreation"
          }
        },
        "required": [
          "priceSegments"
        ]
      },
      "PriceCountrySegmentCreation": {
        "type": "object",
        "properties": {
          "title": {
            "description": "title of the price country segment",
            "type": "string",
            "maximum": 100
          },
          "priority": {
            "description": "priority of the price country segment - the lower the priority the higher the rank of the price segment",
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 1000
          },
          "description": {
            "description": "internal description of the price country segment",
            "type": "string",
            "maximum": 2000
          },
          "countries": {
            "description": "array of country codes formatted as <a href=\"https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\" target=\"_blank\">ISO 3166-1 alpha-2</a>",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "title",
          "countries"
        ]
      },
      "PriceCountrySegment": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PriceCountrySegmentCreation"
          },
          {
            "$ref": "#/components/schemas/ApiBase"
          }
        ],
        "type": "object",
        "properties": {
          "priceCountrySegmentId": {
            "description": "unique id of the price country segment within a contract company",
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "priceCountrySegmentId"
        ]
      },
      "PriceSegment": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PriceSegmentBase"
          },
          {
            "$ref": "#/components/schemas/ApiBaseDate"
          }
        ],
        "type": "object",
        "properties": {
          "priceSegmentId": {
            "description": "unique id of the price segment within a contract company",
            "type": "integer",
            "format": "int64"
          },
          "countrySegments": {
            "$ref": "#/components/schemas/PriceCountrySegment"
          }
        }
      },
      "PriceIssue": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PriceIssueCreation"
          },
          {
            "$ref": "#/components/schemas/ApiBase"
          }
        ],
        "type": "object",
        "properties": {
          "priceIssueId": {
            "description": "unique id of the price issue within a contract company",
            "type": "integer",
            "format": "int64"
          },
          "archived": {
            "description": "flag indicating if price country segment is archived",
            "type": "boolean"
          },
          "priceSegments": {
            "$ref": "#/components/schemas/PriceSegment"
          }
        },
        "required": [
          "priceIssueId",
          "archived"
        ]
      },
      "CrossOfferProductStep": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBaseDate"
          }
        ],
        "type": "object",
        "properties": {
          "position": {
            "description": "position inside the product",
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 50
          },
          "translations": {
            "description": "translations associated with this product",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferTranslation"
            }
          },
          "productTagIds": {
            "description": "tags associated with this product",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "additionalProductContractIds": {
            "description": "additioanl product contract ids with this product",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "plenigoStepId": {
            "description": "unique id of the step within the product",
            "type": "string",
            "minLength": 20,
            "maxLength": 20
          },
          "termPeriod": {
            "description": "term time period",
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 100
          },
          "termTimespan": {
            "description": "term timespan",
            "type": "string",
            "enum": [
              "DAY",
              "MONTH",
              "NONE",
              "WEEK",
              "YEAR"
            ]
          },
          "durationPeriod": {
            "description": "duration period of the product step - can be 0 for no end time",
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 100
          },
          "durationTimespan": {
            "description": "duration timespan",
            "type": "string",
            "enum": [
              "DAY",
              "MONTH",
              "NONE",
              "WEEK",
              "YEAR"
            ]
          },
          "accountingPeriod": {
            "description": "accounting period of the product step",
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 100
          },
          "accountingTimespan": {
            "description": "accounting timespan",
            "type": "string",
            "enum": [
              "DAY",
              "MONTH",
              "NONE",
              "WEEK",
              "YEAR"
            ]
          },
          "cancellationPeriod": {
            "description": "cancellation period of the product step",
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 100
          },
          "cancellationTimespan": {
            "description": "cancellation timespan",
            "type": "string",
            "enum": [
              "DAY",
              "MONTH",
              "NONE",
              "WEEK",
              "YEAR"
            ]
          },
          "productContract": {
            "description": "product contract associated with this step",
            "$ref": "#/components/schemas/ProductContract"
          },
          "priceIssue": {
            "description": "price issue associated with this step",
            "$ref": "#/components/schemas/PriceIssue"
          },
          "additionalProductContracts": {
            "description": "additioanl product contract ids with this product",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductContract"
            }
          }
        },
        "required": [
          "position",
          "productContractId"
        ]
      },
      "CrossOfferProduct": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBaseDate"
          }
        ],
        "type": "object",
        "properties": {
          "internalTitle": {
            "description": "internal title of the product",
            "type": "string",
            "maxLength": 100
          },
          "position": {
            "description": "order position within the offer - must start with one and be in order",
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 50
          },
          "taxType": {
            "description": "tax type product is associated with",
            "type": "string",
            "enum": [
              "ADVERTISEMENT",
              "BOOK",
              "DIGITALNEWSPAPER",
              "DIGITALOFFER",
              "DIGITALPRODUCT",
              "DONATION",
              "DOWNLOAD",
              "EBOOK",
              "EVENT",
              "FEE",
              "MAGAZINE",
              "MEMBERSHIP",
              "MUSIC",
              "NEWSPAPER",
              "PHYSICALPRODUCT",
              "VIDEO",
              "VOUCHER"
            ]
          },
          "productType": {
            "description": "defines the type of product",
            "type": "string",
            "enum": [
              "CROSS_CLIENT_SUBSCRIPTION_TIME_BASED",
              "SINGLE_PRODUCT",
              "SINGLE_PRODUCT_CREDIT_BASED",
              "SUBSCRIPTION_CREDIT_BASED",
              "SUBSCRIPTION_CREDIT_TIME_BASED",
              "SUBSCRIPTION_CREDIT_TRIGGER_BASED",
              "SUBSCRIPTION_ISSUE_BASED",
              "SUBSCRIPTION_TIME_BASED",
              "SUBSCRIPTION_TIME_CREDIT_BASED",
              "VOUCHER_SALE"
            ]
          },
          "subscription": {
            "description": "flag indicating if product represents a subscription",
            "type": "boolean"
          },
          "amount": {
            "description": "amount of goods represented by this product",
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 100000
          },
          "validityTime": {
            "description": "validity time of this product in days",
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 365
          },
          "validityEndTime": {
            "description": "date the this product validity will be end",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "costCenter": {
            "description": "cost center associated with this product",
            "$ref": "#/components/schemas/CostCenter"
          },
          "voucherTargetPlenigoOfferId": {
            "description": "plenigo offer id of the target offer - required with product type VOUCHER_SALE",
            "type": "string"
          },
          "voucherValidityTime": {
            "description": "validity time of the voucher based on timespan",
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 100
          },
          "voucherValidityTimespan": {
            "description": "date the this product validity will be end",
            "type": "string",
            "enum": [
              "DAY",
              "MONTH",
              "NONE",
              "WEEK",
              "YEAR"
            ]
          },
          "additionalData": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "maxLength": 30
                },
                "value": {
                  "type": "string",
                  "maxLength": 200
                }
              }
            }
          },
          "data": {
            "description": "additional data field",
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "maxLength": 200
            }
          },
          "priceIssue": {
            "description": "price issue associated with this step",
            "$ref": "#/components/schemas/PriceIssue"
          },
          "option": {
            "description": "flag indicating if product is an option in a basket",
            "type": "boolean"
          },
          "translations": {
            "description": "translations associated with this product",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferTranslation"
            }
          },
          "plenigoProductId": {
            "description": "unique id of the product within the offer",
            "type": "string",
            "minLength": 20,
            "maxLength": 20
          },
          "steps": {
            "description": "steps associated with this product - mandatory field for subscriptions",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CrossOfferProductStep"
            }
          }
        },
        "required": [
          "plenigoProductId",
          "position",
          "taxType",
          "amount",
          "translations",
          "productType"
        ]
      },
      "CrossOfferProductGroup": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBaseDate"
          }
        ],
        "type": "object",
        "properties": {
          "internalTitle": {
            "description": "internal title of the product group",
            "type": "string",
            "maxLength": 100
          },
          "translations": {
            "description": "translations associated with this product",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferTranslation"
            }
          },
          "plenigoProductGroupId": {
            "description": "unique id of the product group within the offer",
            "type": "string",
            "minLength": 20,
            "maxLength": 20
          },
          "products": {
            "description": "products associated with this product group",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CrossOfferProduct"
            }
          }
        },
        "required": [
          "plenigoProductGroupId",
          "products",
          "internalTitle",
          "translations"
        ]
      },
      "CrossOffer": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBase"
          }
        ],
        "type": "object",
        "properties": {
          "internalTitle": {
            "description": "internal title of the product group",
            "type": "string",
            "maxLength": 100
          },
          "pauseAble": {
            "description": "flag indicating if subscription is pause able",
            "type": "boolean"
          },
          "invoiceAddressMandatory": {
            "description": "flag indicating if invoice address must be provided by the customer",
            "type": "boolean"
          },
          "deliveryAddressMandatory": {
            "description": "flag indicating if delivery address must be provided by the customer",
            "type": "boolean"
          },
          "multiplePurchases": {
            "description": "flag indicating if offer can be bought multiple times from the same customer",
            "type": "boolean"
          },
          "fixedStartDate": {
            "description": "fixed date the offer starts with",
            "type": [
              "null",
              "string"
            ],
            "format": "date"
          },
          "issuesInPast": {
            "description": "amount of issues that the user can select in the past - cannot be selected with fixed start date",
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 30
          },
          "issuesInFuture": {
            "description": "amount of issues that the user can select in the future - cannot be selected with fixed start date",
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 30
          },
          "archived": {
            "description": "flag indicating if offer is archived",
            "type": "boolean"
          },
          "allowedPaymentMethods": {
            "description": "additional constraints to the payment methods if some of the selected payment methods cannot be used for this offer - there can be no more payment methods than selected in the global payment settings section",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "AMAZON_PAY",
                "APPLE_PAY",
                "BANK_ACCOUNT",
                "BILLING",
                "CREDIT_CARD",
                "GOOGLE_PAY",
                "IDEAL",
                "PAYPAL",
                "POSTFINANCE",
                "SOFORT",
                "TWINT",
                "ZERO"
              ]
            }
          },
          "connectedCompanySettings": {
            "$ref": "#/components/schemas/OfferConnectedCompanySettings"
          },
          "externalBilling": {
            "description": "indicates if payments are handled by plenigo or an external system",
            "type": "boolean"
          },
          "customerCancellationBlocked": {
            "description": "indicates if a subscription cannot be cancelled by a customer",
            "type": "boolean"
          },
          "corporateAccountUsers": {
            "description": "count of allowed corporate account users",
            "type": "integer",
            "format": "int64"
          },
          "corporateAccountInvitationUrl": {
            "description": "corporate account invitation url",
            "type": "string"
          },
          "selfServiceHintTmId": {
            "description": "id of the text module used as self service hint",
            "type": "integer",
            "format": "int64"
          },
          "managedExternal": {
            "description": "flag indicating if offer is managed externally",
            "type": "boolean"
          },
          "managedBy": {
            "description": "managed by of the given offer.",
            "type": "string",
            "enum": [
              "PLENIGO",
              "EXTERNAL",
              "WBZ"
            ]
          },
          "translations": {
            "description": "translations associated with this product",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferTranslation"
            }
          },
          "pdfTemplateUsage": {
            "description": "contains the pdf template to use with this offer",
            "type": "string",
            "enum": [
              "B2B",
              "B2C",
              "EVENT_B2B",
              "EVENT_B2C"
            ]
          },
          "partnerSettings": {
            "$ref": "#/components/schemas/OfferPartnerSettings"
          },
          "plenigoOfferId": {
            "description": "unique id of the offer within a company",
            "type": "string",
            "minLength": 20,
            "maxLength": 20
          },
          "products": {
            "description": "products associated with this offer",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CrossOfferProduct"
            }
          },
          "productGroups": {
            "description": "product groups associated with this offer",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CrossOfferProductGroup"
            }
          },
          "productTags": {
            "description": "tags associated with this product",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductTag"
            }
          }
        },
        "required": [
          "plenigoOfferId",
          "internalTitle",
          "translations"
        ]
      },
      "ConnectedCompanyOffers": {
        "type": "object",
        "properties": {
          "companyId": {
            "description": "unique id of the source company",
            "type": "string",
            "minLength": 20,
            "maxLength": 20
          },
          "companyName": {
            "description": "name of the source company id",
            "type": "string"
          },
          "offers": {
            "description": "offers that are shared by the company",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CrossOffer"
            }
          }
        },
        "required": [
          "companyId",
          "companyName"
        ]
      },
      "ConnectedOffers": {
        "type": "object",
        "properties": {
          "items": {
            "description": "connected offers",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConnectedCompanyOffers"
            }
          }
        }
      },
      "PriceCountrySegments": {
        "type": "object",
        "properties": {
          "items": {
            "description": "price country segments",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PriceCountrySegment"
            }
          }
        }
      },
      "PriceIssues": {
        "type": "object",
        "properties": {
          "items": {
            "description": "price issues",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PriceIssue"
            }
          }
        }
      },
      "ProductContracts": {
        "type": "object",
        "properties": {
          "items": {
            "description": "product contracts",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductContract"
            }
          }
        }
      },
      "ProductTags": {
        "type": "object",
        "properties": {
          "items": {
            "description": "product tags",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductTag"
            }
          }
        }
      },
      "RelationRuleBase": {
        "type": "object",
        "properties": {
          "internalTitle": {
            "description": "internal title of the relation rule",
            "type": "string",
            "maxLength": 100
          },
          "description": {
            "description": "internal description of the relation rule",
            "type": "string",
            "maxLength": 5000
          },
          "relatedPlenigoOfferId": {
            "description": "plenigo offer id that is used if relation rule matches",
            "type": "string"
          },
          "unrelatedPlenigoOfferId": {
            "description": "plenigo offer id that is used if relation rule does not matches",
            "type": "string"
          },
          "cancelUnrelated": {
            "description": "offer is cancelled if relation rule is not matched",
            "type": "boolean"
          },
          "sendCustomerEmail": {
            "description": "flag indicating if customer email should be sent in case of a cancellation",
            "type": "boolean"
          },
          "identityCheckType": {
            "description": "identity check type to use",
            "type": "string",
            "enum": [
              "ADULT",
              "DEFAULT"
            ]
          },
          "translations": {
            "description": "translations for customer texts",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RuleTranslation"
            }
          }
        }
      },
      "RelationRuleCreation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RelationRuleBase"
          }
        ],
        "type": "object",
        "properties": {
          "qualifyingProductTagIds": {
            "description": "tags that qualifies for a product relation",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "RelationRule": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RelationRuleCreation"
          },
          {
            "$ref": "#/components/schemas/ApiBase"
          }
        ],
        "type": "object",
        "properties": {
          "relationRuleId": {
            "description": "unique id of the relation rule within a contract company",
            "type": "integer",
            "format": "int64"
          },
          "productTags": {
            "description": "tags associated with this product",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductTag"
            }
          }
        }
      },
      "RelationRules": {
        "type": "object",
        "properties": {
          "items": {
            "description": "relation rules",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelationRule"
            }
          }
        }
      },
      "ShoppingCartTranslationImage": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBaseDate"
          }
        ],
        "properties": {
          "imageType": {
            "description": "type of the image - there can only be one image of each type per translation",
            "type": "string",
            "enum": [
              "PRODUCT_CHECKOUT",
              "PRODUCT_PRESENTATION"
            ]
          },
          "name": {
            "description": "name of the image",
            "type": "string",
            "maxLength": 100
          },
          "url": {
            "description": "url to get image from",
            "type": "string",
            "maxLength": 500
          },
          "altText": {
            "description": "image alt text",
            "type": "string",
            "maxLength": 200
          }
        },
        "required": [
          "imageType",
          "name",
          "url"
        ]
      },
      "ShoppingCartTranslation": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBaseDate"
          }
        ],
        "properties": {
          "language": {
            "description": "two letter language code according to <a href=\"https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes\" target=\"_blank\">ISO 639-1</a> - every language code can only be used once per translation",
            "type": "string",
            "minLength": 2,
            "maxLength": 2
          },
          "title": {
            "description": "translated title",
            "type": "string",
            "maxLength": 100
          },
          "description": {
            "description": "translated description",
            "type": "string",
            "maxLength": 5000
          },
          "legalText": {
            "description": "translated legal text",
            "type": "string",
            "maxLength": 5000
          },
          "preferred": {
            "description": "flag indicating if language is default fallback language if no suitable language is found",
            "type": "boolean"
          },
          "images": {
            "description": "images associated with translation",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShoppingCartTranslationImage"
            }
          }
        },
        "required": [
          "language",
          "title"
        ]
      },
      "ShoppingCartBase": {
        "type": "object",
        "properties": {
          "internalTitle": {
            "description": "internal title of the shopping cart",
            "type": "string",
            "maxLength": 100
          },
          "translations": {
            "description": "translations associated with this shopping cart",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShoppingCartTranslation"
            }
          },
          "hintTmId": {
            "description": "id of the text module used as hint",
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "internalTitle",
          "translations"
        ]
      },
      "ShoppingCartItemBase": {
        "type": "object",
        "properties": {
          "position": {
            "description": "item position within the shopping cart or shopping cart group - must start with one and be in order",
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 50
          },
          "option": {
            "description": "flag indicating if product is an option - can be booked optionally and is not automatically part of the checkout",
            "type": "boolean"
          },
          "defaultSelected": {
            "description": "flag indicating if product should be selected by default",
            "type": "boolean"
          },
          "offerId": {
            "description": "id of the offer associated with this shopping cart item",
            "type": "integer",
            "format": "int64"
          },
          "bonus": {
            "description": "id of the bonus associated with this shopping cart item",
            "type": "integer",
            "format": "int64"
          },
          "connectedOfferId": {
            "description": "id of the connected offer associated with this shopping cart item",
            "type": "integer",
            "format": "int64"
          },
          "connectedLeadingPlenigoOfferId": {
            "description": "unique id of the offer the connected offer is associated with",
            "type": "string",
            "minLength": 20,
            "maxLength": 20
          }
        },
        "required": [
          "position",
          "option",
          "defaultSelected"
        ]
      },
      "ShoppingCartItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ShoppingCartItemBase"
          },
          {
            "$ref": "#/components/schemas/ApiBaseDate"
          }
        ],
        "type": "object",
        "properties": {
          "shoppingCartItemId": {
            "description": "unique id of the shopping cart item within a contract company",
            "type": "integer",
            "format": "int64"
          },
          "plenigoOfferId": {
            "description": "unique id of the offer within the shopping cart",
            "type": "string",
            "minLength": 20,
            "maxLength": 20
          },
          "plenigoBonusId": {
            "description": "unique id of the bonus within the shopping cart",
            "type": "string",
            "minLength": 20,
            "maxLength": 20
          },
          "connectedPlenigoOfferId": {
            "description": "unique id of the connected offer within the shopping cart",
            "type": "string",
            "minLength": 20,
            "maxLength": 20
          },
          "connectedOfferCompanyId": {
            "description": "companyId of connected company",
            "type": "string"
          }
        },
        "required": [
          "shoppingCartItemId"
        ]
      },
      "ShoppingCartItemGroupBase": {
        "type": "object",
        "properties": {
          "internalTitle": {
            "description": "internal title of the shopping cart item group",
            "type": "string",
            "maxLength": 100
          },
          "translations": {
            "description": "translations associated with this shopping cart item group",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShoppingCartTranslation"
            }
          }
        },
        "required": [
          "internalTitle",
          "translations"
        ]
      },
      "ShoppingCartItemGroup": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ShoppingCartItemGroupBase"
          },
          {
            "$ref": "#/components/schemas/ApiBaseDate"
          }
        ],
        "type": "object",
        "properties": {
          "shoppingCartItemGroupId": {
            "description": "unique id of the shopping cart item group within a contract company",
            "type": "integer",
            "format": "int64"
          },
          "items": {
            "description": "items associated with this shopping cart item group",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShoppingCartItem"
            }
          }
        },
        "required": [
          "shoppingCartItemGroupId",
          "items"
        ]
      },
      "ShoppingCart": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ShoppingCartBase"
          },
          {
            "$ref": "#/components/schemas/ApiBase"
          }
        ],
        "type": "object",
        "properties": {
          "shoppingCartId": {
            "description": "unique id of the shopping cart within a contract company",
            "type": "integer",
            "format": "int64"
          },
          "plenigoShoppingCartId": {
            "description": "unique id of the shopping cart within a company",
            "type": "string",
            "minLength": 20,
            "maxLength": 20
          },
          "items": {
            "description": "items associated with this shopping cart",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShoppingCartItem"
            }
          },
          "itemGroups": {
            "description": "item groups associated with this shopping cart",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShoppingCartItemGroup"
            }
          }
        },
        "required": [
          "shoppingCartId",
          "plenigoShoppingCartId"
        ]
      },
      "ShoppingCarts": {
        "type": "object",
        "properties": {
          "items": {
            "description": "shopping carts",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShoppingCart"
            }
          }
        }
      },
      "RefundStatusChange": {
        "type": "object",
        "properties": {
          "status": {
            "description": "status of the refund",
            "type": "string",
            "enum": [
              "CLOSED",
              "IGNORED",
              "OPEN",
              "PROCESSING",
              "REJECTED"
            ]
          },
          "reason": {
            "description": "reason for status change",
            "type": "string",
            "maxLength": 500
          }
        },
        "required": [
          "status",
          "reason"
        ]
      },
      "StatusHistory": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RefundStatusChange"
          }
        ],
        "type": "object",
        "properties": {
          "changeDate": {
            "description": "date the refund was changed with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          }
        }
      },
      "Refund": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBaseDate"
          }
        ],
        "type": "object",
        "properties": {
          "refundId": {
            "description": "unique id of the refund also used for pagination",
            "type": "integer",
            "format": "int64"
          },
          "customerId": {
            "description": "unique id of the customer the refund is related to",
            "type": "string",
            "pattern": "^[0-9]{1,18}$"
          },
          "amount": {
            "description": "amount of the refund",
            "type": "number",
            "format": "double"
          },
          "currency": {
            "description": "currency of the refund formatted as <a href=\"https://en.wikipedia.org/wiki/ISO_4217\" target=\"_blank\">ISO 4217, alphabetic code</a>",
            "type": "string",
            "minLength": 3,
            "maxLength": 3
          },
          "paymentProvider": {
            "description": "payment provider used for refund execution",
            "type": "string",
            "enum": [
              "AMAZON",
              "APPLE",
              "DATATRANS",
              "GOOGLE",
              "PAYONE",
              "PAYPAL",
              "STRIPE",
              "WIRECARD_LEGACY"
            ]
          },
          "paymentMethod": {
            "description": "payment method used",
            "type": "string",
            "enum": [
              "AMAZON_PAY",
              "APPLE_PAY",
              "BANK_ACCOUNT",
              "BILLING",
              "CREDIT_CARD",
              "GOOGLE_PAY",
              "IDEAL",
              "PAYPAL",
              "POSTFINANCE",
              "SOFORT",
              "TWINT",
              "ZERO"
            ]
          },
          "cancellationInvoiceId": {
            "description": "unique id of the cancellation also used for pagination",
            "type": "integer",
            "format": "int64"
          },
          "transactionId": {
            "description": "unique id of the transaction also used for pagination",
            "type": "string",
            "maxLength": 80
          },
          "pspTransactionId": {
            "description": "id of the payment service provider if one was provided",
            "type": "string",
            "maxLength": 80
          },
          "status": {
            "description": "status of the refund",
            "type": "string",
            "enum": [
              "CLOSED",
              "IGNORED",
              "OPEN",
              "PROCESSING",
              "REJECTED"
            ]
          },
          "statusHistory": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StatusHistory"
            }
          }
        },
        "required": [
          "refundId",
          "changedDate",
          "customerId",
          "amount",
          "currency",
          "paymentMethod",
          "status",
          "paymentStatus"
        ]
      },
      "Refunds": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Refund"
            }
          }
        }
      },
      "CustomerSession": {
        "type": "object",
        "properties": {
          "id": {
            "description": "unique id of the session",
            "type": "string",
            "maxLength": 40
          },
          "customerId": {
            "description": "unique id of the customer within a contract company",
            "type": "string",
            "pattern": "^[0-9]{1,18}$"
          },
          "contractCompanyId": {
            "description": "id of the contract company the customer belongs to",
            "type": "string",
            "maxLength": 40
          },
          "companyId": {
            "description": "id of the company the customer belongs to",
            "type": "string",
            "maxLength": 40
          },
          "created": {
            "description": "time the session was created with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "type": {
            "description": "type of the session",
            "type": "string",
            "enum": [
              "CUSTOMER_SESSION"
            ]
          }
        }
      },
      "TransferToken": {
        "type": "object",
        "properties": {
          "transferToken": {
            "description": "transfer token to get the the saved customer session for",
            "type": "string"
          }
        }
      },
      "RequestTokenResult": {
        "type": "object",
        "properties": {
          "token": {
            "description": "renewed access token",
            "type": "string"
          }
        }
      },
      "AdditionalDataSelection": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBase"
          }
        ],
        "type": "object",
        "properties": {
          "title": {
            "description": "title that identifies the selection itself",
            "type": "string",
            "minLength": 2,
            "maxLength": 50
          },
          "description": {
            "description": "description provided to the merchant user for the additional data selection",
            "maxLength": 100
          },
          "category": {
            "description": "free field to be able to categorize the data selections",
            "maxLength": 50
          },
          "identifier": {
            "description": "identifier used as additional data keys",
            "pattern": "^[0-9\\\\-a-zA-Z]{2,20}$"
          },
          "enabled": {
            "description": "flag indicating if selection is active",
            "type": "boolean"
          },
          "values": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "minLength": 2,
                  "maxLength": 30
                },
                "value": {
                  "type": "string",
                  "minLength": 2,
                  "maxLength": 100
                }
              }
            }
          }
        },
        "required": [
          "title",
          "identifier",
          "values"
        ]
      },
      "AdditionalDataSelectionList": {
        "type": "object",
        "properties": {
          "additions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdditionalDataSelection"
            }
          }
        }
      },
      "CustomerOptInTranslationBase": {
        "type": "object",
        "properties": {
          "language": {
            "description": "two letter language code according to <a href=\"https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes\" target=\"_blank\">ISO 639-1</a> - every language code can only be used once per translation",
            "type": "string",
            "minLength": 2,
            "maxLength": 2
          },
          "ssoText": {
            "description": "text shown during log in, registration, etc.",
            "type": "string",
            "maxLength": 5000
          },
          "checkoutText": {
            "description": "text shown during checkout",
            "type": "string",
            "maxLength": 5000
          },
          "preferred": {
            "description": "flag indicating if language is preferred",
            "type": "boolean"
          }
        },
        "required": [
          "language",
          "ssoText",
          "checkoutText"
        ]
      },
      "CustomerOptInCreation": {
        "type": "object",
        "properties": {
          "internalTitle": {
            "description": "internal title of the opt in",
            "type": "string",
            "maxLength": 100
          },
          "active": {
            "description": "flag indicating if opt in is currently active",
            "type": "boolean"
          },
          "uniqueId": {
            "description": "unique id to associate with the user after user has accepted opt in",
            "type": "string",
            "maxLength": 50
          },
          "includedTypes": {
            "description": "types that are included with this opt-in",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "EMAIL",
                "MESSENGER",
                "PHONE",
                "POST"
              ]
            }
          },
          "translations": {
            "description": "translations associated with this opt in",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerOptInTranslationBase"
            }
          }
        },
        "required": [
          "internalTitle",
          "uniqueId",
          "includedTypes",
          "translations"
        ]
      },
      "CustomerOptIn": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CustomerOptInCreation"
          },
          {
            "$ref": "#/components/schemas/ApiBase"
          }
        ],
        "type": "object",
        "properties": {
          "customerOptInId": {
            "description": "unique id of the customer opt in",
            "type": "integer",
            "format": "int64"
          },
          "activationTime": {
            "description": "time opt in was first activated with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          }
        },
        "required": [
          "customerOptInId"
        ]
      },
      "CustomerOptIns": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerOptIn"
            }
          }
        }
      },
      "BlockedIbanBase": {
        "type": "object",
        "properties": {
          "iban": {
            "description": "<a href=\"https://en.wikipedia.org/wiki/International_Bank_Account_Number\" target=\"_blank\">IBAN</a>",
            "type": "string",
            "minLength": 18,
            "maxLength": 32
          },
          "description": {
            "description": "description of the blocked iban",
            "type": "string",
            "maxLength": 1000
          }
        },
        "required": [
          "iban"
        ]
      },
      "BlockedIban": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BlockedIbanBase"
          },
          {
            "$ref": "#/components/schemas/ApiBase"
          }
        ],
        "type": "object",
        "properties": {
          "blockedIbanId": {
            "description": "unique id of the blocked iban",
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "blockedIbanId",
          "iban"
        ]
      },
      "BlockedIbans": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BlockedIban"
            }
          }
        }
      },
      "CustomerCancellationReasonTranslation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBaseDate"
          }
        ],
        "type": "object",
        "properties": {
          "language": {
            "description": "two letter language code according to <a href=\"https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes\" target=\"_blank\">ISO 639-1</a> - every language code can only be used once per translation",
            "type": "string",
            "minLength": 2,
            "maxLength": 2
          },
          "text": {
            "description": "text to show to the customer",
            "type": "string",
            "maxLength": 1000
          },
          "preferred": {
            "description": "flag indicating if language is preferred",
            "type": "boolean"
          }
        },
        "required": [
          "language",
          "text"
        ]
      },
      "CustomerCancellationReasonUpdate": {
        "type": "object",
        "properties": {
          "internalTitle": {
            "description": "internal title of the cancellation reason",
            "type": "string",
            "maxLength": 100
          },
          "active": {
            "description": "flag indicating if cancellation reason is currently active",
            "type": "boolean"
          },
          "priority": {
            "description": "priority of the cancellation reason",
            "type": "integer",
            "format": "int32"
          },
          "translations": {
            "description": "translations associated with this cancellation reason",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerCancellationReasonTranslation"
            }
          }
        },
        "required": [
          "internalTitle",
          "translations"
        ]
      },
      "CustomerCancellationReasonCreation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CustomerCancellationReasonUpdate"
          }
        ],
        "type": "object",
        "properties": {
          "uniqueId": {
            "description": "unique id to associate with the user after user has accepted cancellation reason",
            "type": "string",
            "maxLength": 50
          }
        },
        "required": [
          "internalTitle",
          "uniqueId",
          "translations"
        ]
      },
      "CustomerCancellationReason": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CustomerCancellationReasonCreation"
          },
          {
            "$ref": "#/components/schemas/ApiBase"
          }
        ],
        "type": "object",
        "properties": {
          "customerCancellationReasonId": {
            "description": "unique id of the customer cancellation reason",
            "type": "integer",
            "format": "int64"
          },
          "archived": {
            "description": "flag indicating if customer cancellation reason is archived",
            "type": "boolean"
          }
        },
        "required": [
          "customerCancellationReasonId"
        ]
      },
      "CustomerCancellationReasons": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerCancellationReason"
            }
          }
        }
      },
      "CustomerTermTranslation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBase"
          }
        ],
        "type": "object",
        "properties": {
          "language": {
            "description": "two letter language code according to <a href=\"https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes\" target=\"_blank\">ISO 639-1</a> - every language code can only be used once per translation",
            "type": "string",
            "minLength": 2,
            "maxLength": 2
          },
          "ssoText": {
            "description": "text shown during log in, registration, etc.",
            "type": "string",
            "maxLength": 5000
          },
          "checkoutText": {
            "description": "text shown during checkout",
            "type": "string",
            "maxLength": 5000
          },
          "preferred": {
            "description": "flag indicating if language is preferred",
            "type": "boolean"
          }
        },
        "required": [
          "language",
          "ssoText",
          "checkoutText"
        ]
      },
      "CustomerTermCreation": {
        "type": "object",
        "properties": {
          "internalTitle": {
            "description": "internal title of the term",
            "type": "string",
            "maxLength": 100
          },
          "active": {
            "description": "flag indicating if term is currently active",
            "type": "boolean"
          },
          "uniqueId": {
            "description": "unique id to associate with the user after user has accepted term",
            "type": "string",
            "maxLength": 50
          },
          "translations": {
            "description": "translations associated with this term",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerTermTranslation"
            }
          }
        },
        "required": [
          "internalTitle",
          "uniqueId",
          "translations"
        ]
      },
      "CustomerTerm": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CustomerTermCreation"
          },
          {
            "$ref": "#/components/schemas/ApiBase"
          }
        ],
        "type": "object",
        "properties": {
          "customerTermId": {
            "description": "unique id of the customer term",
            "type": "integer",
            "format": "int64"
          },
          "activationTime": {
            "description": "time term was first activated with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          }
        },
        "required": [
          "customerTermId"
        ]
      },
      "CustomerTerms": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerTerm"
            }
          }
        }
      },
      "TextModuleTranslation": {
        "type": "object",
        "properties": {
          "language": {
            "description": "two letter language code according to <a href=\"https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes\" target=\"_blank\">ISO 639-1</a> - every language code can only be used once per translation",
            "type": "string",
            "minLength": 2,
            "maxLength": 2
          },
          "text": {
            "description": "text represented by the module",
            "type": "string",
            "maxLength": 5000
          },
          "preferred": {
            "description": "flag indicating if language is preferred",
            "type": "boolean"
          }
        },
        "required": [
          "language",
          "text"
        ]
      },
      "TextModuleCreation": {
        "type": "object",
        "properties": {
          "internalTitle": {
            "description": "internal title of the text module",
            "type": "string",
            "maxLength": 100
          },
          "type": {
            "description": "type of text the module represents",
            "type": "string",
            "enum": [
              "LINK",
              "HTML_TEXT",
              "PLAIN_TEXT"
            ]
          },
          "leafId": {
            "description": "id of the tree leaf this price issue should be associated with",
            "type": "integer",
            "format": "int64"
          },
          "translations": {
            "description": "translations associated with this term",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextModuleTranslation"
            }
          }
        },
        "required": [
          "internalTitle",
          "type",
          "translations"
        ]
      },
      "TextModule": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TextModuleCreation"
          },
          {
            "$ref": "#/components/schemas/ApiBase"
          }
        ],
        "type": "object",
        "properties": {
          "textModuleId": {
            "description": "unique id of the text module",
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "textModuleId"
        ]
      },
      "TextModules": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextModule"
            }
          }
        }
      },
      "SortTreeLeaf": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBase"
          }
        ],
        "type": "object",
        "properties": {
          "name": {
            "description": "name of the sort tree leaf",
            "type": "string",
            "maxLength": 100
          },
          "type": {
            "description": "type sort tree leaf is associated with",
            "type": "string",
            "enum": [
              "OFFER",
              "PRICE_ISSUE",
              "PRODUCT_CONTRACT",
              "TEXT_MODULE"
            ]
          },
          "leafId": {
            "description": "unique id of the sort tree leaf",
            "type": "integer",
            "format": "int64"
          },
          "parentLeafId": {
            "description": "id of the parent sort tree leaf this leaf is below",
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "name",
          "leafId"
        ]
      },
      "SortTreeLeafs": {
        "type": "object",
        "properties": {
          "items": {
            "description": "sort tree leaf",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SortTreeLeaf"
            }
          }
        }
      },
      "SftpLogEntry": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBaseDate"
          }
        ],
        "type": "object",
        "properties": {
          "sftpLogEntryId": {
            "description": "unique id of the sftp log entry",
            "type": "integer",
            "format": "int64"
          },
          "server": {
            "description": "sftp server used",
            "type": "string"
          },
          "username": {
            "description": "username used to connect",
            "type": "string"
          },
          "targetDirectory": {
            "description": "target directory used",
            "type": "string"
          },
          "success": {
            "description": "flag indicating if call succeeded",
            "type": "boolean"
          },
          "errorMsg": {
            "description": "error message in case of an error",
            "type": "string"
          }
        }
      },
      "SftpLogEntries": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SftpLogEntry"
            }
          }
        }
      },
      "SubscriptionChangeAccess": {
        "type": "object",
        "properties": {
          "accessBlocked": {
            "description": "flag indicating if the access should be blocked",
            "type": "boolean"
          }
        },
        "required": [
          "accessBlocked"
        ]
      },
      "SubscriptionChangeAddress": {
        "type": "object",
        "properties": {
          "addressId": {
            "description": "id of the address to add to the subscription",
            "type": "integer",
            "format": "int64"
          },
          "addressType": {
            "description": "address type of the address to change",
            "type": "string",
            "enum": [
              "INVOICE",
              "DELIVERY"
            ]
          }
        },
        "required": [
          "addressId",
          "addressType"
        ]
      },
      "SubscriptionChangeAnalogInvoice": {
        "type": "object",
        "properties": {
          "analogInvoice": {
            "description": "flag indicating if the subscription is a analog invoice",
            "type": "boolean"
          }
        },
        "required": [
          "analogInvoice"
        ]
      },
      "SubscriptionCancellationAtData": {
        "type": "object",
        "properties": {
          "cancellationDate": {
            "description": "date subscription should end with full-date notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21",
            "type": [
              "null",
              "string"
            ],
            "format": "date"
          }
        }
      },
      "SubscriptionCancellationDates": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "date"
            }
          }
        }
      },
      "SubscriptionItemChangeDiscount": {
        "type": "object",
        "properties": {
          "subscriptionItemId": {
            "description": "unique id of the subscription item to change discount for",
            "type": "integer",
            "format": "int64"
          },
          "discountPercentage": {
            "description": "discount offered to the subscription item",
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 100
          }
        },
        "required": [
          "subscriptionItemId",
          "discountPercentage"
        ]
      },
      "SubscriptionChangePayment": {
        "type": "object",
        "properties": {
          "paymentMethod": {
            "description": "payment method used to pay for the subscription",
            "type": "string",
            "enum": [
              "AMAZON_PAY",
              "BANK_ACCOUNT",
              "BILLING",
              "CREDIT_CARD",
              "PAYPAL"
            ]
          },
          "paymentMethodId": {
            "description": "id of the payment method that is associated with this subscription",
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "paymentMethod",
          "paymentMethodId"
        ]
      },
      "SubscriptionDeliveryAddition": {
        "type": "object",
        "properties": {
          "deliveryAddition": {
            "description": "amount of deliveries to add to open deliveries",
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 100
          }
        },
        "required": [
          "deliveryAddition"
        ]
      },
      "SubscriptionItemChangeQuantity": {
        "type": "object",
        "properties": {
          "subscriptionItemId": {
            "description": "unique id of the subscription item to change discount for",
            "type": "integer",
            "format": "int64"
          },
          "quantity": {
            "description": "quantity of purchased entities",
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 10000
          }
        },
        "required": [
          "subscriptionItemId",
          "quantity"
        ]
      },
      "SubscriptionChangeSuppressInvoiceSending": {
        "type": "object",
        "properties": {
          "suppressInvoiceSending": {
            "description": "flag indicating if the subscription invoice sending is suppressed",
            "type": "boolean"
          }
        },
        "required": [
          "suppressInvoiceSending"
        ]
      },
      "SubscriptionPurchaseOrderIndicator": {
        "type": "object",
        "properties": {
          "purchaseOrderIndicator": {
            "description": "purchase order indicator to set",
            "type": "string",
            "maxLength": 50
          }
        },
        "required": [
          "purchaseOrderIndicator"
        ]
      },
      "AdditionalChainData": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "maxLength": 30
                },
                "value": {
                  "type": "string",
                  "maxLength": 200
                }
              }
            }
          }
        }
      },
      "SubscriptionStatus": {
        "type": "object",
        "properties": {
          "statusChangeId": {
            "description": "unique id of the subscription status in the context of a contract company",
            "type": "integer",
            "format": "int64"
          },
          "customerId": {
            "description": "unique id of the customer",
            "type": "string",
            "pattern": "^[0-9]{1,18}$"
          },
          "startTime": {
            "description": "time the status started with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "endTime": {
            "description": "time this status ended with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "chainId": {
            "description": "all subscriptions that are in one chain because of some rules or cross selling share a unique chain id in the context of a contract company that is identically with the first subscription within the chain",
            "type": "integer",
            "format": "int64"
          },
          "oldStatus": {
            "description": "old status",
            "type": "string",
            "enum": [
              "ACTIVE",
              "BLOCKED"
            ]
          },
          "newStatus": {
            "description": "current status",
            "type": "string",
            "enum": [
              "ACTIVE",
              "BLOCKED"
            ]
          }
        }
      },
      "SubscriptionDeliveryDate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBaseDate"
          }
        ],
        "type": "object",
        "properties": {
          "subscriptionDeliveryDateId": {
            "description": "unique id of the subscription delivery date in the context of a company",
            "type": "integer",
            "format": "int64"
          },
          "title": {
            "description": "title of the subscription delivery date",
            "type": "string",
            "maxLength": 100
          },
          "publishingDate": {
            "description": "publishing date time of the subscription delivery list with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "subscriptionId": {
            "description": "unique id of the subscription in the context of a company",
            "type": "integer",
            "format": "int64"
          },
          "subscriptionItemId": {
            "description": "unique id of the subscription item is provided here",
            "type": "integer",
            "format": "int64"
          },
          "deliveryListId": {
            "description": "id of the delivery list the subscription delivery date belongs to",
            "type": "integer",
            "format": "int64"
          },
          "deliveryListDateId": {
            "description": "id of the delivery list date the subscription delivery date belongs to",
            "type": "integer",
            "format": "int64"
          },
          "deliveryCustomerId": {
            "description": "id of the customer the delivery belongs to (also includes digital products)",
            "type": "string",
            "maxLength": 100
          },
          "deliveryAddressId": {
            "description": "id of the delivery address that is associated with this subscription",
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "subscriptionDeliveryDateId",
          "title",
          "publishingDate",
          "subscriptionId",
          "deliveryListId",
          "deliveryListDateId"
        ]
      },
      "SubscriptionDeliveryDates": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubscriptionDeliveryDate"
            }
          }
        }
      },
      "ApiCampaignBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBase"
          }
        ],
        "type": "object",
        "properties": {
          "campaignId": {
            "description": "unique id of the campaign in the context of a company",
            "type": "string",
            "maxLength": 100
          },
          "campaignName": {
            "description": "name of the campaign",
            "type": "string",
            "maxLength": 200
          },
          "voucherType": {
            "description": "represents the type of the vouchers of this campaign",
            "type": "string",
            "enum": [
              "MULTI",
              "SINGLE"
            ]
          },
          "plenigoOfferId": {
            "description": "offer id the vouchers are for",
            "type": "string",
            "maxLength": 100
          },
          "status": {
            "description": "status of the campaign",
            "type": "string",
            "enum": [
              "ACTIVE",
              "CREATING",
              "INACTIVE",
              "DELETED",
              "UPDATING"
            ]
          },
          "startDate": {
            "description": "start date of the campaign with full-date notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21",
            "type": [
              "null",
              "string"
            ],
            "format": "date"
          },
          "endDate": {
            "description": "end date of the campaign with full-date notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21",
            "type": [
              "null",
              "string"
            ],
            "format": "date"
          }
        },
        "required": [
          "campaignId",
          "campaignName",
          "voucherType",
          "offerId",
          "status",
          "startDate",
          "changedDate",
          "changedBy",
          "changedByType"
        ]
      },
      "ApiChannelBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBase"
          }
        ],
        "type": "object",
        "properties": {
          "channelId": {
            "description": "unique id of the channel in the context of a company",
            "type": "integer",
            "format": "int64"
          },
          "channelName": {
            "description": "name of the channel",
            "type": "string",
            "maxLength": 200
          },
          "customData": {
            "description": "free text field",
            "type": "string",
            "maxLength": 200
          },
          "voucherAmount": {
            "description": "represents the amount of vouchers for this channel",
            "type": "integer",
            "minimum": 1,
            "maximum": 10000000
          },
          "status": {
            "description": "status of the campaign",
            "type": "string",
            "enum": [
              "ACTIVE",
              "CREATING",
              "INACTIVE",
              "DELETED",
              "UPDATING"
            ]
          }
        },
        "required": [
          "channelId",
          "changedDate",
          "changedBy",
          "changedByType",
          "channelName",
          "status",
          "voucherAmount"
        ]
      },
      "ApiCampaignView": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiCampaignBase"
          }
        ],
        "type": "object",
        "properties": {
          "channels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiChannelBase"
            }
          }
        },
        "required": [
          "channels"
        ]
      },
      "ApiCampaignPage": {
        "type": "object",
        "properties": {
          "startingAfter": {
            "description": "starting after element id",
            "type": "integer"
          },
          "size": {
            "description": "size of elements of the page",
            "type": "integer"
          },
          "totalSize": {
            "description": "total of elements",
            "type": "integer"
          },
          "campaigns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiCampaignView"
            }
          }
        }
      },
      "ChannelCreation": {
        "type": "object",
        "properties": {
          "channelName": {
            "description": "name of the channel",
            "type": "string",
            "maxLength": 200
          },
          "customData": {
            "description": "free text field",
            "type": "string",
            "maxLength": 200
          },
          "voucherAmount": {
            "description": "represents the amount of vouchers to create for this channel",
            "type": "integer",
            "minimum": 1,
            "maximum": 10000000
          }
        }
      },
      "CampaignCreation": {
        "type": "object",
        "properties": {
          "campaignName": {
            "description": "name of the campaign",
            "type": "string",
            "maxLength": 200
          },
          "voucherType": {
            "description": "represents the type of the vouchers of this campaign",
            "type": "string",
            "enum": [
              "MULTI",
              "SINGLE"
            ]
          },
          "plenigoOfferId": {
            "description": "plenigo offer id the vouchers are for",
            "type": "string",
            "maxLength": 20
          },
          "startDate": {
            "description": "start date of the campaign with full-date notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21",
            "type": [
              "null",
              "string"
            ],
            "format": "date"
          },
          "endDate": {
            "description": "end date of the campaign with full-date notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21",
            "type": [
              "null",
              "string"
            ],
            "format": "date"
          },
          "channels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelCreation"
            }
          }
        },
        "required": [
          "campaignName",
          "voucherType",
          "plenigoOfferId",
          "startDate",
          "channels"
        ]
      },
      "ApiCampaignCreationResult": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiCampaignBase"
          }
        ],
        "type": "object",
        "properties": {
          "channels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiChannelBase"
            }
          }
        },
        "required": [
          "channels"
        ]
      },
      "ApiVoucher": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBase"
          }
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "unique id of the voucher in the context of a company",
            "type": "integer",
            "format": "int64"
          },
          "voucherCode": {
            "description": "voucher code",
            "type": "string"
          },
          "customData": {
            "description": "free text field",
            "type": "string",
            "maxLength": 200
          },
          "status": {
            "description": "status of the voucher",
            "type": "string",
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "DELETED"
            ]
          },
          "orderId": {
            "description": "order id this voucher was used",
            "type": "integer"
          }
        },
        "required": [
          "id",
          "createdDate",
          "changedDate",
          "changedBy",
          "changedByType",
          "voucherCode",
          "status",
          "voucherAmount"
        ]
      },
      "ApiMultiVoucher": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBase"
          }
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "unique id of the multi voucher in the context of a company",
            "type": "integer",
            "format": "int64"
          },
          "voucherCode": {
            "description": "voucher code",
            "type": "string"
          },
          "status": {
            "description": "status of the multi voucher",
            "type": "string",
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "DELETED"
            ]
          },
          "voucherAmount": {
            "description": "amount how often the voucher code can be used",
            "type": "integer",
            "minimum": 1
          },
          "voucherUsed": {
            "description": "amount of how often the voucher code is already used",
            "type": "integer"
          }
        },
        "required": [
          "id",
          "createdDate",
          "changedDate",
          "changedBy",
          "changedByType",
          "voucherCode",
          "status",
          "voucherAmount",
          "voucherUsed"
        ]
      },
      "ApiChannel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiChannelBase"
          }
        ],
        "type": "object",
        "properties": {
          "vouchers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiVoucher"
            }
          },
          "multiVoucher": {
            "$ref": "#/components/schemas/ApiMultiVoucher"
          }
        },
        "required": [
          "channelId",
          "changedDate",
          "changedBy",
          "changedByType",
          "channelName",
          "status",
          "voucherAmount"
        ]
      },
      "ApiCampaign": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiCampaignBase"
          }
        ],
        "type": "object",
        "properties": {
          "channels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiChannel"
            }
          }
        },
        "required": [
          "channels"
        ]
      },
      "ChannelUpdate": {
        "type": "object",
        "properties": {
          "channelName": {
            "description": "name of the channel",
            "type": "string",
            "maxLength": 200
          },
          "customData": {
            "description": "free text field",
            "type": "string",
            "maxLength": 200
          },
          "voucherAmount": {
            "description": "represents the amount of vouchers to create for this channel",
            "type": "integer",
            "minimum": 0,
            "maximum": 10000000
          }
        }
      },
      "ApiVoucherPage": {
        "type": "object",
        "properties": {
          "startingAfter": {
            "description": "starting after element id",
            "type": "integer"
          },
          "size": {
            "description": "size of elements of the page",
            "type": "integer"
          },
          "totalSize": {
            "description": "total of elements",
            "type": "integer"
          },
          "campaigns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiVoucher"
            }
          }
        }
      },
      "VoucherStatus": {
        "type": "object",
        "properties": {
          "plenigoOfferId": {
            "description": "offer id the voucher code is for",
            "type": "string",
            "maxLength": 20
          },
          "customData": {
            "description": "free text field",
            "type": "string",
            "maxLength": 200
          },
          "status": {
            "description": "the status of the voucher",
            "type": "string",
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "DELETED"
            ]
          }
        }
      },
      "schemas-CreditWalletCreation": {
        "type": "object",
        "properties": {
          "uniqueId": {
            "description": "unique id of the wallet for identification",
            "type": "string",
            "pattern": "^[0-9\\\\-a-zA-Z]{2,30}$"
          },
          "creditCount": {
            "description": "credit count to create wallet with",
            "type": "integer",
            "format": "int64",
            "minimum": 1,
            "maximum": 100000000
          },
          "customerId": {
            "description": "unique id of the customer the credit wallet belongs to",
            "type": "string",
            "pattern": "^[0-9]{1,18}$"
          }
        }
      },
      "CreditUpload": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBase"
          }
        ],
        "type": "object",
        "properties": {
          "customerId": {
            "description": "id of the customer the credit usage should be accounted to",
            "type": "string",
            "pattern": "^[0-9]{1,18}$"
          },
          "uniqueId": {
            "description": "unique id of the wallet to use",
            "type": "string",
            "pattern": "^[0-9\\\\-a-zA-Z]{2,30}$"
          },
          "uploadDate": {
            "description": "date the upload was done with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "creditUploadId": {
            "description": "unique id of the credit upload also used for pagination",
            "type": "integer",
            "format": "int64"
          },
          "title": {
            "description": "title of upload",
            "type": "string",
            "maxLength": 100
          },
          "creditsAdded": {
            "description": "amount of credits added",
            "type": "integer",
            "format": "int64",
            "minimum": 1,
            "maximum": 100000000
          },
          "itemType": {
            "description": "type of this access right item",
            "type": "string",
            "enum": [
              "EXTERNAL",
              "SINGLE_PRODUCT",
              "SUBSCRIPTION_ITEM"
            ]
          },
          "itemId": {
            "description": "the id this access right belongs to",
            "type": "string",
            "maxLength": 30
          }
        }
      },
      "CreditUploadList": {
        "type": "object",
        "properties": {
          "items": {
            "description": "credit upload list",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreditUpload"
            }
          }
        }
      },
      "CreditUsageBase": {
        "type": "object",
        "properties": {
          "customerId": {
            "description": "id of the customer the credit usage should be accounted to",
            "type": "string",
            "pattern": "^[0-9]{1,18}$"
          },
          "uniqueId": {
            "description": "unique id of the wallet to use",
            "type": "string",
            "pattern": "^[0-9\\\\-a-zA-Z]{2,30}$"
          },
          "creditsUsed": {
            "description": "amount of credits used",
            "type": "integer",
            "format": "int64",
            "minimum": 1,
            "maximum": 100000
          },
          "reason": {
            "description": "reason for credit usage",
            "type": "string",
            "maxLength": 100
          },
          "category": {
            "description": "category for credit usage",
            "type": "string",
            "maxLength": 100
          }
        },
        "required": [
          "customerId",
          "uniqueId",
          "creditsUsed",
          "reason"
        ]
      },
      "CreditUsage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBase"
          },
          {
            "$ref": "#/components/schemas/CreditUsageBase"
          }
        ],
        "type": "object",
        "properties": {
          "usageDate": {
            "description": "date the usage was done with date-time notation as defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\">RFC 3339, section 5.6</a>, for example, 2017-07-21T17:32:28Z",
            "type": [
              "null",
              "string"
            ],
            "format": "date-time"
          },
          "creditUsageId": {
            "description": "unique id of the credit usage also used for pagination",
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "usageDate",
          "creditUsageId"
        ]
      },
      "CreditUsageList": {
        "type": "object",
        "properties": {
          "items": {
            "description": "credit usage list",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreditUsage"
            }
          }
        }
      },
      "ExternalCreditUpload": {
        "type": "object",
        "properties": {
          "customerId": {
            "description": "id of the customer the credit usage should be accounted to",
            "type": "string",
            "pattern": "^[0-9]{1,18}$"
          },
          "uniqueId": {
            "description": "unique id of the wallet to use",
            "type": "string",
            "pattern": "^[0-9\\\\-a-zA-Z]{2,30}$"
          },
          "title": {
            "description": "title of upload",
            "type": "string",
            "maxLength": 100
          },
          "creditCount": {
            "description": "amount of credits to add",
            "type": "integer",
            "format": "int64",
            "minimum": 1,
            "maximum": 100000000
          }
        }
      }
    },
    "examples": {
      "accessRightsDataExample": {
        "value": {
          "startingAfterId": "100002",
          "items": [
            {
              "customerId": "100003",
              "createdDate": "2019-01-01T07:53:23.450961Z",
              "createdBy": "PLENIGO",
              "createdByType": "SYSTEM",
              "changedDate": "2019-01-01T07:53:23.450961Z",
              "changedBy": "PLENIGO",
              "changedByType": "SYSTEM",
              "items": [
                {
                  "createdDate": "2019-01-01T07:53:23.450961Z",
                  "createdBy": "PLENIGO",
                  "createdByType": "SYSTEM",
                  "changedDate": "2019-01-01T07:53:23.450961Z",
                  "changedBy": "PLENIGO",
                  "changedByType": "SYSTEM",
                  "lifeTimeStart": "2019-01-01T07:53:23.450961Z",
                  "lifeTimeEnd": "2020-01-01T07:53:23.450961Z",
                  "accessTimeStart": "06:00:00",
                  "accessTimeEnd": "18:00:00",
                  "maxCacheDate": "2020-01-01T07:53:23.450961Z",
                  "data": {
                    "specialId": "1234Special"
                  },
                  "blocked": false,
                  "productId": "P_TTA1E7173120881551",
                  "plenigoOfferId": "O_TTA1E7173120881552",
                  "plenigoProductId": "P_TTA1E7173120881551",
                  "plenigoStepId": "S_TTA1E7173120881553",
                  "accessRightUniqueId": "UNIQUE-ID",
                  "accessRightData": {
                    "specialAccessId": "1234SpecialAccess"
                  },
                  "itemType": "SUBSCRIPTION_ITEM",
                  "itemId": "7212"
                }
              ]
            }
          ]
        },
        "summary": "detail list"
      },
      "errorResultBadRequestExample": {
        "value": {
          "errorCode": 99400,
          "errorMessage": "Provided data cannot be processed.",
          "validationErrors": [
            {
              "field": "customerId",
              "error": "numeric",
              "value": "C1454646"
            }
          ]
        },
        "summary": "bad request"
      },
      "errorResultUnauthorizedExample": {
        "value": {
          "errorCode": 99015,
          "errorMessage": "Api token provided is not authorized."
        },
        "summary": "unauthorized"
      },
      "errorResultTooManyRequestsExample": {
        "value": {
          "errorCode": 99429,
          "errorMessage": "The rate limit for this endpoint is reached. Please try again later."
        },
        "summary": "too many requests"
      },
      "errorResultInternalErrorExample": {
        "value": {
          "errorCode": 99500,
          "errorMessage": "Currently we are not able to answer your request. We are working hard to resolve this problem.   "
        },
        "summary": "not found"
      },
      "accessRightDataExample": {
        "value": {
          "customerId": "100003",
          "customerBlocked": false,
          "createdDate": "2019-01-01T07:53:23.450961Z",
          "createdBy": "PLENIGO",
          "createdByType": "SYSTEM",
          "changedDate": "2019-01-01T07:53:23.450961Z",
          "changedBy": "PLENIGO",
          "changedByType": "SYSTEM",
          "items": [
            {
              "createdDate": "2019-01-01T07:53:23.450961Z",
              "createdBy": "PLENIGO",
              "createdByType": "SYSTEM",
              "changedDate": "2019-01-01T07:53:23.450961Z",
              "changedBy": "PLENIGO",
              "changedByType": "SYSTEM",
              "lifeTimeStart": "2019-01-01T07:53:23.450961Z",
              "lifeTimeEnd": "2020-01-01T07:53:23.450961Z",
              "accessTimeStart": "06:00:00",
              "accessTimeEnd": "18:00:00",
              "maxCacheDate": "2020-01-01T07:53:23.450961Z",
              "data": {
                "specialId": "1234Special"
              },
              "blocked": false,
              "productId": "P_TTA1E7173120881551",
              "plenigoOfferId": "O_TTA1E7173120881552",
              "plenigoProductId": "P_TTA1E7173120881551",
              "plenigoStepId": "S_TTA1E7173120881553",
              "accessRightUniqueId": "UNIQUE-ID",
              "accessRightData": {
                "specialAccessId": "1234SpecialAccess"
              },
              "itemType": "SUBSCRIPTION_ITEM",
              "itemId": "7212"
            }
          ]
        },
        "summary": "details"
      },
      "errorResultNotFoundExample": {
        "value": {
          "errorCode": 99404,
          "errorMessage": "Entity for given id does not exist."
        },
        "summary": "not found"
      },
      "accessRightCreationExample": {
        "value": {
          "lifeTimeStart": "2019-01-01T07:53:23.450961Z",
          "lifeTimeEnd": "2020-01-01T07:53:23.450961Z",
          "accessTimeStart": "06:00:00",
          "accessTimeEnd": "18:00:00",
          "maxCacheDate": "2020-01-01T07:53:23.450961Z",
          "data": {
            "specialId": "1234Special"
          },
          "blocked": false
        },
        "summary": "creation"
      },
      "successStatusExample": {
        "value": {
          "success": true
        },
        "summary": "status"
      },
      "accessRightDataGrantedExample": {
        "value": {
          "customerId": "100003",
          "customerBlocked": false,
          "accessGranted": true,
          "items": [
            {
              "accessGranted": true,
              "createdDate": "2019-01-01T07:53:23.450961Z",
              "createdBy": "PLENIGO",
              "createdByType": "SYSTEM",
              "changedDate": "2019-01-01T07:53:23.450961Z",
              "changedBy": "PLENIGO",
              "changedByType": "SYSTEM",
              "lifeTimeStart": "2019-01-01T07:53:23.450961Z",
              "lifeTimeEnd": "2020-01-01T07:53:23.450961Z",
              "accessTimeStart": "06:00:00",
              "accessTimeEnd": "18:00:00",
              "maxCacheDate": "2020-01-01T07:53:23.450961Z",
              "data": {
                "specialId": "1234Special"
              },
              "blocked": false,
              "productId": "P_TTA1E7173120881551",
              "plenigoOfferId": "O_TTA1E7173120881552",
              "plenigoProductId": "P_TTA1E7173120881551",
              "plenigoStepId": "S_TTA1E7173120881553",
              "accessRightUniqueId": "UNIQUE-ID",
              "accessRightData": {
                "specialAccessId": "1234SpecialAccess"
              },
              "itemType": "SUBSCRIPTION_ITEM",
              "itemId": "7212"
            }
          ]
        },
        "summary": "permissions"
      },
      "costCentersExample": {
        "value": {
          "items": [
            {
              "costCenterId": 100001,
              "costCenter": "12345678",
              "description": "Default cost center",
              "shortDescription": "Default CC"
            }
          ]
        },
        "summary": "detail list"
      },
      "costCenterCreationExample": {
        "value": {
          "costCenter": "12345678",
          "description": "Default cost center",
          "shortDescription": "Default CC"
        },
        "summary": "detail"
      },
      "costCenterExample": {
        "value": {
          "costCenterId": 100001,
          "costCenter": "12345678",
          "description": "Default cost center",
          "shortDescription": "Default CC"
        },
        "summary": "detail"
      },
      "ledgersExample": {
        "value": {
          "items": [
            {
              "ledgerId": 100001,
              "title": "A ledger title",
              "description": "Default ledger description",
              "deliveryCommitmentAccount": "4400",
              "voucherDeliveryCommitmentAccount": "4401",
              "revenueAccount": "5000",
              "bankAccountAmazonPay": "2804",
              "bankAccountApplePay": "2805",
              "bankAccountBilling": "2800",
              "bankAccountCreditCard": "2802",
              "bankAccountGooglePay": "2806",
              "bankAccountPayPal": "2803",
              "bankAccountSepa": "2801",
              "creditLossAccount": "3670",
              "salesTax": "4800",
              "b2bDeliveryCommitmentAccount": "4402",
              "b2bVoucherDeliveryCommitmentAccount": "4403",
              "b2bRevenueAccount": "5001",
              "b2bBankAccountAmazonPay": "2814",
              "b2bBankAccountApplePay": "2815",
              "b2bBankAccountBilling": "2810",
              "b2bBankAccountCreditCard": "2812",
              "b2bBankAccountGooglePay": "2816",
              "b2bBankAccountPayPal": "2813",
              "b2bBankAccountSepa": "2811",
              "b2bCreditLossAccount": "3671",
              "b2bSalesTax": "4801"
            }
          ]
        },
        "summary": "detail list"
      },
      "ledgerCreationExample": {
        "value": {
          "title": "A ledger title",
          "description": "Default ledger description",
          "deliveryCommitmentAccount": "4400",
          "voucherDeliveryCommitmentAccount": "4401",
          "revenueAccount": "5000",
          "bankAccountAmazonPay": "2804",
          "bankAccountApplePay": "2805",
          "bankAccountBilling": "2800",
          "bankAccountCreditCard": "2802",
          "bankAccountGooglePay": "2806",
          "bankAccountPayPal": "2803",
          "bankAccountSepa": "2801",
          "creditLossAccount": "3670",
          "salesTax": "4800",
          "b2bDeliveryCommitmentAccount": "4402",
          "b2bVoucherDeliveryCommitmentAccount": "4403",
          "b2bRevenueAccount": "5001",
          "b2bBankAccountAmazonPay": "2814",
          "b2bBankAccountApplePay": "2815",
          "b2bBankAccountBilling": "2810",
          "b2bBankAccountCreditCard": "2812",
          "b2bBankAccountGooglePay": "2816",
          "b2bBankAccountPayPal": "2813",
          "b2bBankAccountSepa": "2811",
          "b2bCreditLossAccount": "3671",
          "b2bSalesTax": "4801"
        },
        "summary": "detail"
      },
      "ledgerExample": {
        "value": {
          "ledgerId": 100001,
          "title": "A ledger title",
          "description": "Default ledger description",
          "deliveryCommitmentAccount": "4400",
          "voucherDeliveryCommitmentAccount": "4401",
          "revenueAccount": "5000",
          "bankAccountAmazonPay": "2804",
          "bankAccountApplePay": "2805",
          "bankAccountBilling": "2800",
          "bankAccountCreditCard": "2802",
          "bankAccountGooglePay": "2806",
          "bankAccountPayPal": "2803",
          "bankAccountSepa": "2801",
          "creditLossAccount": "3670",
          "salesTax": "4800",
          "b2bDeliveryCommitmentAccount": "4402",
          "b2bVoucherDeliveryCommitmentAccount": "4403",
          "b2bRevenueAccount": "5001",
          "b2bBankAccountAmazonPay": "2814",
          "b2bBankAccountApplePay": "2815",
          "b2bBankAccountBilling": "2810",
          "b2bBankAccountCreditCard": "2812",
          "b2bBankAccountGooglePay": "2816",
          "b2bBankAccountPayPal": "2813",
          "b2bBankAccountSepa": "2811",
          "b2bCreditLossAccount": "3671",
          "b2bSalesTax": "4801"
        },
        "summary": "detail"
      },
      "taxCodesExample": {
        "value": {
          "items": [
            {
              "taxCodeId": 100001,
              "changedDate": "2019-03-21T17:32:12Z",
              "countryType": "SINGLE_COUNTRY",
              "countries": [
                "DE"
              ],
              "tax": 19,
              "analogTag": "A1901",
              "digitalTag": "D1901"
            }
          ]
        },
        "summary": "detail list"
      },
      "taxCodeCreationExample": {
        "value": {
          "countryType": "SINGLE_COUNTRY",
          "countries": [
            "DE"
          ],
          "tax": 19,
          "analogTag": "A1901",
          "digitalTag": "D1901"
        },
        "summary": "detail"
      },
      "taxCodeExample": {
        "value": {
          "taxCodeId": 100001,
          "changedDate": "2019-03-21T17:32:12Z",
          "countryType": "SINGLE_COUNTRY",
          "countries": [
            "DE"
          ],
          "tax": 19,
          "analogTag": "A1901",
          "digitalTag": "D1901"
        },
        "summary": "detail"
      },
      "activitiesExample": {
        "value": {
          "items": [
            {
              "id": 100001,
              "createdDate": "2019-01-01T07:53:23.450961Z",
              "createdBy": "PLENIGO",
              "createdByType": "SYSTEM",
              "changedDate": "2020-01-13",
              "changedBy": "P_UZV4L63ZBT",
              "changedByType": "MERCHANT",
              "customerId": "12701",
              "activityType": "SYSTEM_API",
              "jsonObjectType": "INVOICE_ADDRESS",
              "jsonObjectIdentifier": "100001",
              "oldObject": [
                {
                  "addressId": 100001,
                  "changedDate": "2019-03-21T17:32:12Z",
                  "type": "INVOICE",
                  "preferred": true,
                  "customerId": "100003",
                  "businessAddress": true,
                  "salutation": "MR",
                  "title": "",
                  "firstName": "John",
                  "lastName": "Doe",
                  "companyName": "ARAMARK Ltd.",
                  "additionalCompanyInfo": "Subdivision of World Ltd.",
                  "street": "Commercial Road",
                  "streetNumber": "30",
                  "additionalStreetInfo": "Level 5",
                  "postcode": "PO1 1AA",
                  "city": "Hampshire",
                  "country": "GB",
                  "vatNumber": "DE123456789"
                }
              ],
              "newObject": [
                {
                  "addressId": 100001,
                  "changedDate": "2019-03-21T17:32:12Z",
                  "type": "INVOICE",
                  "preferred": true,
                  "customerId": "100003",
                  "businessAddress": true,
                  "salutation": "MR",
                  "title": "Dr",
                  "firstName": "John",
                  "lastName": "Doe",
                  "companyName": "ARAMARK Ltd.",
                  "additionalCompanyInfo": "Subdivision of World Ltd.",
                  "street": "Commercial Road",
                  "streetNumber": "30",
                  "additionalStreetInfo": "Level 5",
                  "postcode": "PO1 1AA",
                  "city": "Hampshire",
                  "country": "GB",
                  "vatNumber": "DE123456789"
                }
              ],
              "reason": "DATA_CHANGED"
            }
          ]
        },
        "summary": "detail list"
      },
      "addressesExample": {
        "value": {
          "items": [
            {
              "addressId": 100001,
              "changedDate": "2019-03-21T17:32:12Z",
              "type": "INVOICE",
              "preferred": true,
              "customerId": "100003",
              "businessAddress": true,
              "salutation": "MR",
              "title": "Dr",
              "firstName": "John",
              "lastName": "Doe",
              "companyName": "ARAMARK Ltd.",
              "additionalCompanyInfo": "Subdivision of World Ltd.",
              "street": "Commercial Road",
              "streetNumber": "30",
              "additionalStreetInfo": "Level 5",
              "postcode": "PO1 1AA",
              "city": "Hampshire",
              "country": "GB",
              "vatNumber": "DE123456789"
            }
          ]
        },
        "summary": "detail list"
      },
      "addressCreationExample": {
        "value": {
          "type": "INVOICE",
          "preferred": true,
          "customerId": "100003",
          "businessAddress": true,
          "salutation": "MR",
          "title": "Dr",
          "firstName": "John",
          "lastName": "Doe",
          "companyName": "ARAMARK Ltd.",
          "additionalCompanyInfo": "Subdivision of World Ltd.",
          "street": "Commercial Road",
          "streetNumber": "30",
          "additionalStreetInfo": "Level 5",
          "postcode": "PO1 1AA",
          "city": "Hampshire",
          "country": "GB",
          "vatNumber": "DE123456789"
        },
        "summary": "creation"
      },
      "addressExample": {
        "value": {
          "addressId": 100001,
          "changedDate": "2019-03-21T17:32:12Z",
          "type": "INVOICE",
          "preferred": true,
          "customerId": "100003",
          "businessAddress": true,
          "salutation": "MR",
          "title": "Dr",
          "firstName": "John",
          "lastName": "Doe",
          "companyName": "ARAMARK Ltd.",
          "additionalCompanyInfo": "Subdivision of World Ltd.",
          "street": "Commercial Road",
          "streetNumber": "30",
          "additionalStreetInfo": "Level 5",
          "postcode": "PO1 1AA",
          "city": "Hampshire",
          "country": "GB",
          "vatNumber": "DE123456789"
        },
        "summary": "detail"
      },
      "addressChangeExample": {
        "value": {
          "preferred": true,
          "businessAddress": true,
          "salutation": "MR",
          "title": "Dr",
          "firstName": "John",
          "lastName": "Doe",
          "companyName": "ARAMARK Ltd.",
          "additionalCompanyInfo": "Subdivision of World Ltd.",
          "street": "Commercial Road",
          "streetNumber": "30",
          "additionalStreetInfo": "Level 5",
          "postcode": "PO1 1AA",
          "city": "Hampshire",
          "country": "GB",
          "vatNumber": "DE123456789"
        },
        "summary": "update"
      },
      "futureAddressesExample": {
        "value": {
          "items": [
            {
              "activationDate": "2019-03-21",
              "businessAddress": true,
              "salutation": "MR",
              "title": "Dr",
              "firstName": "John",
              "lastName": "Doe",
              "companyName": "ARAMARK Ltd.",
              "additionalCompanyInfo": "Subdivision of World Ltd.",
              "street": "Commercial Road",
              "streetNumber": "30",
              "additionalStreetInfo": "Level 5",
              "postcode": "PO1 1AA",
              "city": "Hampshire",
              "country": "GB",
              "vatNumber": "DE123456789"
            },
            {
              "activationDate": "2019-06-21",
              "businessAddress": true,
              "salutation": "MR",
              "title": "Dr",
              "firstName": "John",
              "lastName": "Doe",
              "companyName": "ARAMARK Ltd.",
              "additionalCompanyInfo": "Subdivision of World Ltd.",
              "street": "Commercial Road",
              "streetNumber": "32",
              "additionalStreetInfo": "Level 5",
              "postcode": "PO1 1AA",
              "city": "Hampshire",
              "country": "GB",
              "vatNumber": "DE123456789"
            }
          ]
        },
        "summary": "detail list"
      },
      "futureAddressCreationExample": {
        "value": {
          "businessAddress": true,
          "salutation": "MR",
          "title": "Dr",
          "firstName": "John",
          "lastName": "Doe",
          "companyName": "ARAMARK Ltd.",
          "additionalCompanyInfo": "Subdivision of World Ltd.",
          "street": "Commercial Road",
          "streetNumber": "30",
          "additionalStreetInfo": "Level 5",
          "postcode": "PO1 1AA",
          "city": "Hampshire",
          "country": "GB",
          "vatNumber": "DE123456789"
        },
        "summary": "creation"
      },
      "futureAddressExample": {
        "value": {
          "activationDate": "2019-03-21",
          "businessAddress": true,
          "salutation": "MR",
          "title": "Dr",
          "firstName": "John",
          "lastName": "Doe",
          "companyName": "ARAMARK Ltd.",
          "additionalCompanyInfo": "Subdivision of World Ltd.",
          "street": "Commercial Road",
          "streetNumber": "30",
          "additionalStreetInfo": "Level 5",
          "postcode": "PO1 1AA",
          "city": "Hampshire",
          "country": "GB",
          "vatNumber": "DE123456789"
        },
        "summary": "detail"
      },
      "errorResultExample": {
        "value": {
          "errorCode": 99000,
          "errorMessage": "Error message"
        },
        "summary": "generic error"
      },
      "analyticsCountResultExample": {
        "value": {
          "counts": [
            {
              "time": "2019-01-01T07:00:00Z",
              "amount": 17
            },
            {
              "time": "2019-01-02T07:00:00Z",
              "amount": 17
            }
          ]
        },
        "summary": "analytics count"
      },
      "analyticsPaymentMethodResultExample": {
        "value": {
          "counts": [
            {
              "time": "2019-01-01T07:00:00Z",
              "paymentMethod": "BANK_ACCOUNT",
              "amount": 14
            }
          ]
        },
        "summary": "payment method result"
      },
      "analyticsRevenueResultExample": {
        "value": {
          "revenues": [
            {
              "time": "2019-01-01T07:00:00Z",
              "sum": 17,
              "currency": "EUR"
            }
          ]
        },
        "summary": "revenue result"
      },
      "analyticsGroupResultExample": {
        "value": {
          "tooExpansive": 5,
          "worseContent": 10
        },
        "summary": "analytics result"
      },
      "analyticsPaymentPeriodsResultExample": {
        "value": {
          "counts": [
            {
              "time": "2019-01-01T07:00:00Z",
              "paymentMethod": "BANK_ACCOUNT",
              "failureReason": "CUSTOMER",
              "success": false,
              "amount": 14
            }
          ]
        },
        "summary": "payment periods result"
      },
      "analyticsTransactionsResultExample": {
        "value": {
          "counts": [
            {
              "time": "2019-01-01T07:00:00Z",
              "paymentMethod": "CREDIT_CARD",
              "paymentAction": "CREDIT_CARD_AUTHORIZATION",
              "paymentStatus": "SUCCESS",
              "amount": 14
            }
          ]
        },
        "summary": "transactions result"
      },
      "callbackLogEntriesExample": {
        "value": {
          "items": [
            {
              "callbackLogEntryId": 1230001,
              "createdDate": "2019-01-01T07:53:23.450961Z",
              "createdBy": "PLENIGO",
              "createdByType": "SYSTEM",
              "changedDate": "2019-01-01T07:53:23.450961Z",
              "changedBy": "PLENIGO",
              "changedByType": "SYSTEM",
              "entityType": "CUSTOMER",
              "callbackType": "CREATION",
              "entityVersion": "3.0",
              "entityId": "1240003",
              "success": false,
              "erroMsg": "Could not reach host https://www.example.com."
            }
          ]
        },
        "summary": "detail list"
      },
      "callbackLogEntryExample": {
        "value": {
          "callbackLogEntryId": 1230001,
          "createdDate": "2019-01-01T07:53:23.450961Z",
          "createdBy": "PLENIGO",
          "createdByType": "SYSTEM",
          "changedDate": "2019-01-01T07:53:23.450961Z",
          "changedBy": "PLENIGO",
          "changedByType": "SYSTEM",
          "entityType": "CUSTOMER",
          "callbackType": "CREATION",
          "entityVersion": "3.0",
          "entityId": "1240003",
          "success": false,
          "erroMsg": "Could not reach host https://www.example.com."
        },
        "summary": "detail"
      },
      "downloadsExample": {
        "value": {
          "items": [
            {
              "downloadId": 1230001,
              "uploadedDate": "2019-01-01T07:53:23.450961Z",
              "downloadType": "DELIVERY_LIST",
              "fileType": "CSV",
              "fileSize": 1924,
              "fileName": "delivery_list_2019_01_01"
            }
          ]
        },
        "summary": "detail list"
      },
      "downloadExample": {
        "value": {
          "downloadId": 1230001,
          "uploadedDate": "2019-01-01T07:53:23.450961Z",
          "downloadType": "DELIVERY_LIST",
          "fileType": "CSV",
          "fileSize": 1924,
          "fileName": "delivery_list_2019_01_01"
        },
        "summary": "detail"
      },
      "downloadFileExample": {
        "value": {
          "fileType": "CSV",
          "fileName": "Delivery list",
          "file": "biwgSm9naHVydCB1bmQgUXVhcms="
        },
        "summary": "details"
      },
      "buyWithVoucherExample": {
        "value": {
          "customerId": "10003",
          "customerIpAddress": "198.51.100.42",
          "voucherCode": "1234-5678-1234"
        },
        "summary": "voucher code usage"
      },
      "freeOrderExample": {
        "value": {
          "customerId": "10003",
          "customerIpAddress": "198.51.100.42",
          "offer": {
            "plenigoOfferId": "O_12341423124DF",
            "title": "free offer",
            "quantity": 1
          }
        },
        "summary": "free order purchase"
      },
      "preparePurchaseWithPlenigoProductAndLoginExample": {
        "value": {
          "customerIpAddress": "198.51.100.42",
          "items": [
            {
              "plenigoOfferId": "O_12341423124DF",
              "title": "offer 1",
              "quantity": 1
            },
            {
              "plenigoOfferId": "O_34234234234AB",
              "title": "offer 2",
              "quantity": 1
            }
          ]
        },
        "summary": "purchase preparation with plenigo offer"
      },
      "preparePurchaseWithPlenigoProductAndExternalCustomerExample": {
        "value": {
          "customerId": "10003",
          "customerIpAddress": "198.51.100.42",
          "items": [
            {
              "plenigoOfferId": "O_12341423124DF",
              "quantity": 1
            },
            {
              "plenigoOfferId": "O_34234234234AB",
              "quantity": 1
            }
          ]
        },
        "summary": "purchase preparation with plenigo offer and external managed customer"
      },
      "preparePurchaseWithPlenigoProductAndAdditionalDataExample": {
        "value": {
          "customerIpAddress": "198.51.100.42",
          "additionalData": {
            "affiliateId": "AID-32473",
            "partnerId": "PartnerOne",
            "sourceId": "https://www.example.com",
            "utm": {
              "source": "https://www.example.com",
              "medium": "https://www.example.com",
              "campaign": "product launch",
              "term": "something",
              "content": "Test1"
            },
            "data": {
              "specialId": "1234Special"
            }
          },
          "items": [
            {
              "plenigoOfferId": "O_12341423124DF",
              "quantity": 1
            },
            {
              "plenigoOfferId": "O_34234234234AB",
              "quantity": 1
            }
          ]
        },
        "summary": "purchase preparation with plenigo offer and additional data"
      },
      "preparePurchaseWithPlenigoProductAndPlenigoSessionExample": {
        "value": {
          "customerSession": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c",
          "customerIpAddress": "198.51.100.42",
          "items": [
            {
              "plenigoOfferId": "O_12341423124DF",
              "quantity": 1
            },
            {
              "plenigoOfferId": "O_34234234234AB",
              "quantity": 1
            }
          ]
        },
        "summary": "purchase preparation with plenigo offer and plenigo session"
      },
      "corporateAccountsDataExample": {
        "value": {
          "items": [
            {
              "corporateAccountId": 9310,
              "customerId": "100003",
              "title": "A new offer",
              "plenigoOfferId": "O_123456789123456789",
              "usersAmount": 5,
              "users": [
                {
                  "corporateAccountUserId": 9401,
                  "email": "wildflower@example.com",
                  "salutation": "MR",
                  "firstName": "John",
                  "lastName": "Doe",
                  "status": "ACTIVE",
                  "customerId": "100006",
                  "corporateAccountCode": "123456789123"
                }
              ],
              "accessRightItems": [
                {
                  "lifeTimeStart": "2019-01-01T07:53:23.450961Z",
                  "lifeTimeEnd": "2020-01-01T07:53:23.450961Z",
                  "accessTimeStart": "06:00:00",
                  "accessTimeEnd": "18:00:00",
                  "maxCacheDate": "2020-01-01T07:53:23.450961Z",
                  "data": {
                    "specialId": "1234Special"
                  },
                  "blocked": false,
                  "accessRightItemId": "P_TTA1E7173120881551",
                  "internAccessRightItemId": "P_TTA1E7173120881551",
                  "productId": "P_TTA1E7173120881551",
                  "plenigoOfferId": "O_TTA1E7173120881552",
                  "plenigoProductId": "P_TTA1E7173120881551",
                  "plenigoStepId": "S_TTA1E7173120881553",
                  "accessRightUniqueId": "UNIQUE-ID",
                  "itemType": "SUBSCRIPTION_ITEM",
                  "itemId": "7212"
                }
              ]
            }
          ]
        },
        "summary": "detail list"
      },
      "corporateAccountDataExample": {
        "value": {
          "corporateAccountId": 9310,
          "customerId": "100003",
          "title": "A new offer",
          "plenigoOfferId": "O_123456789123456789",
          "usersAmount": 5,
          "users": [
            {
              "corporateAccountUserId": 9401,
              "email": "wildflower@example.com",
              "salutation": "MR",
              "firstName": "John",
              "lastName": "Doe",
              "status": "INVITED",
              "corporateAccountCode": "1234567891234567"
            }
          ],
          "accessRightItems": [
            {
              "lifeTimeStart": "2019-01-01T07:53:23.450961Z",
              "lifeTimeEnd": "2020-01-01T07:53:23.450961Z",
              "accessTimeStart": "06:00:00",
              "accessTimeEnd": "18:00:00",
              "maxCacheDate": "2020-01-01T07:53:23.450961Z",
              "data": {
                "specialId": "1234Special"
              },
              "blocked": false,
              "accessRightItemId": "P_TTA1E7173120881551",
              "internAccessRightItemId": "P_TTA1E7173120881551",
              "productId": "P_TTA1E7173120881551",
              "plenigoOfferId": "O_TTA1E7173120881552",
              "plenigoProductId": "P_TTA1E7173120881551",
              "plenigoStepId": "S_TTA1E7173120881553",
              "accessRightUniqueId": "UNIQUE-ID",
              "itemType": "SUBSCRIPTION_ITEM",
              "itemId": "7212"
            }
          ]
        },
        "summary": "detail"
      },
      "corporateAccountUserDataExample": {
        "value": {
          "email": "wildflower@example.com",
          "salutation": "MR",
          "firstName": "John",
          "lastName": "Doe"
        },
        "summary": "creation"
      },
      "corporateAccountUserCodeDataExample": {
        "value": {
          "code": "1234-5678-9123-4567"
        },
        "summary": "creation"
      },
      "corporateAccountUserStatusDataExample": {
        "value": {
          "corporateAccountId": 9310,
          "plenigoOfferId": "O_123456789123456789",
          "status": "INVITED"
        },
        "summary": "creation"
      },
      "customersExample": {
        "value": {
          "items": [
            {
              "customerId": "100003",
              "username": "wild_flower",
              "email": "wildflower@example.com",
              "invoiceEmail": "wildflower-invoices@example.com",
              "birthday": "2001-03-21",
              "language": "de",
              "mobileNumber": "+14155552671",
              "status": "ACTIVATED"
            }
          ]
        },
        "summary": "detail list"
      },
      "customerCreationExample": {
        "value": {
          "customerId": "100003",
          "username": "wild_flower",
          "email": "wildflower@example.com",
          "invoiceEmail": "wildflower-invoices@example.com",
          "birthday": "2001-03-21",
          "language": "de",
          "mobileNumber": "+14155552671",
          "status": "ACTIVATED",
          "addresses": [
            {
              "type": "INVOICE",
              "preferred": true,
              "customerId": "100003",
              "businessAddress": true,
              "salutation": "MR",
              "title": "Dr",
              "firstName": "John",
              "lastName": "Doe",
              "companyName": "ARAMARK Ltd.",
              "additionalCompanyInfo": "Subdivision of World Ltd.",
              "street": "Commercial Road",
              "streetNumber": "30",
              "additionalStreetInfo": "Level 5",
              "postcode": "PO1 1AA",
              "city": "Hampshire",
              "country": "GB",
              "vatNumber": "DE123456789"
            }
          ],
          "data": {
            "myCustomerId": "1234CustomerId"
          }
        },
        "summary": "creation"
      },
      "customerCreationResultExample": {
        "value": {
          "customerId": "100003",
          "externalSystemId": "1748-E",
          "username": "wild_flower",
          "email": "wildflower@example.com",
          "salutation": "MR",
          "firstName": "John",
          "lastName": "Doe",
          "invoiceEmail": "wildflower-invoices@example.com",
          "birthday": "2001-03-21",
          "language": "de",
          "mobileNumber": "+14155552671",
          "status": "ACTIVATED",
          "changedDate": "2019-03-21T17:32:12Z",
          "registrationDate": "2019-03-21T17:32:12Z",
          "registrationSource": "www.example.com",
          "twoFactorEnabled": false,
          "addresses": [
            {
              "addressId": 10004,
              "type": "INVOICE",
              "preferred": true,
              "customerId": "100003",
              "businessAddress": true,
              "salutation": "MR",
              "title": "Dr",
              "firstName": "John",
              "lastName": "Doe",
              "companyName": "ARAMARK Ltd.",
              "additionalCompanyInfo": "Subdivision of World Ltd.",
              "street": "Commercial Road",
              "streetNumber": "30",
              "additionalStreetInfo": "Level 5",
              "postcode": "PO1 1AA",
              "city": "Hampshire",
              "country": "GB",
              "vatNumber": "DE123456789"
            }
          ],
          "data": {
            "myCustomerId": "1234CustomerId"
          }
        },
        "summary": "creation result"
      },
      "customerExample": {
        "value": {
          "customerId": "100003",
          "username": "wild_flower",
          "email": "wildflower@example.com",
          "invoiceEmail": "wildflower-invoices@example.com",
          "birthday": "2001-03-21",
          "language": "de",
          "mobileNumber": "+14155552671",
          "status": "ACTIVATED",
          "acceptedTerms": {
            "AEISLQ565BPITQ251O31": {
              "termId": 103300,
              "uniqueId": "V1.0",
              "acceptanceDate": "2020-03-21T17:32:12Z"
            }
          }
        },
        "summary": "detail"
      },
      "customerChangeExample": {
        "value": {
          "username": "wild_flower",
          "email": "wildflower@example.com",
          "invoiceEmail": "wildflower-invoices@example.com",
          "birthday": "2001-03-21",
          "language": "de",
          "mobileNumber": "+14155552671"
        },
        "summary": "update"
      },
      "additionalCustomerDataExample": {
        "value": {
          "data": {
            "myCustomerId": "1234CustomerId"
          }
        },
        "summary": "additional data"
      },
      "customerEmailExample": {
        "value": {
          "email": "email@example.com"
        },
        "summary": "contains a customer's email address"
      },
      "successStatusWithPromiseIdExample": {
        "value": {
          "success": true,
          "promiseId": "0ujsszgFvbiEr7CDgE3z8MAUPFt"
        },
        "summary": "status"
      },
      "invoicesExample": {
        "value": {
          "items": [
            {
              "invoiceId": 12200,
              "changedDate": "2019-03-21T17:32:12Z",
              "invoiceDate": "2019-03-21T17:32:12Z",
              "accumulatedPrice": 12,
              "currency": "EUR",
              "paymentMethod": "CREDIT_CARD",
              "paymentMetodId": 145,
              "invoiceCustomerId": 100003,
              "invoiceAddress": {
                "businessAddress": true,
                "salutation": "MR",
                "title": "Prince",
                "firstName": "Michael",
                "lastName": "Example",
                "companyName": "Example Ltd.",
                "additionalCompanyInfo": "London",
                "street": "King Street",
                "streetNumber": "4",
                "additionalStreetInfo": "Appartment 5",
                "postcode": "E-3245",
                "city": "London",
                "country": "GB",
                "vatNumber": "GB123456789"
              },
              "items": [
                {
                  "position": 1,
                  "title": "A simple cup",
                  "price": 12,
                  "tax": 19,
                  "taxCountry": "DE",
                  "quantity": 12,
                  "deliveryCustomerId": "100003",
                  "deliveryAddress": {
                    "businessAddress": true,
                    "salutation": "MR",
                    "title": "Prince",
                    "firstName": "Michael",
                    "lastName": "Example",
                    "companyName": "Example Ltd.",
                    "additionalCompanyInfo": "London",
                    "street": "King Street",
                    "streetNumber": "4",
                    "additionalStreetInfo": "Appartment 5",
                    "postcode": "E-3245",
                    "city": "London",
                    "country": "GB",
                    "vatNumber": "GB123456789"
                  }
                }
              ]
            }
          ]
        },
        "summary": "invoices"
      },
      "customerInvoiceEmailExample": {
        "value": {
          "invoiceEmail": "invoice@example.com"
        },
        "summary": "contains a customer's invoice email address"
      },
      "ordersExample": {
        "value": {
          "items": [
            {
              "orderId": 12200,
              "changedDate": "2019-03-21T17:32:12Z",
              "status": "DONE",
              "type": "ORDER",
              "orderDate": "2019-03-21T17:32:12Z",
              "accumulatedPrice": 12,
              "currency": "EUR",
              "paymentMethod": "PAYPAL",
              "paymentMethodId": 100231,
              "invoiceCustomerId": 100003,
              "invoiceAddress": {
                "businessAddress": true,
                "salutation": "MR",
                "title": "Dr",
                "firstName": "John",
                "lastName": "Doe",
                "companyName": "ARAMARK Ltd.",
                "additionalCompanyInfo": "Subdivision of World Ltd.",
                "street": "Commercial Road",
                "streetNumber": "30",
                "additionalStreetInfo": "Level 5",
                "postcode": "PO1 1AA",
                "city": "Hampshire",
                "country": "GB",
                "vatNumber": "DE123456789"
              },
              "items": [
                {
                  "position": 1,
                  "productId": "P_TTA1E7173120881551",
                  "plenigoOfferId": "O_MZA1E7173120881551",
                  "plenigoProductId": "P_TTA1E7173120881551",
                  "plenigoStepId": "S_DRLEE7173120881551",
                  "title": "A simple cup",
                  "taxType": "PHYSICALPRODUCT",
                  "price": 12,
                  "tax": 19,
                  "taxCountry": "DE",
                  "quantity": 12,
                  "deliveryCustomerId": 100003,
                  "deliveryAddress": {
                    "businessAddress": true,
                    "salutation": "MR",
                    "title": "Dr",
                    "firstName": "John",
                    "lastName": "Doe",
                    "companyName": "ARAMARK Ltd.",
                    "additionalCompanyInfo": "Subdivision of World Ltd.",
                    "street": "Commercial Road",
                    "streetNumber": "30",
                    "additionalStreetInfo": "Level 5",
                    "postcode": "PO1 1AA",
                    "city": "Hampshire",
                    "country": "GB",
                    "vatNumber": "DE123456789"
                  }
                }
              ]
            }
          ]
        },
        "summary": "detail list"
      },
      "paymentMethodsExample": {
        "value": {
          "amazonPayAccounts": [
            {
              "amazonPayAccountId": 100001,
              "changedDate": "2019-03-21T17:32:12Z",
              "customerId": "100003",
              "chargePermissionId": "25727275674275",
              "active": true,
              "preferred": true
            }
          ],
          "bankAccounts": [
            {
              "bankAccountId": 100001,
              "changedDate": "2019-03-21T17:32:12Z",
              "customerId": "100003",
              "owner": "John Doe",
              "iban": "DE19123412341234123412",
              "active": true,
              "preferred": true
            }
          ],
          "creditCards": [
            {
              "creditCardId": 100001,
              "changedDate": "2019-03-21T17:32:12Z",
              "customerId": "100003",
              "owner": "John Doe",
              "cardType": "MASTERCARD",
              "paymentProvider": "STRIPE",
              "providerToken": "C13487324913",
              "obfuscatedNumber": "132412432xxxxx1234",
              "validTo": "2019-07-01",
              "active": true,
              "preferred": true
            }
          ],
          "payPalAccounts": [
            {
              "payPalAccountId": 100001,
              "changedDate": "2019-03-21T17:32:12Z",
              "billingAgreementId": "B-1234124324124",
              "active": true,
              "preferred": true
            }
          ]
        },
        "summary": "detail list"
      },
      "customerStatusChangeExample": {
        "value": {
          "status": "BLOCKED"
        },
        "summary": "customer status change"
      },
      "subscriptionsExample": {
        "value": {
          "items": [
            {
              "subscriptionId": 9310,
              "changedDate": "2019-03-21T17:32:12Z",
              "startDate": "2019-02-01T17:32:12Z",
              "endDate": "2090-02-01TT17:32:12Z",
              "chainId": 9310,
              "plenigoOfferId": "O_MZA1E7173120881551",
              "invoiceCustomerId": "100003",
              "deliveryCustomerId": "100003",
              "term": 12,
              "termTimeSpan": "MONTH",
              "accountingPeriod": 1,
              "accountingPeriodTimeSpan": "MONTH",
              "cancellationPeriod": 1,
              "cancellationPeriodTimeSpan": "DAY",
              "currency": "EUR",
              "paymentMethod": "CREDIT_CARD",
              "paymentMethodId": 100230,
              "accessBlocked": false,
              "firstBookingDate": "2019-02-01",
              "lastBookingDate": "2019-08-01",
              "nextBookingDate": "2019-09-01",
              "status": "ACTIVE",
              "items": [
                {
                  "subscriptionItemId": 7212,
                  "productId": "P_TTA1E7173120881551",
                  "plenigoProductId": "P_TTA1E7173120881551",
                  "plenigoStepId": "S_DRLEE7173120881551",
                  "title": "Best monthly news",
                  "internalTitle": "Monthly newspaper",
                  "taxType": "NEWSPAPER",
                  "price": 9.99,
                  "priceIssueId": 12345,
                  "discountPercentage": 0,
                  "quantity": 1,
                  "status": "ACTIVE",
                  "packageTitle": "Best offer bundle",
                  "packageId": "AX20429MK3222",
                  "packageCancellationLocked": true,
                  "costCenter": "43400",
                  "accessRightUniqueId": "global-access"
                }
              ]
            }
          ]
        },
        "summary": "detail list"
      },
      "transactionsExample": {
        "value": {
          "items": [
            {
              "transactionId": "12341243123",
              "plenigoTransactionId": "1TCZCSdg0lFEGGG3JPbZODkZKG0",
              "sortKey": 20190321713212125000,
              "changedDate": "2019-03-21T17:32:12Z",
              "paymentProvider": "PAYPAL",
              "paymentMethod": "PAYPAL",
              "paymentAction": "PAYPAL_REFERENCE_TRANSACTION",
              "paymentStatus": "SUCCESS",
              "customerId": "12701",
              "amount": 12.9,
              "currency": "EUR"
            }
          ]
        },
        "summary": "detail list"
      },
      "customerCreditWalletsExample": {
        "value": {
          "items": [
            {
              "customerId": "42",
              "customerCreditWalletId": 5800001,
              "uniqueId": "company-wallet",
              "title": "Wallet of a customer",
              "availableCreditCount": 5
            }
          ]
        },
        "summary": "customer credit wallets"
      },
      "stripeCustomerCreationExample": {
        "value": {
          "stripeId": "cus_9s6XGDTHzA66Po"
        },
        "summary": "create a stripe customer connection"
      },
      "stripeCustomerExample": {
        "value": {
          "stripeId": "cus_9s6XGDTHzA66Po",
          "customerId": "12341234123"
        },
        "summary": "represents a plenigo stripe customer mapping"
      },
      "customerUsernameExample": {
        "value": {
          "username": "marryJ"
        },
        "summary": "contains a customer's username"
      },
      "orderImportsExample": {
        "value": {
          "items": [
            {
              "externalSystemId": "83432341",
              "plenigoOfferId": "O_MZA1E7173120881551",
              "invoiceCustomerId": "100003",
              "invoiceAddressId": 100003,
              "deliveryCustomerId": "100004",
              "deliveryAddressId": 100004,
              "quantity": 1,
              "startDate": "2019-03-21T17:32:12Z",
              "paymentMethod": "BILLING"
            }
          ]
        },
        "summary": "detail list"
      },
      "orderImportLogEntriesExample": {
        "value": {
          "items": [
            {
              "orderImportLogEntryId": 1230001,
              "changedDate": "2019-01-01T07:53:23.450961Z",
              "externalSystemId": "83432341",
              "plenigoOfferId": "O_MZA1E7173120881551",
              "success": false,
              "orderId": 0,
              "errorReason": "Order could not be imported.",
              "errorDetail": "Payment method is required."
            }
          ]
        },
        "summary": "detail list"
      },
      "orderImportLogEntryExample": {
        "value": {
          "orderImportLogEntryId": 1230001,
          "changedDate": "2019-01-01T07:53:23.450961Z",
          "externalSystemId": "83432341",
          "plenigoOfferId": "O_MZA1E7173120881551",
          "success": false,
          "orderId": 0,
          "errorReason": "Order could not be imported.",
          "errorDetail": "Payment method is required."
        },
        "summary": "detail"
      },
      "invoiceExample": {
        "value": {
          "invoiceId": 12200,
          "changedDate": "2019-03-21T17:32:12Z",
          "invoiceDate": "2019-03-21T17:32:12Z",
          "accumulatedPrice": 12,
          "currency": "EUR",
          "paymentMethod": "CREDIT_CARD",
          "paymentMetodId": 145,
          "invoiceCustomerId": 100003,
          "invoiceAddress": {
            "businessAddress": true,
            "salutation": "MR",
            "title": "Prince",
            "firstName": "Michael",
            "lastName": "Example",
            "companyName": "Example Ltd.",
            "additionalCompanyInfo": "London",
            "street": "King Street",
            "streetNumber": "4",
            "additionalStreetInfo": "Appartment 5",
            "postcode": "E-3245",
            "city": "London",
            "country": "GB",
            "vatNumber": "GB123456789"
          },
          "items": [
            {
              "position": 1,
              "title": "A simple cup",
              "price": 12,
              "tax": 19,
              "taxCountry": "DE",
              "quantity": 12,
              "deliveryCustomerId": "100003",
              "deliveryAddress": {
                "businessAddress": true,
                "salutation": "MR",
                "title": "Prince",
                "firstName": "Michael",
                "lastName": "Example",
                "companyName": "Example Ltd.",
                "additionalCompanyInfo": "London",
                "street": "King Street",
                "streetNumber": "4",
                "additionalStreetInfo": "Appartment 5",
                "postcode": "E-3245",
                "city": "London",
                "country": "GB",
                "vatNumber": "GB123456789"
              }
            }
          ]
        },
        "summary": "invoice"
      },
      "mailLogEntriesExample": {
        "value": {
          "items": [
            {
              "mailLogEntryId": 1230001,
              "changedDate": "2019-01-01T07:53:23.450961Z",
              "customerId": "83432341",
              "mailSettingsType": "EXTERNAL",
              "mailTemplateType": "CHANGE_EMAIL",
              "to": "receiver@example.com",
              "from": "merchant@example.com",
              "bcc": "copy@example.com",
              "replyTo": "support@example.com",
              "subject": "Your new email address",
              "success": false,
              "errorReason": "Mail could not be delivered.",
              "errorDetail": "Could not successfully deliver mail because mail box is full."
            }
          ]
        },
        "summary": "detail list"
      },
      "mailLogEntryExample": {
        "value": {
          "mailLogEntryId": 1230001,
          "changedDate": "2019-01-01T07:53:23.450961Z",
          "customerId": "83432341",
          "mailSettingsType": "EXTERNAL",
          "mailTemplateType": "CHANGE_EMAIL",
          "to": "receiver@example.com",
          "from": "merchant@example.com",
          "bcc": "copy@example.com",
          "replyTo": "support@example.com",
          "subject": "Your new email address",
          "success": false,
          "errorReason": "Mail could not be delivered.",
          "errorDetail": "Could not successfully deliver mail because mail box is full."
        },
        "summary": "detail"
      },
      "orderExample": {
        "value": {
          "orderId": 12200,
          "changedDate": "2019-03-21T17:32:12Z",
          "status": "DONE",
          "type": "ORDER",
          "orderDate": "2019-03-21T17:32:12Z",
          "accumulatedPrice": 12,
          "currency": "EUR",
          "purchaseOrderIndicator": "2019-03A1",
          "paymentMethod": "PAYPAL",
          "paymentMethodId": 100231,
          "invoiceCustomerId": 100003,
          "invoiceAddress": {
            "businessAddress": true,
            "salutation": "MR",
            "title": "Dr",
            "firstName": "John",
            "lastName": "Doe",
            "companyName": "ARAMARK Ltd.",
            "additionalCompanyInfo": "Subdivision of World Ltd.",
            "street": "Commercial Road",
            "streetNumber": "30",
            "additionalStreetInfo": "Level 5",
            "postcode": "PO1 1AA",
            "city": "Hampshire",
            "country": "GB",
            "vatNumber": "DE123456789"
          },
          "items": [
            {
              "position": 1,
              "productId": "P_TTA1E7173120881551",
              "plenigoOfferId": "O_MZA1E7173120881551",
              "plenigoProductId": "P_TTA1E7173120881551",
              "plenigoStepId": "S_DRLEE7173120881551",
              "title": "A simple cup",
              "taxType": "PHYSICALPRODUCT",
              "price": 12,
              "tax": 19,
              "taxCountry": "DE",
              "quantity": 12,
              "deliveryCustomerId": "100003",
              "deliveryAddress": {
                "businessAddress": true,
                "salutation": "MR",
                "title": "Dr",
                "firstName": "John",
                "lastName": "Doe",
                "companyName": "ARAMARK Ltd.",
                "additionalCompanyInfo": "Subdivision of World Ltd.",
                "street": "Commercial Road",
                "streetNumber": "30",
                "additionalStreetInfo": "Level 5",
                "postcode": "PO1 1AA",
                "city": "Hampshire",
                "country": "GB",
                "vatNumber": "DE123456789"
              }
            }
          ]
        },
        "summary": "detail"
      },
      "additionalOrderDataExample": {
        "value": {
          "affiliateId": "AID-32473",
          "partnerId": "PartnerOne",
          "sourceId": "https://www.example.com",
          "utm": {
            "source": "https://www.example.com",
            "medium": "https://www.example.com",
            "campaign": "product launch",
            "term": "something",
            "content": "Test1"
          },
          "data": {
            "specialId": "1234Special"
          }
        },
        "summary": "additional data"
      },
      "amazonPayAccountsExample": {
        "value": {
          "items": [
            {
              "amazonPayAccountId": 100001,
              "changedDate": "2019-03-21T17:32:12Z",
              "customerId": "100003",
              "chargePermissionId": "S02-7331650-8246451",
              "active": true,
              "preferred": true
            }
          ]
        },
        "summary": "detail list"
      },
      "amazonPayAccountCreationExample": {
        "value": {
          "chargePermissionId": "S02-7331650-8246451",
          "customerId": "100003",
          "createdAt": "2019-03-21T17:32:12Z",
          "updatedAt": "2019-03-21T17:32:12Z",
          "preferred": true
        },
        "summary": "creation"
      },
      "amazonPayAccountExample": {
        "value": {
          "amazonPayAccountId": 100001,
          "changedDate": "2019-03-21T17:32:12Z",
          "customerId": "100003",
          "chargePermissionId": "S02-7331650-8246451",
          "active": true,
          "preferred": true
        },
        "summary": "detail"
      },
      "amazonPayAccountChangeExample": {
        "value": {
          "chargePermissionId": "S02-7331650-8246451",
          "preferred": true
        },
        "summary": "update"
      },
      "bankAccountsExample": {
        "value": {
          "items": [
            {
              "bankAccountId": 100001,
              "createdDate": "2019-01-01T07:53:23.450961Z",
              "createdBy": "PLENIGO",
              "createdByType": "SYSTEM",
              "changedDate": "2019-01-01T07:53:23.450961Z",
              "changedBy": "PLENIGO",
              "changedByType": "SYSTEM",
              "customerId": "100003",
              "owner": "John Doe",
              "iban": "GB19123412341234123412",
              "mandateId": "12342342",
              "mandateDate": "2019-03-21T17:32:12Z",
              "active": true,
              "preferred": true
            }
          ]
        },
        "summary": "detail list"
      },
      "bankAccountCreationExample": {
        "value": {
          "customerId": "100003",
          "owner": "John Doe",
          "iban": "GB19123412341234123412",
          "mandateId": "12342342",
          "mandateDate": "2019-03-21T17:32:12Z",
          "preferred": true
        },
        "summary": "creation"
      },
      "bankAccountExample": {
        "value": {
          "bankAccountId": 100001,
          "createdDate": "2019-01-01T07:53:23.450961Z",
          "createdBy": "PLENIGO",
          "createdByType": "SYSTEM",
          "changedDate": "2019-01-01T07:53:23.450961Z",
          "changedBy": "PLENIGO",
          "changedByType": "SYSTEM",
          "customerId": "100003",
          "owner": "John Doe",
          "iban": "GB19123412341234123412",
          "mandateId": "12342342",
          "mandateDate": "2019-03-21T17:32:12Z",
          "active": true,
          "preferred": true
        },
        "summary": "detail"
      },
      "creditCardsExample": {
        "value": {
          "items": [
            {
              "creditCardId": 100001,
              "createdDate": "2019-01-01T07:53:23.450961Z",
              "createdBy": "PLENIGO",
              "createdByType": "SYSTEM",
              "changedDate": "2019-01-01T07:53:23.450961Z",
              "changedBy": "PLENIGO",
              "changedByType": "SYSTEM",
              "customerId": "100003",
              "owner": "John Doe",
              "cardType": "MASTERCARD",
              "paymentProvider": "STRIPE",
              "providerToken": "C13487324913",
              "obfuscatedNumber": "132412432xxxxx1234",
              "validTo": "2019-07-01",
              "active": true,
              "preferred": true
            }
          ]
        },
        "summary": "detail list"
      },
      "creditCardCreationExample": {
        "value": {
          "customerId": "100003",
          "owner": "John Doe",
          "cardType": "MASTERCARD",
          "providerToken": "C13487324913",
          "obfuscatedNumber": "132412432xxxxx1234",
          "validTo": "2019-07-01",
          "preferred": true
        },
        "summary": "creation"
      },
      "creditCardExample": {
        "value": {
          "creditCardId": 100001,
          "createdDate": "2019-01-01T07:53:23.450961Z",
          "createdBy": "PLENIGO",
          "createdByType": "SYSTEM",
          "changedDate": "2019-01-01T07:53:23.450961Z",
          "changedBy": "PLENIGO",
          "changedByType": "SYSTEM",
          "customerId": "100003",
          "owner": "John Doe",
          "cardType": "MASTERCARD",
          "paymentProvider": "STRIPE",
          "providerToken": "C13487324913",
          "obfuscatedNumber": "132412432xxxxx1234",
          "validTo": "2019-07-01",
          "active": true,
          "preferred": true
        },
        "summary": "detail"
      },
      "creditCardChangeExample": {
        "value": {
          "owner": "John Doe",
          "cardType": "MASTERCARD",
          "providerToken": "C13487324913",
          "obfuscatedNumber": "132412432xxxxx1234",
          "validTo": "2019-07-01",
          "preferred": true
        },
        "summary": "update"
      },
      "iDealAccountsExample": {
        "value": {
          "items": [
            {
              "iDealAccountId": 100001,
              "changedDate": "2019-03-21T17:32:12Z",
              "customerId": "100003",
              "owner": "John Doe",
              "obfuscatedIban": "GB19123412341234123412",
              "pspAccountId": "pk_TYooMQauvdEDq54NiTphI7jx",
              "fingerprint": "Xt5EWLLDS7FJjR1c",
              "active": true
            }
          ]
        },
        "summary": "detail list"
      },
      "iDealAccountChangeExample": {
        "value": {
          "owner": "John Doe",
          "obfuscatedIban": "GB19123412341234123412",
          "pspAccountId": "pk_TYooMQauvdEDq54NiTphI7jx",
          "fingerprint": "Xt5EWLLDS7FJjR1c"
        },
        "summary": "creation"
      },
      "iDealAccountExample": {
        "value": {
          "iDealAccountId": 100001,
          "changedDate": "2019-03-21T17:32:12Z",
          "customerId": "100003",
          "owner": "John Doe",
          "obfuscatedIban": "GB19123412341234123412",
          "pspAccountId": "pk_TYooMQauvdEDq54NiTphI7jx",
          "fingerprint": "Xt5EWLLDS7FJjR1c",
          "active": true
        },
        "summary": "detail"
      },
      "payPalAccountsExample": {
        "value": {
          "items": [
            {
              "payPalAccountId": 100001,
              "changedDate": "2019-03-21T17:32:12Z",
              "billingAgreementId": "B-1234124324124",
              "active": true,
              "preferred": true
            }
          ]
        },
        "summary": "detail list"
      },
      "payPalAccountCreationExample": {
        "value": {
          "customerId": "83432341",
          "billingAgreementId": "B-1234124324124",
          "preferred": true
        },
        "summary": "detail"
      },
      "payPalAccountExample": {
        "value": {
          "billingAgreementId": "B-1234124324124",
          "changedDate": "2019-03-21T17:32:12Z",
          "active": true,
          "preferred": true
        },
        "summary": "detail"
      },
      "postFinanceAccountsExample": {
        "value": {
          "items": [
            {
              "postFinanceAccountId": 100001,
              "changedDate": "2019-03-21T17:32:12Z",
              "customerId": "100003",
              "chargePermissionId": "S02-7331650-8246451",
              "active": true,
              "preferred": true
            }
          ]
        },
        "summary": "detail list"
      },
      "postFinanceAccountCreationExample": {
        "value": {
          "chargePermissionId": "S02-7331650-8246451",
          "customerId": "100003",
          "createdAt": "2019-03-21T17:32:12Z",
          "updatedAt": "2019-03-21T17:32:12Z",
          "preferred": true
        },
        "summary": "creation"
      },
      "postFinanceAccountExample": {
        "value": {
          "postFinanceAccountId": 100001,
          "changedDate": "2019-03-21T17:32:12Z",
          "customerId": "100003",
          "chargePermissionId": "S02-7331650-8246451",
          "active": true,
          "preferred": true
        },
        "summary": "detail"
      },
      "twintAccountsExample": {
        "value": {
          "items": [
            {
              "twintAccountId": 100001,
              "changedDate": "2019-03-21T17:32:12Z",
              "customerId": "100003",
              "chargePermissionId": "S02-7331650-8246451",
              "active": true,
              "preferred": true
            }
          ]
        },
        "summary": "detail list"
      },
      "twintAccountCreationExample": {
        "value": {
          "chargePermissionId": "S02-7331650-8246451",
          "customerId": "100003",
          "createdAt": "2019-03-21T17:32:12Z",
          "updatedAt": "2019-03-21T17:32:12Z",
          "preferred": true
        },
        "summary": "creation"
      },
      "twintAccountExample": {
        "value": {
          "twintAccountId": 100001,
          "changedDate": "2019-03-21T17:32:12Z",
          "customerId": "100003",
          "chargePermissionId": "S02-7331650-8246451",
          "active": true,
          "preferred": true
        },
        "summary": "detail"
      },
      "processDataExample": {
        "value": {
          "designs": {
            "backgroundColor": "#d92020",
            "firstColor": "#0e30dd",
            "secondColor": "#18e71f",
            "font": "",
            "fontColor": "#322f2f",
            "linkColor": "#000000",
            "snippetCss": "body {\\r\\n    color: green;\\r\\n}\\r\\nbutton {\\r\\n    background: red;\\r\\n    color: white;\\r\\n}",
            "snippetJavaScript": ""
          },
          "settings": {
            "tokenType": "EMAIL",
            "tokenSmsCountries": [],
            "allowedDomains": "",
            "ssoName": "NONE",
            "ssoRecheckTerms": true,
            "ssoOptIn": false,
            "checkoutOptIn": false,
            "invoiceAddressRequired": true,
            "deliveryAddressRequired": true,
            "forceUsername": true,
            "maxSessions": 1,
            "additionalCheckoutText": "",
            "contractorText": "",
            "ssoOptInText": "I want all newsletters.",
            "checkoutOptInText": "",
            "ssoTermText": "Term text",
            "checkoutTermText": "Term text"
          }
        },
        "summary": "process detail"
      },
      "registrationVerificationEmailExample": {
        "value": {
          "token": "0ujsszwN8NRY24YaXiTIE2VWDTS",
          "companyId": "aHgTmlZgnSQ6LpzkRGvK",
          "nextStep": "EMAIL",
          "verificationToken": "123456"
        },
        "summary": "registration verification via email"
      },
      "registrationVerificationSmsExample": {
        "value": {
          "token": "0ujsszwN8NRY24YaXiTIE2VWDTS",
          "companyId": "aHgTmlZgnSQ6LpzkRGvK",
          "nextStep": "SMS",
          "verificationToken": "123456"
        },
        "summary": "registration verification via SMS"
      },
      "customerSessionTokenExample": {
        "value": {
          "customerSession": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
        },
        "summary": "customer session"
      },
      "loginWithTwoFactorExample": {
        "value": {
          "token": "0ujsszwN8NRY24YaXiTIE2VWDTS",
          "companyId": "aHgTmlZgnSQ6LpzkRGvK",
          "nextStep": "TWO_FACTOR"
        },
        "summary": "two factor required"
      },
      "loginWithPasswordResetExample": {
        "value": {
          "token": "0ujsszwN8NRY24YaXiTIE2VWDTS",
          "companyId": "aHgTmlZgnSQ6LpzkRGvK",
          "nextStep": "RESET_PASSWORD"
        },
        "summary": "password reset required"
      },
      "loginWithAdditionalDataExample": {
        "value": {
          "token": "0ujsszwN8NRY24YaXiTIE2VWDTS",
          "companyId": "aHgTmlZgnSQ6LpzkRGvK",
          "nextStep": "ADDITIONAL_DATA",
          "additionalInformation": {
            "USERNAME": true,
            "NAME": true,
            "TERM": "Newest terms to accept"
          }
        },
        "summary": "additional data needed"
      },
      "sessionLimitReachedExample": {
        "value": {
          "activeSessions": {
            "items": [
              {
                "sessionId": "93jsszwN8NRY24YaXiTIE2VWDMM",
                "os": "Windows 10",
                "browser": "Firefox",
                "createdAt": "2019-03-21T17:32:12Z"
              },
              {
                "sessionId": "63jsszwN8NRY24YaXiTIE2VWDZZ",
                "os": "Windows 10",
                "browser": "Chrome",
                "createdAt": "2020-02-21T17:32:12Z"
              }
            ]
          },
          "removalToken": "2ujsszwN8NRY24YaXiTIE2VWDTE"
        },
        "summary": "limit of active sessions reached"
      },
      "customerDataExample": {
        "value": {
          "stepToken": "0ujsszwN8NRY24YaXiTIE2VWDTS",
          "username": "user1",
          "firstName": "John",
          "lastName": "Doe",
          "browser": "Firefox",
          "os": "Windows 10",
          "source": "Web",
          "sourceUrl": "https://www.example.com",
          "ipAddress": "127.0.0.1",
          "country": "DE"
        },
        "summary": "additional customer data"
      },
      "passwordForgottenEmailExample": {
        "value": {
          "email": "test@example.com",
          "language": "de",
          "browser": "Firefox",
          "os": "Windows 10",
          "source": "Web",
          "sourceUrl": "https://www.example.com",
          "ipAddress": "127.0.0.1",
          "country": "DE"
        },
        "summary": "password reset via email"
      },
      "passwordForgottenUsernameExample": {
        "value": {
          "username": "user1",
          "language": "de",
          "browser": "Firefox",
          "os": "Windows 10",
          "source": "Web",
          "sourceUrl": "https://www.example.com",
          "ipAddress": "127.0.0.1",
          "country": "DE"
        },
        "summary": "password reset via username"
      },
      "passwordForgottenNextStepExample": {
        "value": {
          "token": "0ujsszwN8NRY24YaXiTIE2VWDTS",
          "companyId": "aHgTmlZgnSQ6LpzkRGvK",
          "nextStep": "VERIFY_TOKEN",
          "verificationToken": "123456"
        },
        "summary": "customer reset started"
      },
      "passwordForgottenResendTokenExample": {
        "value": {
          "token": "0ujsszwN8NRY24YaXiTIE2VWDTS",
          "browser": "Firefox",
          "os": "Windows 10",
          "source": "Web",
          "sourceUrl": "https://www.example.com",
          "ipAddress": "127.0.0.1",
          "country": "DE"
        },
        "summary": "resend password mail"
      },
      "passwordForgottenPasswordResetStepExample": {
        "value": {
          "token": "0ujsszwN8NRY24YaXiTIE2VWDTS",
          "companyId": "aHgTmlZgnSQ6LpzkRGvK",
          "nextStep": "RESET_PASSWORD"
        },
        "summary": "show password reset form"
      },
      "passwordForgottenResendTwoFactorStepExample": {
        "value": {
          "token": "0ujsszwN8NRY24YaXiTIE2VWDTS",
          "companyId": "aHgTmlZgnSQ6LpzkRGvK",
          "nextStep": "TWO_FACTOR"
        },
        "summary": "two factor required"
      },
      "passwordForgottenAdditionalDataExample": {
        "value": {
          "token": "0ujsszwN8NRY24YaXiTIE2VWDTS",
          "companyId": "aHgTmlZgnSQ6LpzkRGvK",
          "nextStep": "ADDITIONAL_DATA",
          "additionalInformation": {
            "USERNAME": true,
            "NAME": true,
            "TERM": "Newest terms to accept"
          }
        },
        "summary": "additional data needed"
      },
      "productAccessRightsExample": {
        "value": {
          "items": [
            {
              "accessRightId": 2000,
              "title": "A new access right",
              "uniqueId": "accessRight",
              "description": "Access right",
              "additionalData": {
                "specialAccessId": "1234SpecialAccess"
              }
            }
          ]
        },
        "summary": "detail list"
      },
      "productAccessRightExample": {
        "value": {
          "accessRightId": 2000,
          "title": "A new access right",
          "uniqueId": "accessRight",
          "description": "Access right",
          "additionalData": {
            "specialAccessId": "1234SpecialAccess"
          }
        },
        "summary": "detail"
      },
      "appStoreOffersExample": {
        "value": {
          "items": [
            {
              "appStoreOfferId": 49000,
              "storeType": "PLAYSTORE",
              "internalTitle": "Google Playstore product",
              "description": "This is our most sold Playstore product.",
              "productId": "SKU1",
              "fallback": true,
              "archived": false,
              "accessRightId": 23000
            }
          ]
        },
        "summary": "detail list"
      },
      "appStoreOfferExample": {
        "value": {
          "appStoreOfferId": 49000,
          "storeType": "PLAYSTORE",
          "internalTitle": "Google Playstore product",
          "description": "This is our most sold Playstore product.",
          "productId": "SKU1",
          "fallback": true,
          "archived": false,
          "accessRightId": 23000
        },
        "summary": "detail"
      },
      "crossSellingsExample": {
        "value": {
          "items": [
            {
              "crossSellingId": 18001,
              "internalTitle": "Update to best product",
              "description": "We offer our customers the best product.",
              "accessStart": "NOW",
              "optional": false,
              "sourceProductTags": [
                {
                  "productTagId": 270001,
                  "name": "Source product",
                  "category": "FLOW",
                  "description": "Identifies the source product."
                }
              ],
              "targetProductTags": [
                {
                  "productTagId": 270003,
                  "name": "Target product",
                  "category": "FLOW",
                  "description": "Identifies the target product."
                }
              ],
              "translations": [
                {
                  "language": "en",
                  "title": "You change to product XYZ",
                  "description": "Enjoy the advantages of product XYZ.",
                  "preferred": true
                }
              ]
            }
          ]
        },
        "summary": "detail list"
      },
      "crossSellingExample": {
        "value": {
          "crossSellingId": 18001,
          "internalTitle": "Update to best product",
          "description": "We offer our customers the best product.",
          "accessStart": "NOW",
          "optional": false,
          "sourceProductTags": [
            {
              "productTagId": 270001,
              "name": "Source product",
              "category": "FLOW",
              "description": "Identifies the source product."
            }
          ],
          "targetProductTags": [
            {
              "productTagId": 270003,
              "name": "Target product",
              "category": "FLOW",
              "description": "Identifies the target product."
            }
          ],
          "translations": [
            {
              "language": "en",
              "title": "You change to product XYZ",
              "description": "Enjoy the advantages of product XYZ.",
              "preferred": true
            }
          ]
        },
        "summary": "detail"
      },
      "deliveryListsExample": {
        "value": {
          "items": [
            {
              "deliveryListId": 37000,
              "title": "Cool magazine",
              "type": "ANALOG",
              "description": "The best magazine ever!",
              "fileNamePart": "cool_magazine.csv",
              "checkReminderReceivers": "test@example.com",
              "checkDateIntervalWeeks": 32,
              "enabled": true
            }
          ]
        },
        "summary": "detail list"
      },
      "deliveryListExample": {
        "value": {
          "deliveryListId": 37000,
          "title": "Cool magazine",
          "type": "ANALOG",
          "description": "The best magazine ever!",
          "fileNamePart": "cool_magazine.csv",
          "checkReminderReceivers": "test@example.com",
          "checkDateIntervalWeeks": 32,
          "enabled": true
        },
        "summary": "detail"
      },
      "deliveryListDatesExample": {
        "value": {
          "items": [
            {
              "deliveryListDateId": 37000,
              "title": "First edition 2019",
              "publishingDate": "2019-03-21",
              "deliveryDate": "2019-03-15",
              "redeliveryDate": "2019-03-20",
              "deliveryListCreatedAt": "2019-03-15T00:32:12Z",
              "redeliveryListCreatedAt": "2019-03-20T00:39:12Z"
            }
          ]
        },
        "summary": "detail list"
      },
      "productIvwRulesExample": {
        "value": {
          "items": [
            {
              "ivwRuleId": 17001,
              "title": "A new ivw rule",
              "internalTitle": "A new ivw rule",
              "description": "Ivw rule description",
              "ivwType": "ABONNEMENT",
              "ivwPriceType": "PERIOD_BASED",
              "fullPriceDivergenceUp": 10,
              "fullPriceDivergenceDown": 5,
              "fullPriceIssueId": 12001,
              "otherSalePriceDivergenceDown": 5,
              "otherSalePriceIssueId": 12001
            }
          ]
        },
        "summary": "detail list"
      },
      "productIvwRuleExample": {
        "value": {
          "ivwRuleId": 17001,
          "title": "A new ivw rule",
          "internalTitle": "A new ivw rule",
          "description": "Ivw rule description",
          "ivwType": "ABONNEMENT",
          "ivwPriceType": "PERIOD_BASED",
          "fullPriceDivergenceUp": 10,
          "fullPriceDivergenceDown": 5,
          "fullPriceIssueId": 12001,
          "otherSalePriceDivergenceDown": 5,
          "otherSalePriceIssueId": 12001
        },
        "summary": "detail"
      },
      "productMisuseRulesExample": {
        "value": {
          "items": [
            {
              "misuseRuleId": 17001,
              "internalTitle": "A new misuse rule",
              "description": "Misuse rule",
              "duration": 12,
              "durationTimespan": "MONTH",
              "plenigoOfferId": "O_123456789123456789",
              "translations": [
                {
                  "language": "en",
                  "title": "Already used",
                  "description": "Please buy this product instead.",
                  "preferred": true
                }
              ]
            }
          ]
        },
        "summary": "detail list"
      },
      "productMisuseRuleExample": {
        "value": {
          "misuseRuleId": 17001,
          "internalTitle": "A new misuse rule",
          "description": "Misuse rule",
          "duration": 12,
          "durationTimespan": "MONTH",
          "plenigoOfferId": "O_123456789123456789",
          "translations": [
            {
              "language": "en",
              "title": "Already used",
              "description": "Please buy this product instead.",
              "preferred": true
            }
          ]
        },
        "summary": "detail"
      },
      "offersExample": {
        "value": {
          "items": [
            {
              "offerId": 50001,
              "plenigoOfferId": "O_123456789123456789",
              "internalTitle": "A new offer",
              "pauseAble": false,
              "invoiceAddressMandatory": false,
              "deliveryAddressMandatory": false,
              "multiplePurchases": false,
              "misuseRuleId": 17001,
              "archived": false,
              "allowedPaymentMethods": [
                "CREDIT_CARD",
                "BANK_ACCOUNT"
              ],
              "connectedCompanySettings": [
                {
                  "connectionInfo": [
                    {
                      "companyId": "8XYM4WU2V6NJUM5LZ6C9"
                    }
                  ]
                }
              ],
              "translations": [
                {
                  "language": "en",
                  "title": "Best offer ever",
                  "description": "This product is a must have.",
                  "legalText": "If you buy it you have it forever. No way to come out.",
                  "summaryText": "Click the buy button now.",
                  "withdrawalInstruction": "You can withdrawal every time.",
                  "preferred": true,
                  "images": [
                    {
                      "imageType": "PRODUCT_CHECKOUT",
                      "name": "Cool image",
                      "url": "http://static.example.com/image.png",
                      "altText": "Alter text"
                    }
                  ]
                }
              ],
              "products": [
                {
                  "plenigoProductId": "P_123456789123456789",
                  "internalTitle": "A new product",
                  "position": 1,
                  "taxType": "BOOK",
                  "costCenterId": 1230000,
                  "option": false,
                  "subscription": true,
                  "amount": 1,
                  "accessRightId": 2000,
                  "steps": [
                    {
                      "plenigoStepId": "S_123456789123456789",
                      "position": 1,
                      "termPeriod": 3,
                      "termTimespan": "MONTH",
                      "durationPeriod": 12,
                      "durationTimespan": "MONTH",
                      "accountingPeriod": 1,
                      "accountingTimespan": "MONTH",
                      "cancellationPeriod": 1,
                      "cancellationTimespan": "DAY",
                      "priceIssueId": 2000,
                      "translations": null
                    }
                  ],
                  "translations": [
                    {
                      "language": "en",
                      "title": "Single product one",
                      "description": "This product is single product one.",
                      "legalText": "Buy single product one.",
                      "summaryText": "Press to buy.",
                      "withdrawalInstruction": "You can withdrawal every time.",
                      "preferred": true
                    }
                  ]
                },
                {
                  "plenigoProductId": "P_223456789123456789",
                  "internalTitle": "A new product",
                  "position": 2,
                  "taxType": "DIGITALNEWSPAPER",
                  "costCenterId": 1230002,
                  "option": false,
                  "subscription": true,
                  "amount": 1,
                  "accessRightId": 2000,
                  "steps": [
                    {
                      "plenigoStepId": "S_223456789123456789",
                      "position": 1,
                      "termPeriod": 3,
                      "termTimespan": "MONTH",
                      "durationPeriod": 12,
                      "durationTimespan": "MONTH",
                      "accountingPeriod": 1,
                      "accountingTimespan": "MONTH",
                      "cancellationPeriod": 1,
                      "cancellationTimespan": "DAY",
                      "priceIssueId": 0
                    }
                  ],
                  "translations": [
                    {
                      "language": "en",
                      "title": "Single product two",
                      "description": "This product is single product two.",
                      "legalText": "Buy single product two.",
                      "summaryText": "Press to buy.",
                      "withdrawalInstruction": "You can withdrawal every time.",
                      "preferred": true
                    }
                  ]
                }
              ],
              "productGroups": [
                {
                  "plenigoProductGroupId": "G_123456789123456789",
                  "internalTitle": "A new product group",
                  "translations": [
                    {
                      "language": "en",
                      "title": "Best product group ever",
                      "description": "This product group is a must have.",
                      "legalText": "If you buy it you have it forever. No way to come out of this group.",
                      "summaryText": "Click the buy button the group now.",
                      "withdrawalInstruction": "You can withdrawal every time.",
                      "preferred": true
                    }
                  ],
                  "products": [
                    {
                      "plenigoProductId": "P_323456789123456789",
                      "internalTitle": "A new product",
                      "position": 1,
                      "taxType": "DIGITALOFFER",
                      "costCenterId": 1230005,
                      "option": false,
                      "subscription": true,
                      "amount": 1,
                      "accessRightId": 0,
                      "steps": [
                        {
                          "plenigoStepId": "S_323456789123456789",
                          "position": 1,
                          "termPeriod": 3,
                          "termTimespan": "MONTH",
                          "durationPeriod": 12,
                          "durationTimespan": "MONTH",
                          "accountingPeriod": 1,
                          "accountingTimespan": "MONTH",
                          "cancellationPeriod": 1,
                          "cancellationTimespan": "DAY",
                          "priceIssueId": 2000
                        }
                      ],
                      "translations": [
                        {
                          "language": "en",
                          "title": "Group product one",
                          "description": "This product is group product one.",
                          "legalText": "Buy group product one.",
                          "summaryText": "Press to buy.",
                          "withdrawalInstruction": "You can withdrawal every time.",
                          "preferred": true
                        }
                      ]
                    },
                    {
                      "plenigoProductId": "P_423456789123456789",
                      "internalTitle": "A new product",
                      "position": 2,
                      "taxType": "DOWNLOAD",
                      "costCenterId": 1230007,
                      "option": false,
                      "subscription": true,
                      "amount": 1,
                      "accessRightId": 0,
                      "steps": [
                        {
                          "plenigoStepId": "S_423456789123456789",
                          "position": 1,
                          "termPeriod": 3,
                          "termTimespan": "MONTH",
                          "durationPeriod": 12,
                          "durationTimespan": "MONTH",
                          "accountingPeriod": 1,
                          "accountingTimespan": "MONTH",
                          "cancellationPeriod": 1,
                          "cancellationTimespan": "DAY",
                          "priceIssueId": 2000
                        }
                      ],
                      "translations": [
                        {
                          "language": "en",
                          "title": "Group product two",
                          "description": "This product is group product two.",
                          "legalText": "Buy group product two.",
                          "summaryText": "Press to buy.",
                          "withdrawalInstruction": "You can withdrawal every time.",
                          "preferred": true
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        "summary": "detail list"
      },
      "offerExample": {
        "value": {
          "offerId": 50001,
          "plenigoOfferId": "O_123456789123456789",
          "internalTitle": "A new offer",
          "pauseAble": false,
          "invoiceAddressMandatory": false,
          "deliveryAddressMandatory": false,
          "multiplePurchases": false,
          "misuseRuleId": 17001,
          "archived": false,
          "allowedPaymentMethods": [
            "CREDIT_CARD",
            "BANK_ACCOUNT"
          ],
          "connectedCompanySettings": [
            {
              "connectionInfo": [
                {
                  "companyId": "8XYM4WU2V6NJUM5LZ6C9"
                }
              ]
            }
          ],
          "translations": [
            {
              "language": "en",
              "title": "Best offer ever",
              "description": "This product is a must have.",
              "legalText": "If you buy it you have it forever. No way to come out.",
              "summaryText": "Click the buy button now.",
              "withdrawalInstruction": "You can withdrawal every time.",
              "preferred": true,
              "images": [
                {
                  "imageType": "PRODUCT_CHECKOUT",
                  "name": "Cool image",
                  "url": "http://static.example.com/image.png",
                  "altText": "Alter text"
                }
              ]
            }
          ],
          "products": [
            {
              "plenigoProductId": "P_123456789123456789",
              "internalTitle": "A new product",
              "position": 1,
              "taxType": "BOOK",
              "costCenterId": 123000,
              "ledgerId": 133000,
              "option": false,
              "subscription": true,
              "amount": 1,
              "accessRightId": 2000,
              "steps": [
                {
                  "plenigoStepId": "S_123456789123456789",
                  "position": 1,
                  "termPeriod": 3,
                  "termTimespan": "MONTH",
                  "durationPeriod": 12,
                  "durationTimespan": "MONTH",
                  "accountingPeriod": 1,
                  "accountingTimespan": "MONTH",
                  "cancellationPeriod": 1,
                  "cancellationTimespan": "DAY",
                  "priceIssueId": 2000,
                  "translations": null
                }
              ],
              "translations": [
                {
                  "language": "en",
                  "title": "Single product one",
                  "description": "This product is single product one.",
                  "legalText": "Buy single product one.",
                  "summaryText": "Press to buy.",
                  "withdrawalInstruction": "You can withdrawal every time.",
                  "preferred": true
                }
              ]
            },
            {
              "plenigoProductId": "P_223456789123456789",
              "internalTitle": "A new product",
              "position": 2,
              "taxType": "DIGITALNEWSPAPER",
              "costCenterId": 1230002,
              "option": false,
              "subscription": true,
              "amount": 1,
              "accessRightId": 2000,
              "steps": [
                {
                  "plenigoStepId": "S_223456789123456789",
                  "position": 1,
                  "termPeriod": 3,
                  "termTimespan": "MONTH",
                  "durationPeriod": 12,
                  "durationTimespan": "MONTH",
                  "accountingPeriod": 1,
                  "accountingTimespan": "MONTH",
                  "cancellationPeriod": 1,
                  "cancellationTimespan": "DAY",
                  "priceIssueId": 0
                }
              ],
              "translations": [
                {
                  "language": "en",
                  "title": "Single product two",
                  "description": "This product is single product two.",
                  "legalText": "Buy single product two.",
                  "summaryText": "Press to buy.",
                  "withdrawalInstruction": "You can withdrawal every time.",
                  "preferred": true
                }
              ]
            }
          ],
          "productGroups": [
            {
              "plenigoProductGroupId": "G_123456789123456789",
              "internalTitle": "A new product group",
              "translations": [
                {
                  "language": "en",
                  "title": "Best product group ever",
                  "description": "This product group is a must have.",
                  "legalText": "If you buy it you have it forever. No way to come out of this group.",
                  "summaryText": "Click the buy button the group now.",
                  "withdrawalInstruction": "You can withdrawal every time.",
                  "preferred": true
                }
              ],
              "products": [
                {
                  "plenigoProductId": "P_323456789123456789",
                  "internalTitle": "A new product",
                  "position": "1,",
                  "taxType": "DIGITALOFFER",
                  "costCenterId": 1230005,
                  "option": false,
                  "subscription": true,
                  "amount": 1,
                  "accessRightId": 0,
                  "steps": [
                    {
                      "plenigoStepId": "S_323456789123456789",
                      "position": 1,
                      "termPeriod": 3,
                      "termTimespan": "MONTH",
                      "durationPeriod": 12,
                      "durationTimespan": "MONTH",
                      "accountingPeriod": 1,
                      "accountingTimespan": "MONTH",
                      "cancellationPeriod": 1,
                      "cancellationTimespan": "DAY",
                      "priceIssueId": 2000
                    }
                  ],
                  "translations": [
                    {
                      "language": "en",
                      "title": "Group product one",
                      "description": "This product is group product one.",
                      "legalText": "Buy group product one.",
                      "summaryText": "Press to buy.",
                      "withdrawalInstruction": "You can withdrawal every time.",
                      "preferred": true
                    }
                  ]
                },
                {
                  "plenigoProductId": "P_423456789123456789",
                  "internalTitle": "A new product",
                  "position": 2,
                  "taxType": "DOWNLOAD",
                  "costCenterId": 1230007,
                  "option": false,
                  "subscription": true,
                  "amount": 1,
                  "accessRightId": 0,
                  "steps": [
                    {
                      "plenigoStepId": "S_423456789123456789",
                      "position": 1,
                      "termPeriod": 3,
                      "termTimespan": "MONTH",
                      "durationPeriod": 12,
                      "durationTimespan": "MONTH",
                      "accountingPeriod": 1,
                      "accountingTimespan": "MONTH",
                      "cancellationPeriod": 1,
                      "cancellationTimespan": "DAY",
                      "priceIssueId": 2000
                    }
                  ],
                  "translations": [
                    {
                      "language": "en",
                      "title": "Group product two",
                      "description": "This product is group product two.",
                      "legalText": "Buy group product two.",
                      "summaryText": "Press to buy.",
                      "withdrawalInstruction": "You can withdrawal every time.",
                      "preferred": true
                    }
                  ]
                }
              ]
            }
          ]
        },
        "summary": "detail"
      },
      "connectedOffersExample": {
        "value": {
          "connectedOffers": [
            {
              "companyName": "Test GmbH",
              "companyId": "DG0YZY25O9GMDIU5NN1Z",
              "offers": [
                {
                  "offerId": 50001,
                  "plenigoOfferId": "O_123456789123456789",
                  "internalTitle": "A new offer",
                  "pauseAble": false,
                  "invoiceAddressMandatory": false,
                  "deliveryAddressMandatory": false,
                  "multiplePurchases": false,
                  "misuseRuleId": 17001,
                  "archived": false,
                  "allowedPaymentMethods": [
                    "CREDIT_CARD",
                    "BANK_ACCOUNT"
                  ],
                  "connectedCompanySettings": [
                    {
                      "connectionInfo": [
                        {
                          "companyId": "8XYM4WU2V6NJUM5LZ6C9"
                        }
                      ]
                    }
                  ],
                  "translations": [
                    {
                      "language": "en",
                      "title": "Best offer ever",
                      "description": "This product is a must have.",
                      "legalText": "If you buy it you have it forever. No way to come out.",
                      "summaryText": "Click the buy button now.",
                      "withdrawalInstruction": "You can withdrawal every time.",
                      "preferred": true,
                      "images": [
                        {
                          "imageType": "PRODUCT_CHECKOUT",
                          "name": "Cool image",
                          "url": "http://static.example.com/image.png",
                          "altText": "Alter text"
                        }
                      ]
                    }
                  ],
                  "products": [
                    {
                      "plenigoProductId": "P_123456789123456789",
                      "internalTitle": "A new product",
                      "position": 1,
                      "taxType": "BOOK",
                      "costCenterId": 1230000,
                      "option": false,
                      "subscription": true,
                      "amount": 1,
                      "accessRightId": 2000,
                      "steps": [
                        {
                          "plenigoStepId": "S_123456789123456789",
                          "position": 1,
                          "termPeriod": 3,
                          "termTimespan": "MONTH",
                          "durationPeriod": 12,
                          "durationTimespan": "MONTH",
                          "accountingPeriod": 1,
                          "accountingTimespan": "MONTH",
                          "cancellationPeriod": 1,
                          "cancellationTimespan": "DAY",
                          "priceIssueId": 2000,
                          "translations": null
                        }
                      ],
                      "translations": [
                        {
                          "language": "en",
                          "title": "Single product one",
                          "description": "This product is single product one.",
                          "legalText": "Buy single product one.",
                          "summaryText": "Press to buy.",
                          "withdrawalInstruction": "You can withdrawal every time.",
                          "preferred": true
                        }
                      ]
                    },
                    {
                      "plenigoProductId": "P_223456789123456789",
                      "internalTitle": "A new product",
                      "position": 2,
                      "taxType": "DIGITALNEWSPAPER",
                      "costCenterId": 1230002,
                      "option": false,
                      "subscription": true,
                      "amount": 1,
                      "accessRightId": 2000,
                      "steps": [
                        {
                          "plenigoStepId": "S_223456789123456789",
                          "position": 1,
                          "termPeriod": 3,
                          "termTimespan": "MONTH",
                          "durationPeriod": 12,
                          "durationTimespan": "MONTH",
                          "accountingPeriod": 1,
                          "accountingTimespan": "MONTH",
                          "cancellationPeriod": 1,
                          "cancellationTimespan": "DAY",
                          "priceIssueId": 0
                        }
                      ],
                      "translations": [
                        {
                          "language": "en",
                          "title": "Single product two",
                          "description": "This product is single product two.",
                          "legalText": "Buy single product two.",
                          "summaryText": "Press to buy.",
                          "withdrawalInstruction": "You can withdrawal every time.",
                          "preferred": true
                        }
                      ]
                    }
                  ],
                  "productGroups": [
                    {
                      "plenigoProductGroupId": "G_123456789123456789",
                      "internalTitle": "A new product group",
                      "translations": [
                        {
                          "language": "en",
                          "title": "Best product group ever",
                          "description": "This product group is a must have.",
                          "legalText": "If you buy it you have it forever. No way to come out of this group.",
                          "summaryText": "Click the buy button the group now.",
                          "withdrawalInstruction": "You can withdrawal every time.",
                          "preferred": true
                        }
                      ],
                      "products": [
                        {
                          "plenigoProductId": "P_323456789123456789",
                          "internalTitle": "A new product",
                          "position": 1,
                          "taxType": "DIGITALOFFER",
                          "costCenterId": 1230005,
                          "option": false,
                          "subscription": true,
                          "amount": 1,
                          "accessRightId": 0,
                          "steps": [
                            {
                              "plenigoStepId": "S_323456789123456789",
                              "position": 1,
                              "termPeriod": 3,
                              "termTimespan": "MONTH",
                              "durationPeriod": 12,
                              "durationTimespan": "MONTH",
                              "accountingPeriod": 1,
                              "accountingTimespan": "MONTH",
                              "cancellationPeriod": 1,
                              "cancellationTimespan": "DAY",
                              "priceIssueId": 2000
                            }
                          ],
                          "translations": [
                            {
                              "language": "en",
                              "title": "Group product one",
                              "description": "This product is group product one.",
                              "legalText": "Buy group product one.",
                              "summaryText": "Press to buy.",
                              "withdrawalInstruction": "You can withdrawal every time.",
                              "preferred": true
                            }
                          ]
                        },
                        {
                          "plenigoProductId": "P_423456789123456789",
                          "internalTitle": "A new product",
                          "position": 2,
                          "taxType": "DOWNLOAD",
                          "costCenterId": 1230007,
                          "option": false,
                          "subscription": true,
                          "amount": 1,
                          "accessRightId": 0,
                          "steps": [
                            {
                              "plenigoStepId": "S_423456789123456789",
                              "position": 1,
                              "termPeriod": 3,
                              "termTimespan": "MONTH",
                              "durationPeriod": 12,
                              "durationTimespan": "MONTH",
                              "accountingPeriod": 1,
                              "accountingTimespan": "MONTH",
                              "cancellationPeriod": 1,
                              "cancellationTimespan": "DAY",
                              "priceIssueId": 2000
                            }
                          ],
                          "translations": [
                            {
                              "language": "en",
                              "title": "Group product two",
                              "description": "This product is group product two.",
                              "legalText": "Buy group product two.",
                              "summaryText": "Press to buy.",
                              "withdrawalInstruction": "You can withdrawal every time.",
                              "preferred": true
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        "summary": "detail list"
      },
      "priceCountrySegmentExample": {
        "value": {
          "priceCountrySegmentId": 12001,
          "title": "Europa light",
          "priority": 2,
          "description": "Europe with only a few countries",
          "countries": [
            "DE",
            "GB",
            "FR"
          ],
          "archived": false
        },
        "summary": "detail"
      },
      "priceIssuesExample": {
        "value": {
          "items": [
            {
              "priceIssueId": 10001,
              "title": "Price list number one",
              "description": "The first price list for our products",
              "archived": false,
              "priceSegments": [
                {
                  "priceSegmentId": 11001,
                  "price": 19.99,
                  "currency": "EUR",
                  "validFrom": "2019-03-21",
                  "worldSegment": false,
                  "priceCountrySegmentId": 12001,
                  "countrySegment": {
                    "priceCountrySegmentId": 12001,
                    "itle": "Europa light",
                    "description": "Europa with only a few countries",
                    "countries": [
                      "DE",
                      "FR"
                    ],
                    "archived": false
                  }
                }
              ]
            }
          ]
        },
        "summary": "detail list"
      },
      "priceIssueExample": {
        "value": {
          "priceIssueId": 10001,
          "title": "Price list number one",
          "description": "The first price list for our products",
          "archived": false,
          "priceSegments": [
            {
              "priceSegmentId": 11001,
              "price": 19.99,
              "currency": "EUR",
              "validFrom": "2019-03-21",
              "worldSegment": false,
              "countrySegment": {
                "priceCountrySegmentId": 12001,
                "title": "Europa light",
                "description": "Europa with only a few countries",
                "countries": [
                  "DE",
                  "FR"
                ],
                "archived": false
              }
            }
          ]
        },
        "summary": "detail"
      },
      "productTagsExample": {
        "value": {
          "items": [
            {
              "productTagId": 18001,
              "name": "Action Period",
              "category": "ANALYTICS",
              "description": "Identifies the first action period."
            }
          ]
        },
        "summary": "detail list"
      },
      "productTagExample": {
        "value": {
          "productTagId": 18001,
          "name": "Action Period",
          "category": "ANALYTICS",
          "description": "Identifies the first action period."
        },
        "summary": "detail"
      },
      "refundsExample": {
        "value": {
          "items": {
            "refundId": "12341243123",
            "changedDate": "2019-03-21T17:32:12Z",
            "customerId": 12701,
            "amount": 12.9,
            "currency": "EUR",
            "paymentProvider": "PAYPAL",
            "cancellationInvoiceId": 23457,
            "transactionId": "2Lx7Hfn42IoFuOiogiyDBxhiBC",
            "status": "SUCCESS",
            "paymentMethod": "PAYPAL",
            "paymentAction": "PAYPAL_REFERENCE_TRANSACTION",
            "paymentStatus": "SUCCESS",
            "statusHistory": {
              "status": "CLOSED",
              "changeDate": "2019-03-21T17:32:12Z"
            }
          }
        },
        "summary": "detail list"
      },
      "refundExample": {
        "value": {
          "refundId": "12341243123",
          "changedDate": "2019-03-21T17:32:12Z",
          "customerId": 12701,
          "amount": 12.9,
          "currency": "EUR",
          "paymentProvider": "PAYPAL",
          "cancellationInvoiceId": 23457,
          "transactionId": "2Lx7Hfn42IoFuOiogiyDBxhiBC",
          "status": "SUCCESS",
          "paymentMethod": "PAYPAL",
          "paymentAction": "PAYPAL_REFERENCE_TRANSACTION",
          "paymentStatus": "SUCCESS",
          "statusHistory": {
            "status": "CLOSED",
            "changeDate": "2019-03-21T17:32:12Z"
          }
        },
        "summary": "detail"
      },
      "refundStatusChangeExample": {
        "value": {
          "status": "CLOSED",
          "reason": "string"
        },
        "summary": "refund status"
      },
      "customerSessionExample": {
        "value": {
          "id": "0ujssxh0cECutqzMgbtXSGnjorm",
          "customerId": "6342000",
          "contractCompanyId": "xhzTmlZgnSQ6LpzkRGvK",
          "companyId": "aHgTmlZgnSQ6LpzkRGvK",
          "created": "2019-01-01T07:53:23.450961Z",
          "type": "CUSTOMER_SESSION"
        },
        "summary": "session"
      },
      "loggingDataExample": {
        "value": {
          "browser": "Mozilla/5.0 (Android 4.4; Mobile; rv:41.0) Gecko/41.0 Firefox/41.0",
          "os": "Android 4.4",
          "source": "www.example.com",
          "sourceUrl": "https://www.example.com/help",
          "ipAddress": "127.0.0.1",
          "country": "GB"
        },
        "summary": "logging data"
      },
      "transferTokenExample": {
        "value": {
          "transferToken": "0ujssxh0cECutqzMgbtXSGnjorm"
        },
        "summary": "transfer token"
      },
      "additionalDataSelectionsExample": {
        "value": {
          "additions": {
            "title": "Social Media",
            "description": "Social Media Source",
            "identifier": "sm",
            "category": "Checkout",
            "enabled": true,
            "values": {
              "Facebook": "fb",
              "Twitter": "tw"
            }
          }
        },
        "summary": "creation"
      },
      "customerOptInsExample": {
        "value": {
          "items": {
            "customerOptInId": 120302,
            "createdDate": "2019-01-01T07:53:23.450961Z",
            "createdBy": "PLENIGO",
            "createdByType": "SYSTEM",
            "changedDate": "2019-01-01T07:53:23.450961Z",
            "changedBy": "PLENIGO",
            "changedByType": "SYSTEM",
            "internalTitle": "Main opt in",
            "active": true,
            "uniqueId": "V1.0",
            "activationTime": "2020-03-21T17:32:12Z",
            "translations": [
              {
                "language": "DE",
                "ssoText": "Accept while registration",
                "checkoutText": "Accept while checkout",
                "preferred": true
              }
            ]
          }
        }
      },
      "customerOptInExample": {
        "value": {
          "customerOptInId": 120302,
          "createdDate": "2019-01-01T07:53:23.450961Z",
          "createdBy": "PLENIGO",
          "createdByType": "SYSTEM",
          "changedDate": "2019-01-01T07:53:23.450961Z",
          "changedBy": "PLENIGO",
          "changedByType": "SYSTEM",
          "internalTitle": "Main opt in",
          "active": true,
          "uniqueId": "V1.0",
          "activationTime": "2020-03-21T17:32:12Z",
          "translations": [
            {
              "language": "DE",
              "ssoText": "Accept while registration",
              "checkoutText": "Accept while checkout",
              "preferred": true
            }
          ]
        }
      },
      "blockedIbansExample": {
        "value": {
          "items": [
            {
              "blockedIbanId": 100001,
              "iban": "GB19123412341234123412",
              "description": "This iban is not allowed."
            }
          ]
        },
        "summary": "detail list"
      },
      "blockedIbanExample": {
        "value": {
          "blockedIbanId": 100001,
          "iban": "GB19123412341234123412",
          "description": "This iban is not allowed."
        },
        "summary": "get"
      },
      "customerCancellationReasonsExample": {
        "value": {
          "items": {
            "customerCancellationReasonId": 120302,
            "createdDate": "2019-01-01T07:53:23.450961Z",
            "createdBy": "PLENIGO",
            "createdByType": "SYSTEM",
            "changedDate": "2019-01-01T07:53:23.450961Z",
            "changedBy": "PLENIGO",
            "changedByType": "SYSTEM",
            "internalTitle": "Too expensive",
            "active": true,
            "priority": 1,
            "uniqueId": "too_expensive",
            "translations": [
              {
                "language": "DE",
                "text": "Too expensive",
                "preferred": true
              }
            ]
          }
        }
      },
      "customerCancellationReasonExample": {
        "value": {
          "customerCancellationReasonId": 120302,
          "createdDate": "2019-01-01T07:53:23.450961Z",
          "createdBy": "PLENIGO",
          "createdByType": "SYSTEM",
          "changedDate": "2019-01-01T07:53:23.450961Z",
          "changedBy": "PLENIGO",
          "changedByType": "SYSTEM",
          "internalTitle": "Too expensive",
          "active": true,
          "priority": 1,
          "uniqueId": "too_expensive",
          "translations": [
            {
              "language": "DE",
              "text": "Too expensive",
              "preferred": true
            }
          ]
        }
      },
      "customerTermsExample": {
        "value": {
          "items": {
            "customerTermId": 120302,
            "internalTitle": "Main term",
            "active": true,
            "uniqueId": "V1.0",
            "activationTime": "2020-03-21T17:32:12Z",
            "translations": [
              {
                "language": "DE",
                "ssoText": "Accept while registration",
                "checkoutText": "Accept while checkout",
                "preferred": true
              }
            ]
          }
        }
      },
      "customerTermExample": {
        "value": {
          "customerTermId": 120302,
          "internalTitle": "Main term",
          "active": true,
          "uniqueId": "V1.0",
          "activationTime": "2020-03-21T17:32:12Z",
          "translations": [
            {
              "language": "DE",
              "ssoText": "Accept while registration",
              "checkoutText": "Accept while checkout",
              "preferred": true
            }
          ]
        }
      },
      "textModulesExample": {
        "value": {
          "items": {
            "internalTitle": "Text module",
            "type": "HTML_TEXT",
            "translations": [
              {
                "language": "DE",
                "text": "text",
                "preferred": true
              }
            ]
          }
        }
      },
      "textModuleExample": {
        "value": {
          "textModuleId": 123000,
          "internalTitle": "Text module",
          "type": "HTML_TEXT",
          "translations": [
            {
              "language": "DE",
              "text": "text",
              "preferred": true
            }
          ]
        }
      },
      "sortTreeLeafsExample": {
        "value": {
          "items": [
            {
              "sortTreeLeafId": 9002,
              "name": "New products",
              "parentLeafId": 9001,
              "type": "OFFER"
            }
          ]
        },
        "summary": "detail list"
      },
      "sortTreeLeafExample": {
        "value": {
          "sortTreeLeafId": 9002,
          "name": "New products",
          "parentLeafId": 9001
        },
        "summary": "detail"
      },
      "sftpLogEntriesExample": {
        "value": {
          "items": [
            {
              "sftpLogEntryId": 49000,
              "changedDate": "2019-01-01T07:53:23.450961Z",
              "server": "example.com:22",
              "username": "user1",
              "targetDirectory": "target/directory/",
              "success": false,
              "errorMsg": "connection lost"
            }
          ]
        },
        "summary": "sftp log entries"
      },
      "sftpLogEntryExample": {
        "value": {
          "sftpLogEntryId": 49000,
          "changedDate": "2019-01-01T07:53:23.450961Z",
          "server": "example.com:22",
          "username": "user1",
          "targetDirectory": "target/directory/",
          "success": false,
          "errorMsg": "connection lost"
        },
        "summary": "sftp log entries"
      },
      "subscriptionExample": {
        "value": {
          "subscriptionId": 9310,
          "changedDate": "2019-03-21T17:32:12Z",
          "startDate": "2019-02-01T17:32:12Z",
          "endDate": "2090-02-01TT17:32:12Z",
          "chainId": 9310,
          "plenigoOfferId": "O_MZA1E7173120881551",
          "invoiceCustomerId": "100003",
          "deliveryCustomerId": "100003",
          "term": 12,
          "termTimeSpan": "MONTH",
          "accountingPeriod": 1,
          "accountingPeriodTimeSpan": "MONTH",
          "cancellationPeriod": 1,
          "cancellationPeriodTimeSpan": "DAY",
          "currency": "EUR",
          "paymentMethod": "CREDIT_CARD",
          "paymentMethodId": 100230,
          "accessBlocked": false,
          "firstBookingDate": "2019-02-01",
          "lastBookingDate": "2019-08-01",
          "nextBookingDate": "2019-09-01",
          "status": "ACTIVE",
          "items": [
            {
              "subscriptonItemId": 7212,
              "productId": "P_TTA1E7173120881551",
              "plenigoProductId": "P_TTA1E7173120881551",
              "plenigoStepId": "S_DRLEE7173120881551",
              "title": "Best monthly news",
              "internalTitle": "Monthly newspaper",
              "taxType": "NEWSPAPER",
              "price": 9.99,
              "priceIssueId": 12345,
              "discountPercentage": 0,
              "quantity": 1,
              "status": "ACTIVE",
              "packageTitle": "Best offer bundle",
              "packageId": "AX20429MK3222",
              "packageCancellationLocked": true,
              "costCenter": "43400",
              "accessRightUniqueId": "global-access"
            }
          ]
        },
        "summary": "detail"
      },
      "subscriptionChangeAccessDataExample": {
        "value": [
          {
            "accessBlocked": true
          }
        ],
        "summary": "update"
      },
      "subscriptionChangeAddressExample": {
        "value": {
          "addressId": 28023,
          "addressType": "INVOICE"
        },
        "summary": "change address"
      },
      "subscriptionChangeAnalogInvoiceDataExample": {
        "value": [
          {
            "analogInvoice": true
          }
        ],
        "summary": "update"
      },
      "subscriptionCancellationAtDataExample": {
        "value": {
          "cancellationDate": "2019-02-01"
        },
        "summary": "cancellation data"
      },
      "subscriptionCancellationDatesExample": {
        "value": {
          "items": [
            "2019-09-01",
            "2019-10-01",
            "2019-11-01"
          ]
        },
        "summary": "subscription cancellation dates"
      },
      "subscriptionChangeItemDiscountDataExample": {
        "value": [
          {
            "subscriptionItemId": 14536,
            "discountPercentage": 25
          }
        ],
        "summary": "update"
      },
      "subscriptionChangePaymentDataExample": {
        "value": [
          {
            "paymentMethod": "CREDIT_CARD",
            "paymentMethodId": 100230
          }
        ],
        "summary": "update"
      },
      "subscriptionChangeItemQuantityDataExample": {
        "value": [
          {
            "subscriptionItemId": 14536,
            "quantity": 4
          }
        ],
        "summary": "update"
      },
      "subscriptionChangeSuppressInvoiceSendingDataExample": {
        "value": [
          {
            "suppressInvoiceSending": true
          }
        ],
        "summary": "update"
      },
      "subscriptionPurchaseOrderIndicatorExample": {
        "value": {
          "purchaseOrderIndicator": "purchase order indicator"
        },
        "summary": "purchase order indicator"
      },
      "subscriptionPauseAtExample": {
        "value": {
          "startPauseDate": "2019-02-01",
          "endPauseDate": "2019-02-21"
        },
        "summary": "cancellation data"
      },
      "additionalChainDataExample": {
        "value": {
          "data": {
            "myChainInfo": "newChain"
          }
        },
        "summary": "additional data"
      },
      "subscriptionDeliveryDatesExample": {
        "value": {
          "items": [
            {
              "subscriptionDeliveryDateId": 7212,
              "createdDate": "2090-02-01TT17:32:12Z",
              "changedDate": "2090-02-01TT17:32:12Z",
              "title": "May delivery",
              "publishingDate": "2090-02-01TT17:32:12Z",
              "subscriptionId": 6362,
              "deliveryListId": 3456,
              "deliveryListDateId": 2455,
              "deliveryCustomerId": "100003",
              "deliveryAddressId": 12345
            }
          ]
        },
        "summary": "detail list"
      },
      "transactionExample": {
        "value": {
          "transactionId": "12341243123",
          "plenigoTransactionId": "1TCZCSdg0lFEGGG3JPbZODkZKG0",
          "sortKey": 20190321713212125000,
          "changedDate": "2019-03-21T17:32:12Z",
          "paymentProvider": "PAYPAL",
          "paymentMethod": "PAYPAL",
          "paymentAction": "PAYPAL_REFERENCE_TRANSACTION",
          "paymentStatus": "SUCCESS",
          "customerId": 12701,
          "amount": 12.9,
          "currency": "EUR"
        },
        "summary": "detail"
      },
      "campaignPageExample": {
        "value": {
          "items": [
            {
              "startingAfter": 0,
              "size": 10,
              "totalSize": 1,
              "campaigns": [
                {
                  "campaignId": 100003,
                  "changedDate": "2019-09-13",
                  "changedBy": "P_UZV4L63ZBT",
                  "changedByType": "MERCHANT",
                  "campaignName": "Autumn 2019",
                  "voucherType": "SINGLE",
                  "plenigoOfferId": "O_TTA1E7173120881551",
                  "status": "ACTIVE",
                  "startDate": "2019-09-13",
                  "channels": [
                    {
                      "channelId": 100002,
                      "changedDate": "2019-09-13",
                      "changedBy": "P_UZV4L63ZBT",
                      "changedByType": "MERCHANT",
                      "channelName": "Internet",
                      "customData": "Custom data",
                      "voucherAmount": 2,
                      "status": "ACTIVE"
                    }
                  ]
                }
              ]
            }
          ]
        },
        "summary": "detail list"
      },
      "campaignCreationExample": {
        "value": {
          "campaignName": "API Campaign Creation",
          "voucherType": "SINGLE",
          "plenigoOfferId": "O_TTA1E7173120881551",
          "startDate": "2019-12-16",
          "endDate": "2099-12-16",
          "channels": [
            {
              "channelName": "API Channel",
              "customData": "Custom data",
              "voucherAmount": 2
            }
          ]
        }
      },
      "campaignCreationResultExample": {
        "value": {
          "items": [
            {
              "campaignId": 100003,
              "changedDate": "2019-09-13",
              "changedBy": "P_UZV4L63ZBT",
              "changedByType": "MERCHANT",
              "campaignName": "Autumn 2019",
              "voucherType": "SINGLE",
              "plenigoOfferId": "O_TTA1E7173120881551",
              "status": "CREATING",
              "startDate": "2019-09-13",
              "channels": [
                {
                  "channelId": 100002,
                  "changedDate": "2019-09-13",
                  "changedBy": "P_UZV4L63ZBT",
                  "changedByType": "MERCHANT",
                  "channelName": "Internet",
                  "customData": "Custom data",
                  "voucherAmount": 2,
                  "status": "CREATING"
                }
              ]
            }
          ]
        },
        "summary": "detail"
      },
      "campaignExample": {
        "value": {
          "items": [
            {
              "campaignId": 100003,
              "changedDate": "2019-09-13",
              "changedBy": "P_UZV4L63ZBT",
              "changedByType": "MERCHANT",
              "campaignName": "Autumn 2019",
              "voucherType": "SINGLE",
              "plenigoOfferId": "O_TTA1E7173120881551",
              "status": "ACTIVE",
              "startDate": "2019-09-13",
              "channels": [
                {
                  "channelId": 100002,
                  "changedDate": "2019-09-13",
                  "changedBy": "P_UZV4L63ZBT",
                  "changedByType": "MERCHANT",
                  "channelName": "Internet",
                  "customData": "Custom data",
                  "voucherAmount": 2,
                  "status": "ACTIVE",
                  "vouchers": [
                    {
                      "id": 100007,
                      "createdDate": "2019-08-13",
                      "changedDate": "2019-09-13",
                      "changedBy": "P_UZV4L63ZBT",
                      "changedByType": "MERCHANT",
                      "voucherCode": "HNWN-2ETP-FA97",
                      "customData": "Custom data",
                      "status": "ACTIVE"
                    },
                    {
                      "id": 100008,
                      "createdDate": "2019-08-13",
                      "changedDate": "2019-09-23",
                      "changedBy": "Z2sZV4H63IBT",
                      "changedByType": "CUSTOMER",
                      "voucherCode": "NVUU-UG7A-T3C3",
                      "customData": "Custom data",
                      "status": "INACTIVE",
                      "orderId": 100001
                    }
                  ]
                }
              ]
            }
          ]
        },
        "summary": "detail"
      },
      "channelUpdateExample": {
        "value": {
          "channelName": "New API Channel",
          "customData": "New Custom data",
          "voucherAmount": 1
        }
      },
      "channelUpdateResultExample": {
        "value": {
          "items": [
            {
              "channelId": 100002,
              "contractCompanyId": "xhzTmlZgnSQ6LpzkRGvK",
              "companyId": "aHgTmlZgnSQ6LpzkRGvK",
              "changedDate": "2019-09-13",
              "changedBy": "P_UZV4L63ZBT",
              "changedByType": "MERCHANT",
              "channelName": "Internet",
              "customData": "Custom data",
              "voucherAmount": 2,
              "status": "UPDATING",
              "vouchers": [
                {
                  "id": 100007,
                  "createdDate": "2019-08-13",
                  "changedDate": "2019-09-13",
                  "changedBy": "P_UZV4L63ZBT",
                  "changedByType": "MERCHANT",
                  "voucherCode": "HNWN-2ETP-FA97",
                  "customData": "Custom data",
                  "status": "ACTIVE"
                }
              ]
            }
          ]
        },
        "summary": "detail"
      },
      "apiVoucherPageExample": {
        "value": {
          "items": [
            {
              "id": 100007,
              "createdDate": "2019-08-13",
              "changedDate": "2019-09-13",
              "changedBy": "P_UZV4L63ZBT",
              "changedByType": "MERCHANT",
              "voucherCode": "HNWN-2ETP-FA97",
              "customData": "Custom data",
              "status": "ACTIVE"
            },
            {
              "id": 100008,
              "createdDate": "2019-08-13",
              "changedDate": "2019-09-23",
              "changedBy": "Z2sZV4H63IBT",
              "changedByType": "CUSTOMER",
              "voucherCode": "NVUU-UG7A-T3C3",
              "customData": "Custom data",
              "status": "INACTIVE",
              "orderId": 100001
            }
          ]
        },
        "summary": "api voucher example"
      },
      "voucherStatusExample": {
        "value": [
          {
            "plenigoOfferId": "O_TTA1E7173120881551",
            "status": "ACTIVE"
          }
        ],
        "summary": "voucher status example"
      },
      "customerCreditWalletCreationExample": {
        "value": {
          "items": {
            "customerId": "42",
            "uniqueId": "company-wallet",
            "creditCount": 5
          }
        },
        "summary": "customer credit wallet creation"
      },
      "customerCreditWalletExample": {
        "value": {
          "items": {
            "customerId": "42",
            "customerCreditWalletId": 5800001,
            "uniqueId": "company-wallet",
            "title": "Wallet of a customer",
            "availableCreditCount": 5
          }
        },
        "summary": "customer credit wallet"
      },
      "creditUploadListExample": {
        "value": {
          "items": [
            {
              "customerId": "42",
              "creditUploadId": 6000001,
              "uploadDate": "2022-01-03T17:32:12Z",
              "uniqueId": "company-wallet",
              "creditsAdded": 5,
              "title": "Added by subscription",
              "itemType": "SUBSCRIPTION_ITEM",
              "itemId": 90300000
            }
          ]
        },
        "summary": "credit uploads"
      },
      "creditUsageListExample": {
        "value": {
          "items": [
            {
              "customerId": "42",
              "creditUsageId": 5900001,
              "usageDate": "2022-01-02T17:32:12Z",
              "uniqueId": "company-wallet",
              "creditsUsed": 2,
              "reason": "Usage of product one"
            }
          ]
        },
        "summary": "credit usages"
      },
      "externalCreditUploadExample": {
        "value": {
          "items": {
            "customerId": "42",
            "title": "New monthly credits",
            "uniqueId": "company-wallet",
            "creditCount": 2
          }
        },
        "summary": "credit upload"
      },
      "creditUsageBaseExample": {
        "value": {
          "items": {
            "customerId": "42",
            "uniqueId": "company-wallet",
            "creditsUsed": 2,
            "reason": "Usage of product one"
          }
        },
        "summary": "credit usage"
      }
    }
  }
}