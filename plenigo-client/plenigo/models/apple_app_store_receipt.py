import datetime
from typing import TYPE_CHECKING, Any, Dict, List, Type, TypeVar, Union, cast

from attrs import define as _attrs_define
from attrs import field as _attrs_field
from dateutil.parser import isoparse

from ..types import UNSET, Unset

if TYPE_CHECKING:
    from ..models.apple_app_store_receipt_item import AppleAppStoreReceiptItem


T = TypeVar("T", bound="AppleAppStoreReceipt")


@_attrs_define
class AppleAppStoreReceipt:
    """
    Attributes:
        receipt_type (Union[Unset, str]): type of receipt generated (e.g. Production, ProductionVPP, ProductionSandbox,
            ProductionVPPSandbox)
        adam_id (Union[Unset, int]): generated by App Store Connect and used by the App Store to uniquely identify the
            app purchased
        app_item_id (Union[Unset, str]): generated by App Store Connect and used by the App Store to uniquely identify
            the app purchased
        bundle_id (Union[Unset, str]): bundle identifier for the app to which the receipt belongs
        application_version (Union[Unset, str]): appâ€™s version number
        download_id (Union[Unset, int]): unique identifier for the app download transaction
        version_external_identifier (Union[Unset, str]): arbitrary number that identifies a revision of your app
        original_application_version (Union[Unset, str]): version of the app that the user originally purchased
        receipt_creation_date (Union[None, Unset, datetime.datetime]): time the App Store generated the receipt, in the
            Pacific Time zone
        request_date (Union[None, Unset, datetime.datetime]): time the request to the verifyReceipt endpoint was
            processed and the response was generated
        original_purchase_date (Union[None, Unset, datetime.datetime]): time of the original app purchase, in the
            Pacific Time zone
        items (Union[Unset, List['AppleAppStoreReceiptItem']]):
    """

    receipt_type: Union[Unset, str] = UNSET
    adam_id: Union[Unset, int] = UNSET
    app_item_id: Union[Unset, str] = UNSET
    bundle_id: Union[Unset, str] = UNSET
    application_version: Union[Unset, str] = UNSET
    download_id: Union[Unset, int] = UNSET
    version_external_identifier: Union[Unset, str] = UNSET
    original_application_version: Union[Unset, str] = UNSET
    receipt_creation_date: Union[None, Unset, datetime.datetime] = UNSET
    request_date: Union[None, Unset, datetime.datetime] = UNSET
    original_purchase_date: Union[None, Unset, datetime.datetime] = UNSET
    items: Union[Unset, List["AppleAppStoreReceiptItem"]] = UNSET
    additional_properties: Dict[str, Any] = _attrs_field(init=False, factory=dict)

    def to_dict(self) -> Dict[str, Any]:
        receipt_type = self.receipt_type

        adam_id = self.adam_id

        app_item_id = self.app_item_id

        bundle_id = self.bundle_id

        application_version = self.application_version

        download_id = self.download_id

        version_external_identifier = self.version_external_identifier

        original_application_version = self.original_application_version

        receipt_creation_date: Union[None, Unset, str]
        if isinstance(self.receipt_creation_date, Unset):
            receipt_creation_date = UNSET
        elif isinstance(self.receipt_creation_date, datetime.datetime):
            receipt_creation_date = self.receipt_creation_date.isoformat()
        else:
            receipt_creation_date = self.receipt_creation_date

        request_date: Union[None, Unset, str]
        if isinstance(self.request_date, Unset):
            request_date = UNSET
        elif isinstance(self.request_date, datetime.datetime):
            request_date = self.request_date.isoformat()
        else:
            request_date = self.request_date

        original_purchase_date: Union[None, Unset, str]
        if isinstance(self.original_purchase_date, Unset):
            original_purchase_date = UNSET
        elif isinstance(self.original_purchase_date, datetime.datetime):
            original_purchase_date = self.original_purchase_date.isoformat()
        else:
            original_purchase_date = self.original_purchase_date

        items: Union[Unset, List[Dict[str, Any]]] = UNSET
        if not isinstance(self.items, Unset):
            items = []
            for items_item_data in self.items:
                items_item = items_item_data.to_dict()
                items.append(items_item)

        field_dict: Dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update({})
        if receipt_type is not UNSET:
            field_dict["receiptType"] = receipt_type
        if adam_id is not UNSET:
            field_dict["adamID"] = adam_id
        if app_item_id is not UNSET:
            field_dict["appItemID"] = app_item_id
        if bundle_id is not UNSET:
            field_dict["bundleID"] = bundle_id
        if application_version is not UNSET:
            field_dict["applicationVersion"] = application_version
        if download_id is not UNSET:
            field_dict["downloadID"] = download_id
        if version_external_identifier is not UNSET:
            field_dict["versionExternalIdentifier"] = version_external_identifier
        if original_application_version is not UNSET:
            field_dict["originalApplicationVersion"] = original_application_version
        if receipt_creation_date is not UNSET:
            field_dict["receiptCreationDate"] = receipt_creation_date
        if request_date is not UNSET:
            field_dict["requestDate"] = request_date
        if original_purchase_date is not UNSET:
            field_dict["originalPurchaseDate"] = original_purchase_date
        if items is not UNSET:
            field_dict["items"] = items

        return field_dict

    @classmethod
    def from_dict(cls: Type[T], src_dict: Dict[str, Any]) -> T:
        from ..models.apple_app_store_receipt_item import AppleAppStoreReceiptItem

        d = src_dict.copy()
        receipt_type = d.pop("receiptType", UNSET)

        adam_id = d.pop("adamID", UNSET)

        app_item_id = d.pop("appItemID", UNSET)

        bundle_id = d.pop("bundleID", UNSET)

        application_version = d.pop("applicationVersion", UNSET)

        download_id = d.pop("downloadID", UNSET)

        version_external_identifier = d.pop("versionExternalIdentifier", UNSET)

        original_application_version = d.pop("originalApplicationVersion", UNSET)

        def _parse_receipt_creation_date(data: object) -> Union[None, Unset, datetime.datetime]:
            if data is None:
                return data
            if isinstance(data, Unset):
                return data
            try:
                if not isinstance(data, str):
                    raise TypeError()
                receipt_creation_date_type_1 = isoparse(data)

                return receipt_creation_date_type_1
            except:  # noqa: E722
                pass
            return cast(Union[None, Unset, datetime.datetime], data)

        receipt_creation_date = _parse_receipt_creation_date(d.pop("receiptCreationDate", UNSET))

        def _parse_request_date(data: object) -> Union[None, Unset, datetime.datetime]:
            if data is None:
                return data
            if isinstance(data, Unset):
                return data
            try:
                if not isinstance(data, str):
                    raise TypeError()
                request_date_type_1 = isoparse(data)

                return request_date_type_1
            except:  # noqa: E722
                pass
            return cast(Union[None, Unset, datetime.datetime], data)

        request_date = _parse_request_date(d.pop("requestDate", UNSET))

        def _parse_original_purchase_date(data: object) -> Union[None, Unset, datetime.datetime]:
            if data is None:
                return data
            if isinstance(data, Unset):
                return data
            try:
                if not isinstance(data, str):
                    raise TypeError()
                original_purchase_date_type_1 = isoparse(data)

                return original_purchase_date_type_1
            except:  # noqa: E722
                pass
            return cast(Union[None, Unset, datetime.datetime], data)

        original_purchase_date = _parse_original_purchase_date(d.pop("originalPurchaseDate", UNSET))

        items = []
        _items = d.pop("items", UNSET)
        for items_item_data in _items or []:
            items_item = AppleAppStoreReceiptItem.from_dict(items_item_data)

            items.append(items_item)

        apple_app_store_receipt = cls(
            receipt_type=receipt_type,
            adam_id=adam_id,
            app_item_id=app_item_id,
            bundle_id=bundle_id,
            application_version=application_version,
            download_id=download_id,
            version_external_identifier=version_external_identifier,
            original_application_version=original_application_version,
            receipt_creation_date=receipt_creation_date,
            request_date=request_date,
            original_purchase_date=original_purchase_date,
            items=items,
        )

        apple_app_store_receipt.additional_properties = d
        return apple_app_store_receipt

    @property
    def additional_keys(self) -> List[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
